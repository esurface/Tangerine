{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Tangerine? \u00b6 Tangerine is an open source software that helps with mobile data collection in low resource environments. Tangerine helps with skills measurement, continous and summative assessments, classroom observations, and health surveys and studies. Tangerine is flexible and customizable, allowing you to adapt the product to your specific project needs. The documentation in this site should guide you in making Tangerine work for your needs. Find the source for this in the Tangerine docs folder on Github.","title":"Home"},{"location":"#what-is-tangerine","text":"Tangerine is an open source software that helps with mobile data collection in low resource environments. Tangerine helps with skills measurement, continous and summative assessments, classroom observations, and health surveys and studies. Tangerine is flexible and customizable, allowing you to adapt the product to your specific project needs. The documentation in this site should guide you in making Tangerine work for your needs. Find the source for this in the Tangerine docs folder on Github.","title":"What is Tangerine?"},{"location":"CONTRIBUTING/","text":"How to Contribute Documentation \u00b6 Documentation in Tangerine is managed using the same process as all code contributions. In short, all changes should be completed within a feature-branch or fork of Tangerine and submitted as a pull request to the \"next\" branch. Documentation Overview \u00b6 Tangerine documentation is written using Markdown as the standard source. Documentation is compiled using MkDocs and is available within GitHub Pages. Links are as follows: GitHub Pages: https://docs.tangerinecentral.org/ Documentation Standards \u00b6 All documentation must be created and published using Markdown (.md) files and must reside in the docs/ folder or a subdirectory of the docs folder. Adding your Document to the Navigation \u00b6 Please follow the instructions on the MkDocs Documentation for adding pages to the navigation. The mkdocs.yml file can be found at the root level of the Tangerine repository. ... nav : - Home : index.md - About : about.md ... Setting up your Environment for Local Documentation Development \u00b6 Since Tangerine documentation is written in Markdown it's not necessary to have a full local development environment setup to add or modify documentation. That said, if you're making significant changes you may desire to have the ability to build the documentation locally. If you do want to setup a local development environment, I would recommend following MkDocs-Material Installation Instructions and starting your local environment with the mkdocs serve command. Contribution Guide \u00b6 TODO: Replace this video with an updated version to reflect the new process","title":"How to Contribute Documentation"},{"location":"CONTRIBUTING/#how-to-contribute-documentation","text":"Documentation in Tangerine is managed using the same process as all code contributions. In short, all changes should be completed within a feature-branch or fork of Tangerine and submitted as a pull request to the \"next\" branch.","title":"How to Contribute Documentation"},{"location":"CONTRIBUTING/#documentation-overview","text":"Tangerine documentation is written using Markdown as the standard source. Documentation is compiled using MkDocs and is available within GitHub Pages. Links are as follows: GitHub Pages: https://docs.tangerinecentral.org/","title":"Documentation Overview"},{"location":"CONTRIBUTING/#documentation-standards","text":"All documentation must be created and published using Markdown (.md) files and must reside in the docs/ folder or a subdirectory of the docs folder.","title":"Documentation Standards"},{"location":"CONTRIBUTING/#adding-your-document-to-the-navigation","text":"Please follow the instructions on the MkDocs Documentation for adding pages to the navigation. The mkdocs.yml file can be found at the root level of the Tangerine repository. ... nav : - Home : index.md - About : about.md ...","title":"Adding your Document to the Navigation"},{"location":"CONTRIBUTING/#setting-up-your-environment-for-local-documentation-development","text":"Since Tangerine documentation is written in Markdown it's not necessary to have a full local development environment setup to add or modify documentation. That said, if you're making significant changes you may desire to have the ability to build the documentation locally. If you do want to setup a local development environment, I would recommend following MkDocs-Material Installation Instructions and starting your local environment with the mkdocs serve command.","title":"Setting up your Environment for Local Documentation Development"},{"location":"CONTRIBUTING/#contribution-guide","text":"TODO: Replace this video with an updated version to reflect the new process","title":"Contribution Guide"},{"location":"about/","text":"About Tangerine \u00b6 Tangerine is electronic data collection software designed for use on Android mobile devices. Its primary use is to enable offline data capture in low-resource areas. Tangerine was first developed to capture student responses in in oral early grade reading and mathematics skills assessments, specifically Early Grade Reading Assessment (EGRA) and Early Grade Mathematics Assessment (EGMA). As well as capture interview responses from students, teachers and principals on home and school context information. Tangerine's capabilities have been expanded for data capture and management for rural health intervention projects. Using Tangerine improves data quality and the efficiency of data collection and analysis by simplifying the preparation and implementation of field work, reducing measurement and data entry errors, and eliminating manual data entry from paper forms. Tangerine was developed in 2011 by RTI International with its own internal research funds, and made available to the public through a GNU General Public License. RTI redesigned Tangerine and developed a new codebase using latest technologies in 2018 with funding support from Google.org. As an open source software platform Tangerine's source code is available for anyone who wishes to install and use Tangerine on their own web server. Tangerine's source code and related documentation is available on Github, a commonly used repository for open source software. To learn more and have a look under the hood, check out Tangerine's Code Repositories on Github. How it works \u00b6","title":"About Tangerine"},{"location":"about/#about-tangerine","text":"Tangerine is electronic data collection software designed for use on Android mobile devices. Its primary use is to enable offline data capture in low-resource areas. Tangerine was first developed to capture student responses in in oral early grade reading and mathematics skills assessments, specifically Early Grade Reading Assessment (EGRA) and Early Grade Mathematics Assessment (EGMA). As well as capture interview responses from students, teachers and principals on home and school context information. Tangerine's capabilities have been expanded for data capture and management for rural health intervention projects. Using Tangerine improves data quality and the efficiency of data collection and analysis by simplifying the preparation and implementation of field work, reducing measurement and data entry errors, and eliminating manual data entry from paper forms. Tangerine was developed in 2011 by RTI International with its own internal research funds, and made available to the public through a GNU General Public License. RTI redesigned Tangerine and developed a new codebase using latest technologies in 2018 with funding support from Google.org. As an open source software platform Tangerine's source code is available for anyone who wishes to install and use Tangerine on their own web server. Tangerine's source code and related documentation is available on Github, a commonly used repository for open source software. To learn more and have a look under the hood, check out Tangerine's Code Repositories on Github.","title":"About Tangerine"},{"location":"about/#how-it-works","text":"","title":"How it works"},{"location":"getting-started/","text":"Getting Started \u00b6 The starting point for Tangerine is dependent on what your role with the product will be. Are you a Project Manager looking to deploy Tangerine to help you manage data collection in your next project? Are you a Systems Administrator working on the back-end to make sure that Tangerine is operational on your company's technology? Or are you a forms developer, taking the questions for the survey and creating the digital forms in Tangerine, or are you a in the field data collector actually running the surveys? Depending on which of these roles fits will define where you should start. If you fall into multiple roles, try to follow this documentation path System Administrator -> Project Manager -> Forms Editor -> Data Collector. Use the tables below to determine your starting point. Since Tangerine is an open-source platform, you are welcome to develop off of our code if you wish. Go to the Tangerine Community to see the code or navigate to our Developer Guide . Roles \u00b6 Role Function Skill Set User Guide System Administrator Install and implement the technical side of Tangerine. AWS, SSL, SSH, running script in Terminal, Server/DB Management System Administrator Guide Project Manager Manages the technical aspects of the project. What and how data should be collected, defining how the project works within the Tangerine platform, and deploying the project in the field. Project Management, Data Collection Methodology Forms Editor Converts surveys into a digitial form using the Tangerine Form Editor and/or Javascript. Web Form Editor, Javascript (For Advanced Functions only) Form Editor Guide Data Collector Field Level Data collector, administers surveys, directly handles devices loaded with Tangerine Survey and Data Collection Data Collector Guide Overview of How Tangerine Works \u00b6 Case to Group to Form - How they interact with each other \u00b6 Flow Chart of Interactions \u00b6","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"The starting point for Tangerine is dependent on what your role with the product will be. Are you a Project Manager looking to deploy Tangerine to help you manage data collection in your next project? Are you a Systems Administrator working on the back-end to make sure that Tangerine is operational on your company's technology? Or are you a forms developer, taking the questions for the survey and creating the digital forms in Tangerine, or are you a in the field data collector actually running the surveys? Depending on which of these roles fits will define where you should start. If you fall into multiple roles, try to follow this documentation path System Administrator -> Project Manager -> Forms Editor -> Data Collector. Use the tables below to determine your starting point. Since Tangerine is an open-source platform, you are welcome to develop off of our code if you wish. Go to the Tangerine Community to see the code or navigate to our Developer Guide .","title":"Getting Started"},{"location":"getting-started/#roles","text":"Role Function Skill Set User Guide System Administrator Install and implement the technical side of Tangerine. AWS, SSL, SSH, running script in Terminal, Server/DB Management System Administrator Guide Project Manager Manages the technical aspects of the project. What and how data should be collected, defining how the project works within the Tangerine platform, and deploying the project in the field. Project Management, Data Collection Methodology Forms Editor Converts surveys into a digitial form using the Tangerine Form Editor and/or Javascript. Web Form Editor, Javascript (For Advanced Functions only) Form Editor Guide Data Collector Field Level Data collector, administers surveys, directly handles devices loaded with Tangerine Survey and Data Collection Data Collector Guide","title":"Roles"},{"location":"getting-started/#overview-of-how-tangerine-works","text":"","title":"Overview of How Tangerine Works"},{"location":"getting-started/#case-to-group-to-form-how-they-interact-with-each-other","text":"","title":"Case to Group to Form - How they interact with each other"},{"location":"getting-started/#flow-chart-of-interactions","text":"","title":"Flow Chart of Interactions"},{"location":"guides/","text":"Guides \u00b6 Welcome to the Tangerine Documentation site. Find the source for this in the Tangerine docs folder on Github. Editor Guide Data Collector Guide System Administrator Guide Developer Guide","title":"Guides"},{"location":"guides/#guides","text":"Welcome to the Tangerine Documentation site. Find the source for this in the Tangerine docs folder on Github. Editor Guide Data Collector Guide System Administrator Guide Developer Guide","title":"Guides"},{"location":"navigation/","text":"Other Resources \u00b6 .nav li a { height: 75px; padding-top: 29px; } .navbar-header { padding-top: 13px; margin-left: 120px; } .logo img {</p> <p>} .logo { position: fixed; top: 15px; left: 30px; z-index: 987654321; }</p> How to contribute documentation Issue Queue Code Releases Technical Chat Community Forum Tangerine Central","title":"Other Resources"},{"location":"navigation/#other-resources","text":".nav li a { height: 75px; padding-top: 29px; } .navbar-header { padding-top: 13px; margin-left: 120px; } .logo img {</p> <p>} .logo { position: fixed; top: 15px; left: 30px; z-index: 987654321; }</p> How to contribute documentation Issue Queue Code Releases Technical Chat Community Forum Tangerine Central","title":"Other Resources"},{"location":"whats-new/","text":"What's New \u00b6 v3.12.0 \u00b6 Fixes for all of Tangerine Autostop is not triggered when marking the entire lineas incorrect #1869 Mark entire line of grid as incorrect cannot be undone #1651 Meta data print screen Prompt and Hint are not displayed for Radio Buttons (single type) #1748 Form Metadata view of Checkboxes with one option is missing #2239 Delete a an incomplete form from a case does not refresh the screen #2114 When all optional and incomplete forms are removed (no required forms in the event) from an event on the client the + button is not shown to re-add any of them #2113 New Features for Case Module Data Collector finds Event Forms are automatically created on Case Event creation and after adding a Participant #2147 Demo Data Collector has found a non required form has become required #2233 Demo Part 1: https://youtu.be/dnJk4LaGuQw Demo Part 2: https://youtu.be/I0JOZounZc4 Data Collector finds Case Event is automatically marked as complete #2235 Demo Data Collector sees indicator on Event Form when corresponding Form Response has not been synced to a device #2232 Demo Data Collector views a dedicated page for a Participant's Event Forms for a specific Case Event #2236 Demo Data Collector is redirected to custom route after Event Form is submitted #2237 Demo Fixes for Case Module Device User registering only sees user profiles they can associate with restricted by location the Device is assigned #2248 When all optional and incomplete forms are removed (no required forms in the event) from an event on the client the + button is not shown to re-add any of them #2113 Delete an incomplete form from a case does not refresh the screen #2114 New features for Sync Protocol 2 Restore encrypted backup on Device #2127 API Changes for Case Module caseEvent.status is now caseEvent.complete which has a value of true or false as opposed to the status strings. caseService.startEventForm(...) is now caseService.createEventForm(...). caseService.deleteEventFormInstance(...) is now caseService.deleteEventForm(...). caseService.getCaseEventFormsData(...) is now caseService.getEventFormData(...). caseService.setCaseEventFormsData(...) is now caseService.setEventFormData(...). Upgrade instructions # Fetch the updates. cd tangerine git fetch origin git checkout v3.12.0 # Now you are ready to start the server. ./start.sh v3.12.0 # Run upgrade docker exec -it tangerine reporting-cache-clear # Remove Tangerine's previous version Docker Image. docker rmi tangerine/tangerine:v3.11.0 Note that after running the upgrade script, your reporting caches may take some time to finish rebuilding. Android upgrade instructions: If you are upgrading an Android device that was installed with Tangerine v3.8.0 or greater, you will need to regenerate your APK and reinstall, otherwise you may use the over the air updater. v3.11.0 \u00b6 New Features in all Tangerine Device Manager installs many Tangerine APKs on a single device #2182 CSV output enhancements: Editor User indicates whether to include PII in CSV export #1771 User profile information available in CSV export #2081 Editor User exports CSV file that contains the group and form name #2108 New 'T' namespace for helper functions #2198 New Features in Tangerine with Case Module Enabled New Features in Tangerine with Case Module enabled Data Collector changes location of Case #2098 demo Data Collector views an alert #2020 demo Data Collector views custom report #2143 docs Developer Notes Group permissions #2187 v3.10.0 \u00b6 Developer Notes Resolve problems with client compilation in Angular #2091 Upgrade instructions # Fetch the updates. cd tangerine git fetch origin git checkout v3.10.0 # Now you are ready to start the server. ./start.sh v3.10.0 # Run upgrade docker exec -it tangerine /tangerine/server/src/upgrade/v3.10.0.js v3.9.1 \u00b6 Fixes Database views are missing when running tangerine-preview or npm start #2096 Event Schedule day view duplicates day event and show it in previous day as well #2103 According to date carousel, events appear off by one week #2094 Event Schedule templates are failing #2085 Reports form is not added to forms.json #2088 Events appear off by one day in Schedule List #2101 CouchDB port should be configurable in config.sh #2092 When opening the schedule view the first page is missing the header dates #2082 Data Collector unable to open an Event from the Event Schedule #2102 When editing a radio button options in editor, options should be in one column, not two #2090 v3.9.0 \u00b6 New Features Set and get properties for Case Event Forms #2023 Data Manager reviews Cases PR Data Collector removes Event Form. PR Fixes Fix additional memory leaks in Case module causing tablets to slow down. PR Make getValue() function in Event Form List Item related templates less likely to crash. change Fixed incompatibilities with 2-way sync and P2P Sync. Fixed issue causing tablets to crash when syncing with a database with tens of thousands of records. Developer Notes Editor and Clients upgraded to Angular 8. Changes Due to current limitations of two way sync, two changes have been made to the Device form in Tangerine Editor: First, changing a Device's assigned location and sync settings after the Device record has been claimed will no longer be allowed. Second, devices will now always be required to be assigned to the last level in your location hierarchy. Upgrade instructions When you run the upgrade script, if you are using sync protocol 2 and have enabled, forms configured for 2 way sync will now be configured to use CouchDB sync to push documents up as opposed to \"custom sync\". # Fetch the updates. cd tangerine git fetch origin git checkout v3.9.0 # If you did not upgrade your config.sh in v3.8.1, migrate it now. # Move custom variables from config.sh_backup to config.sh. Note that T_ADMIN and T_PASS are no longer needed. mv config.sh config.sh_backup cp config.defaults.sh config.sh # To edit both files in vim you would run... vim -O config.sh config.sh_backup # Now you are ready to start the server. ./start.sh v3.9.0 # Run upgrade docker exec -it tangerine /tangerine/server/src/upgrade/v3.9.0.js v3.8.1 \u00b6 Fixes Client app performance improvements Improved caching of files. We are caching important configuration files for faster page loads (app-config.json, forms.json, location-list.json) and the Roboto font and have reduced redundant rendering calls. 1991 Loading spinner when opening an Event Form in a Case. #1992 Fixed a memory leak when viewing a Case which was causing tablets to crash if spending too much time on a Case screen. #2000 Radiobuttons now load faster on forms. Editor fixes Fixed an issue causing editor content region to be untouchable when window was narrow. #1940 Improved CSV output so it now contains Release ID, Device ID, and Build Channel on every row #349 Developer Notes We focused on issues with slow performance on tablets when viewing forms. We are caching important configuration files (app-config.json, forms.json, location-list.json) and the Roboto font and have reduced redundant rendering calls. More information in the Globals doc . Server Admin Notes We cleaned up config variables in config.sh , deprecated T_ADMIN and T_PASS #1986 New generate-cases command for load testing a large number of Cases based on your custom content in a group. #1993 New reset-all-devices command for reseting the server token and database keys for all devices. Note that after running this command you will need to reinstall on all devices and reregister with new QR codes. This command is useful if you are migrating a large amount of devices to a new group or a new server and you want to maintain Device ID consistency with the Device Serial numbers you are tracking. Upgrade instructions # Fetch the updates. cd tangerine git fetch origin git checkout v3.8.1 # Now migrate custom variables from config.sh_backup to config.sh. Note that T_ADMIN and T_PASS are no longer needed. mv config.sh config.sh_backup cp config.defaults.sh config.sh # To edit both files in vim you would run... vim -O config.sh config.sh_backup # Now you are ready to start the server. ./start.sh v3.8.1 v3.8.0 \u00b6 v3.8.0 is a big and exciting release! To accomodate the long list of changes, we split up this round of release notes into sections: General, Sync Protocol 2 Module, and Case Module, and Developer notes. General \u00b6 The following are features and fixes that are coming to all Tangerine installs. With this release comes an improved Editor UI experience, a faster device setup process, new form features, and much more. Group tabs are now in 4 sections Breadcrumbs allows you to navigate back up deeply nested areas New Features Editor User browses Group UI by nested categories (as opposed to flat list) #1880 Device Administrator is prompted to authorize permissions on first app load #1896 Data Collector defines password according to policy #1867 Data Collector views device info such as Device ID, Assigned Location, Server URL, Group Name, and Release Channel. #1834 Data Collector in checkboxes chooses \"none of the above\", then other options are unselected #1822 Editor distinguishes between inputs that are hidden and skipped #1800 Minor tweaks to the menu (now there is a single \"Sync\" item) and added tab bars to some pages for consistency. Sync Protocol 2 Module \u00b6 Sync Protocol 2 is a new module that can be enabled on a Tangerine installation that adds Device management, the ability for form responses to sync to the server and back down to tablets, the ablity for two tablets to sync form responses with each other offline, and much more. Sync Protocol 2 Module Features Manage which devices have access to sync, when they last synced, when they last updated and which version Define which form responses are synced up and back down to tablets Data Collector generates encrypted backup of Device #1909 Data Collector conducts a two-way sync with server only getting data from server relevant to their location #1755 Device sync by Location: Sync Protocol 2: Enables a \"Device Setup\" process on first boot of the client application. This requires you set up a \"Device\" record on the server. When setting up a Device record on the server, it will give you a QR code to use to scan from the tablet in order to receive it's device ID and token. Data Collector syncs to server with large dataset #1757 Data collector synchronizes data between devices using an Offline P2P mechanism #279 Editor User configures two-way sync for form responses from specific forms #1753 Editor revokes access to syncing with server for a lost Device #1894 Case Module Features Data Collector views Case Events in Schedule with Estimated Day, Scheduled Day, Window, and Occurred On Dates #1737 Data Collector creates (another) instance of a repeatable form for a specific participant in a specific event(8hrs) #1786 Data Collector views which Participant they are filling out a form for #1820 Data Collector searches for a Case in a large dataset #1893 Improvements to Case Home search - limit docs to 25 when no phrase is entered: #1871. Added rule to delay search in Case Home until at least two characters have been entered. Search results now sorted by date record updated. Lazy loading tabs in Case Home - this helps resolve some of the slowness in loading Case Home. Also disabled animations on tabs to remove jankiness. Developer Updates Re-enabled git config in Dockerfile - still having git networking error even when off corp network. Updated docker-tangerine-base-image to v3.4.0 New load testing doc. Added random name generation to the script that generates new cases - useful for load testing and checking how well search listing works. If using the 'case-mother' switch, record templates are pulled from your group. Upgrade instructions On the server, backup your data folder and then run the following commands. git fetch origin git checkout v3.8.0 ./start.sh v3.8.0 docker exec -it tangerine /tangerine/server/src/upgrade/v3.8.0.js Replace all ocurrences of localStorage.getItem('currentUser') with window.currentUser . v3.7.2 \u00b6 More fixes for upgrade process from v3.1.0. v3.7.1 \u00b6 Fixes Fix translations update script. Fix client update process when upgrading from v3.1.0. Upgrade instructions: On the server, backup your data folder and then run the following commands. git fetch origin git checkout v3.7.1 ./start.sh v3.7.1 docker exec tangerine translations-update v3.7.0 \u00b6 Fixes When editing forms, they will only save back to the server after clicking the top level \"save\" button. There is also now messaging around when the save either completes successfully or fails. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1645 On <tangy-timed> when using auto stop, return the property instead of the instead of the truthfulness of the value which is always false. PR: https://github.com/Tangerine-Community/tangy-form/pull/110 When uploadUnlockedFormReponses is set to true only incomplete forms are Synced up. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1725 In editor, modifying allowed pattern on text and number inputs does not work. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1770 Fix spacing between checkboxes in client Issue: https://github.com/Tangerine-Community/Tangerine/issues/1690 Fix click target and style for Case Event Form list Issue: https://github.com/Tangerine-Community/Tangerine/issues/1681 PR: https://github.com/Tangerine-Community/Tangerine/pull/1702 Fix Partial Date validation Issue: https://github.com/Tangerine-Community/Tangerine/issues/1683 PR: https://github.com/Tangerine-Community/tangy-form/pull/71 EF Touch changes <tangy-eftouch multi-select go-next-on-selection=\"2\"> should become <tangy-eftouch multi-select=\"2\" go-next-on-selection> . This allows for expanding functionality of being able to use multi-select without go-next-on-selection but still limit the number of choices the user can make minus the transition. no-corrections has been deprecated for new disable-after-selection attribute. When used with multi-select , the number of selections are still limited by the setting on multi-select , but changing selection is not allowed. The required attribute when used with multi-select will only require just one value selected. If you need form example 2 selections to be valid, you can combine required-all multi-select=\"2\" . We have an API change where we used to have TangyEftouch.value.selection was sometimes a string when not using multi-select and then when using multi-select , is was an array of strings. Now TangyEftouch.value.selection will always be an array of strings. Features When editing forms, the user will be warned of any duplicate variable names that exist in the form. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1793 Improve messaging when an APK update fails to download Issue: https://github.com/Tangerine-Community/Tangerine/issues/1743 PR: https://github.com/Tangerine-Community/Tangerine/commit/2ede9d3fb9d43dda234bfdcfc4849769b9b08e69 Data Collector sends SMS message from form Issue: https://github.com/Tangerine-Community/Tangerine/issues/1745 Data Collector views events in schedule with icons, estimated date info, and scheduled date info Issue: https://github.com/Tangerine-Community/Tangerine/issues/1686 Data Collector views Case Module screens in French Issue: https://github.com/Tangerine-Community/Tangerine/issues/1711 Data Collector confirms case when opened Issue: https://github.com/Tangerine-Community/Tangerine/issues/1695 PR: https://github.com/Tangerine-Community/Tangerine/pull/1741 Improved support for changing color scheme of client app using custom-styles.css , possible to have \"dark mode\". PR: https://github.com/Tangerine-Community/Tangerine/pull/1742 Data Collector shares all data on Device with other Users on the same Device. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1712 PR: https://github.com/Tangerine-Community/Tangerine/pull/1709 Data Collector finds Case Event status has changed to \"complete\" when all required forms are submitted. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1693 PR: https://github.com/Tangerine-Community/Tangerine/pull/1719 Data Collector finds all required Event Form instances in a Case Event are created upon opening the Case Event. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1691 PR: https://github.com/Tangerine-Community/Tangerine/pull/1718 Data Collector registers a Participant in a Case and views Event Forms grouped by Participant Issue: https://github.com/Tangerine-Community/Tangerine/issues/1692 PR : https://github.com/Tangerine-Community/Tangerine/pull/1723 Upgrade instructions On the server, backup your data folder and then run the following commands. git fetch origin git checkout v3.7.0 ./start.sh v3.7.0 docker exec tangerine translations-update v3.6.5 \u00b6 Fix timed grid output to exclude item level variables in logstash output https://github.com/Tangerine-Community/Tangerine/pull/1806 Upgrade instructions After the usual upgrade commands, also clear reporting caches with docker exec -it tangerine reporting-cache-clear . v3.6.4 \u00b6 Fix usage of T_CSV_MARK_DISABLED_OR_HIDDEN_WITH in some cases. v3.6.3 \u00b6 Allow disabled or hidden inputs output in CSV to be overridden using CSV_MARK_DISABLED_OR_HIDDEN_WITH in config.sh . The default value in config.defaults.sh is \"999\" which is what it has been for a few releases. When upgrading, do nothing if you want this to stay the same, otherwise use \"ORIGINAL_VALUE\" if you want to turn off the feature or set to your own custom value such as \"SKIPPED\" . v3.6.2 \u00b6 Fix import of location list from CSV https://github.com/Tangerine-Community/Tangerine/pull/1732/commits/05e57e8f1bb869dbd52b927d45fc223903e201db v3.6.1 \u00b6 Fixes Fix form routing for archived and active forms. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1722 PR: https://github.com/Tangerine-Community/Tangerine/pull/1724 Fix \"Mark entire line as incorrect in grids is not reflected in csv #1713\" Issue: https://github.com/Tangerine-Community/Tangerine/issues/1713 PR: https://github.com/Tangerine-Community/tangy-form/pull/103 v3.6.0 \u00b6 New Features Support for changing the order of forms. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1523 PR: https://github.com/Tangerine-Community/Tangerine/pull/1707 Support for archiving a form. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1526 PR: https://github.com/Tangerine-Community/Tangerine/pull/1675 Improvements and support on all inputs for error-text , hint-text , question-number , and content translations. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1655 PR: https://github.com/Tangerine-Community/tangy-form/pull/88 , https://github.com/Tangerine-Community/tangy-form/pull/86 Add support to <tangy-qr> for scanning data matrix codes. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1653 PR: https://github.com/Tangerine-Community/tangy-form/pull/87 New \"Capture Item at N Seconds\" feature for <tangy-timed> will prompt Data Collector to mark which item the child last read after a specific amount of time. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1586 PR: https://github.com/Tangerine-Community/tangy-form/pull/95 New goTo('itemID') helper function to navigate users to a specific item given some item level on-change logic. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1652 PR: https://github.com/Tangerine-Community/tangy-form/pull/92 New <tangy-signature> input for capturing signatures. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1656 PR: https://github.com/Tangerine-Community/tangy-form/pull/90 Visibility of labels and/or icons on item navigation now configurable with <tangy-form-item hide-nav-icons> and <tangy-form-item hide-nav-labels> . Issue: https://github.com/Tangerine-Community/Tangerine/issues/1682 PR: https://github.com/Tangerine-Community/tangy-form/pull/73 Fixes Fix Class tablets that are filling up their disk too fast. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1706 Fix metadata print screen options PR: https://github.com/Tangerine-Community/Tangerine/pull/1703 Issue: https://github.com/Tangerine-Community/Tangerine/issues/1670 , https://github.com/Tangerine-Community/Tangerine/issues/1671 Fix missing camera permission blocking APK installs form using QR or Photo Capture Issue: https://github.com/Tangerine-Community/Tangerine/issues/1646 , https://github.com/Tangerine-Community/Tangerine/issues/1578 Fix performance issues caused by needless TangyForm.on-change events from firing when they don't need to. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1656 PR: https://github.com/Tangerine-Community/tangy-form/pull/89 Fix data collector reviews completed fullscreen form Issue: https://github.com/Tangerine-Community/Tangerine/issues/1629 PR: https://github.com/Tangerine-Community/tangy-form/pull/75 <tangy-eftouch auto-progress> now distinguishes between going next on the time limit and going next on a number of selections. The API is now <tangy-eftouch go-next-on-selection=2> for going next on 2 selection and <tangy-eftouch go-next-on-time-limit> for going next on the time limit. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1597 PR: https://github.com/Tangerine-Community/tangy-form/pull/84 <tangy-eftouch> content is now more likely to fit above the fold, not overlap with content above it, be more consistent on smaller screens, and also adapt to screen size changes. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1591 , https://github.com/Tangerine-Community/Tangerine/issues/1587 PR: https://github.com/Tangerine-Community/tangy-form/pull/79 <tangy-eftouch> suffered from going to next item twice due to time limit and selection being made at in a close window. This is now fixed. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1596 PR: https://github.com/Tangerine-Community/tangy-form/pull/76 Fix Partial Date validation and for disabled attribute not reflecting Issue: https://github.com/Tangerine-Community/Tangerine/issues/1683 PR: https://github.com/Tangerine-Community/tangy-form/pull/71 Fix variable names in Editor to allow for only valid variable names. 2 or more characters, begin with alpha, no spaces, periods, allow _ no dash Issue: https://github.com/Tangerine-Community/Tangerine/issues/1566 , https://github.com/Tangerine-Community/Tangerine/issues/1558 , https://github.com/Tangerine-Community/Tangerine/issues/1461 PR: https://github.com/Tangerine-Community/tangy-form-editor/pull/77 Fix for Autostop for radio buttons - Issue: https://github.com/Tangerine-Community/Tangerine/issues/1519 PR's: https://github.com/Tangerine-Community/Tangerine/issues/1590 https://github.com/Tangerine-Community/tangy-form/pull/100 https://github.com/Tangerine-Community/tangy-form/pull/100 Experimental Features When using the experimental Case module, Editors can now program forms to trigger the creation of a \"Data Query\" when Data Collectors are entering data. Data queries are then shown later in a \"Data Queries\" tab where clarification on prior data entered is requested. PR: https://github.com/Tangerine-Community/Tangerine/pull/1661 Upgrade instructions On the server, backup your data folder and then run the following commands. git fetch origin git checkout v3.6.0 ./start.sh v3.6.0 Now you may publish a release to your Devices and run the \"Check for Update\" on each Device. Note that if you are looking to use the QR Code scanner and you have been using Android Installation, you will need to reinstall the App on Devices and make sure to note the additional permissions installation instructions noted in the README.md file for enabling the App to have Camera Access. If using the Web Browser Installation, there is no need to reinstall the app for Camera access. v3.5.0 \u00b6 New Features Forms with fullscreen enabled now have a toggle button for the user to enable/disable fullscreen mode. Form designers may specify the number of taps in order for fullscreen to disable. https://github.com/Tangerine-Community/tangy-form/pull/51 , https://github.com/Tangerine-Community/tangy-form/pull/72 , https://github.com/Tangerine-Community/tangy-form-editor/pull/73 An inputs object keyed by input name is now available for use in valid-if statements. https://github.com/Tangerine-Community/tangy-form/pull/65 A new Partial Date item is available https://github.com/Tangerine-Community/tangy-form/pull/57 Translations updates. #1613 New custom-styles.css file which can be added by modifying a group's assets folder. You may define CSS classes and then utilize them in the editor by adding them under each widget's class attribute. New \"Copy form\" feature added to to Editor and more descriptive icon for adding a database record #1627 Fixes Helper functions for timed grids are now safer, will not crash if a grid was skipped and info is not availble. https://github.com/Tangerine-Community/tangy-form/pull/61 Print view for a form had a bug where only the first page was printable. This is now fixed so that all pages may be printed. https://github.com/Tangerine-Community/Tangerine/pull/1605 Fix tangy-select test regression and work on EFTouch transition sound plays only on auto-progress #137 API change in tangy-select - use of secondaryLabel is supported but deprecated; Use optionSelectLabel instead. #1602 Fix the display of uploaded docs #1609 Enable auto-stop for untimed grids #1522 Increased clickable target for forms list and visits tab #1628 Upgrade instructions Backup your data folder and then run the following commands. git fetch origin git checkout v3.5.0 ./start.sh v3.5.0 docker exec -it tangerine /tangerine/server/src/upgrade/v3.5.0.js If any of your on-change logic looks into a form item's contents using tangyFormItemEl.shadowRoot.querySelector(...) or this.$.content.querySelector(...) , you must change it. The contents of the form can now be accessed at tangyFormItemEl.querySelector(...) . Also, the content element is no longer available. For example: // replace var el = this.$.content.querySelector('tangy-input[name=\\'classId\\']') //with var el = this.querySelector('tangy-input[name=\\'classId\\']') The advantage of moving this content out of the shadow DOM is that you can now style it directly from your app. v3.4.0 \u00b6 New Features New groups now ordered by creation date : Creating new groups will now order them by the date the were created in the group list. #1584 Configurable Web App Device Orientation : You can now specify the Web App orientation (portrait, landscape, or any) on device using the T_ORIENTATION variable in config.sh . Add T_ORIENTATION=\"any\" to config.sh to have more flexible orientations for PWA's. The options for T_ORIENTATION are at https://developer.mozilla.org/en-US/docs/Web/Manifest/orientation Media Library and Image support for Forms : Each group now has a media library tab where they can uplaod images which can then be utilized when inserting the new \"Image\" item on forms. #1138 New ACASI widget : The ACASI widget is braodly based on the EFTouch widget, but focused on a more static presentation of images and sounds. #56 Configurable font size in grids : You may now configure the font size in tangy-timed and tangy-untimed grids using the Option Font Size input. In tangy-form, it is exposed as option-font-size. Example of generated code: <tangy-timed required columns=\"3\" duration=80 name=\"class1_term2\" option-font-size=\"5\"> Auto-stop for tangy-radio-buttons : Add support for autostop in tangy-radio-buttons #49 . In Editor, set the Threshold to the number of incorrect answers: screenshots . Autostop is implemented by using the hideInputsUponThreshhold helper, which takes a tangy-form-item element and compares the number of correct radio button answers to the value in its incorrect-threshold attribute. Example of generated code: <tangy-form-item id=\"item1\" incorrect-threshold=\"2\"> New \"correct\" attribute for radio button options : A new \"correct\" attribute has been added to tangy-list-item to store the correct value. There is a \"Correct\" checkbox next to each option. Example of generated code: <tangy-radio-buttons name=\"fruit_selection2\" label=\"What is your favorite fruit?\"> <option name=\"tangerine\">Tangerine</option> <option name=\"cherry\" correct>Cherry</option> </tangy-radio-buttons> Fixes Critical Sync and \"data loss\" fix : Some variants of v3.3.x saw cases where data seemed to be lost on the tablet and sync no longer worked. After this release is deployed to the server, release for your groups and instruct all tablets to upgrade. The upgrade process may take many minutes depending on the amount of data stored on the tablet due to a schema update in the database. For an in depth look at what this update does, see the code here . Logstash Improvements #1516 User profiles were in a nested object, now they have been merged to be flat in the logstash output doc. See example here . If a form response uses a location element, it will now be extracted out into a top level \"geoip\" property whose value is an object with \"lat\" and \"lon\" properties. See example here . When new forms are created in the editor, they will no longer have a . character in their ID. This was causing some uneccessary and confusing logic in logstash config files. See PR here . EFTouch : A large number of fixes have been made for EFTouch. See recent issues here . Updated to tangy-form-editor ^5.18.0 for Change grid variables in CSV starting with variable_0 to variable_1 . A previous update to tangy-form to 3.15.1, tangy-form-editor to 5.17.0 to fixed Editing form level HTML requires two Save clicks Beta Features Two-way Sync : Allows for two-way sync of form responses. Can be configured to two way sync form responses for specific forms and also by geographic region defined in the user profile. See docs/feature-two-way-sync.md . and Add a tangy input inside a tangy box duplicates items , and enable Adjustable letter size for grids Case Module Add the \"case\" module to T_MODULES in config.sh and the default landing page for a group will be the cases search page and new \"Case Management Editor\" tab will appear in groups for creating and editing Case Definitions. #1517 Clientside search of Forms for Case Management Groups allows Cases to be found using the device camera to scan a QR code. See docs/case-management-group.md . Add event time and scheduling to Case Mangement Groups #1518 New layout for Case and Case Event pages. Upgrade instructions Backup your data folder and then run the following commands. git fetch origin git checkout v3.4.0 ./start.sh v3.3.1 \u00b6 This release fixes a feature that made it into v3.3.0 but had a bug and was disabled. This release fixes that bug and makes it available. As an Editor user I want to be able to do an initial import of my location structure. #1117 v3.3.0 \u00b6 Features Assessor reviews high level case variables, AKA \"Case Manifest\" #1399 Assessor changes language setting to Russian #1402 Untimed Grid subtest #1366 Editor Style Upgrades (April 2019) #1421 Group Names can now have spaces and special characters #1424 Editor configures Timed Grid to show or hide labels on buttons #1432 Server Admin tunes the reporting delay between when an upload occurs and it shows up in reporting outputs #1441 CSV output for single checkboxes now show up as \"0\" and \"1\" as opposed to \"\" and \"on\" #1367 CSV output for single radiobuttons now show up as \"0\" and \"1\" as opposed to \"null\" and \"on\" #1433 You can now limit who can add/see sitewide users to only the USER1 account by setting T_USER1_MANAGED_SERVER_USERS to \"true\" in config.sh #1381 . Client now has an \"About\" page with details about what Tangerine is #1465 . Upgrade instructions Backup your data folder and then run the following commands. git fetch origin git checkout v3.3.0 ./start.sh docker exec -it tangerine /tangerine/server/src/upgrade/v3.3.0.js v3.2.0 \u00b6 Developer Notes Ability to define database views on a per module basis in Client Angular #1419 Integrate test harness and TypeScript with server using NestJS #1413 Fix client tests, organize shared services and guards into the shared module, move client/app/ to client/ #1398 Upgrade instructions git fetch origin git checkout v3.2.0 ./start.sh docker exec tangerine /tangerine/upgrades/v3.2.0.js - In each group's app-config.json , change \"direction\" to \"languageDirection\" . - If using a translation other than English, change in each group's app-config.json , change \"languageCode\" to the corresponding language code. Current codes other than en for English is JO_ar for Jordanian and KH_km for Khmer. v3.1.0 \u00b6 Features Item Editor UX Improvements #810 Assessor verifies correct location selected by reviewing metadata of location #1191 As an assessor I'd like to include a hint option to be displayed below the question text #1279 Grids: helper functions for grids #1183 Ability to mark an entire row as incorrect on grids #1333 Assessor's backed up form responses are archived when storage is filling up #1304 Assessor scans a QR Code into form #1309 All hidden inputs have reporting values of \"999\" #1349 Merge reporting output of radiobuttons into one column. Fixes Editor not properly logging users out resulting in getting stuck every 24 hours #1314 Min and Max for input number cannot be saved through the interface #1297 time on grids cannot be changes and is always 60 seconds #1301 Unclosed tags in html container can break form #1289 Tangy timed option values disappear #1302 Note that #1349 will bve optional in future releases and you may not want to upgrade until that time. Upgrade instructions git fetch origin git checkout v3.1.0 ./start.sh docker exec tangerine reporting-cache-clear v3.0.0-beta13 \u00b6 Upgrade Instructions git fetch origin git checkout v3.0.0 # Note the new T_UPLOAD_TOKEN variable which is a replacement for the old upload account variables. mv config.sh config.sh_backup cp config.defaults.sh config.sh vim config.sh ./start.sh docker exec tangerine push-all-groups-views docker exec tangerine reporting-cache-clear For existing groups, you need to edit their app-config.json files in the ./data/client/content/groups folders. Replace them with the following template and make sure to update variables such as groupName , uploadToken , and serverUrl . { \"listUsernamesOnLoginScreen\" : true , \"modules\" : [ ], \"groupName\" : \"pineapple\" , \"securityQuestionText\" : \"What is your year of birth?\" , \"hideProfile\" : false , \"direction\" : \"ltr\" , \"columnsOnVisitsTab\" : [], \"hashSecurityQuestionResponse\" : false , \"uploadUnlockedFormReponses\" : false , \"uploadToken\" : \"change this to match T_UPLOAD_TOKEN in config.sh\" , \"securityPolicy\" : [ \"password\" ], \"homeUrl\" : \"case-management\" , \"serverUrl\" : \"https://f571f419.ngrok.io/\" , \"centrallyManagedUserProfile\" : false , \"registrationRequiresServerUser\" : false } New Features Server admin imports client archives into server #1166 After exporting data from clients, we now have an easy command line tool to import them. Place those exported files in ./data/archives folder and then run docker exec tangerine import-archives . Consumers of reporting API find user profile data appended to form responses #1147 New logstash module for installations that want to use logstash to migrate data to an Elastic Search instance. Enable by adding logstash to the list of modules in config.sh , then clear reporting caches docker exec -it tangerine bash; cd /tangerine/server/src/scripts; ./clear-all-reporting-cache.js; . You will find new <groupName>-logstash databases in CouchDB that you can configure logstash to consume. Upload Tokens instead of upload usernames and passwords. In your config.sh change T_UPLOAD_TOKEN to a secret phrase and then in existing groups add that to app-config.json as an \"uploadToken\" property and uploadUrl to serverUrl but without the username and password and upload/<groupName> . For example, \"uploadUrl\": \"http://uploader:password@foo.tangerinecentral.org/upload/foo\" would become \"serverUrl\":\"http://foo.tangerinecentral.org\", \"groupName\":\"foo\", \"uploadToken\":\"secret_foo_passphrase\" . If you not planning on updating clients right away, in config.sh set T_LEGACY=\"true\" to support the older upload API that those clients expect. When all clients are upgraded, set that variable back to false. Editor edits location list for group #982 @TODO Editor creates, edits, and deletes form responses on the server #1047 Editor exports CSV of a form for a month of their choosing #1143 Editor sees user profile form related columns joined to CSV of all forms #1142 On client, prevent users from editing their own profile. To impact new groups, change T_HIDE_PROFILE to \"true\" in config.sh . To modify existing groups, change \"hideProfile\" in group level app-config.json to true . Assessor registers on tablet, downloads form responses created on server #1129 On device registration, after user creates account, will force user to enter 6 character code that references online account. To impact new groups, change T_REGISTRATION_REQUIRES_SERVER_USER to \"true\" . To modify existing groups, change \"registrationRequiresServerUser\" in group level app-config.json to true . Editor updates client user profile on server, Assessor sees updated profile after next sync #1134 On client sync, will result in any changes made to a user profile on the server to be downloaded and reflected on the client. To impact new groups, change T_CENTRALLY_MANAGED_USER_PROFILE to \"true\" in config.sh . To modify existing groups, change \"centrallyManagedUserProfile\" in group level app-config.json to true . Editor views tangy-timed items_per_minute calculation in the CSV #1100 <tangy-location> can be filtered by entries in the profile by adding attribute <tangy-location filter-by-global> . In the editor when editing a <tangy-location> you will find a new option \"Filter by locations in the user profile?\" you can check. Advanced forms features (no GUI for these features) <tangy-input-group> can be used to create repeatable groups of inputs. See the demo here . Geofence for v3 #941 If you location list has latitude and longitude properties for each location, you can validate your <tangy-location> selection given a geofence in <tangy-gps> . See the screenshots here and a code example of how to build this in your form here . Upload incomplete form responses (important for Class module) To modify existing groups, set \"uploadUnlockedFormReponses\" to true in app-config.json . Server Admin clears reporting cache #1064 Server Admin runs script to update views in databases #962 Server Admin limits by site or by group the number of form responses uploaded end up in reporting outputs #1155 This feature brings two new settings to config.sh . Set T_PAID_MODE to \"site\" to limit on a sitewide level, use \"group\" to limit on a per group level. Set T_PAID_ALLOWANCE from \"umlimited\" to a specific number like \"1000\" to limit form responses that end up in reporting outputs to one thousand. This mechanism works by marking uploaded form responses as \"paid\". When you first upgrade to this release, none of your form responses will be marked as paid and will not end up in reporting outputs until they are marked as paid against the allowance. If you want to mark all current uploaded form responses as paid and only mark against their allowance for future uploads, set the allowance to unlimited and after the reporting caches have been built, set the allowance desired and run ./start.sh again. Optional Modules you can turn on and off in config.sh T_MODULES list. Note that if you are going to override the default T_MODULES list with an additional module such as class , don't forget to add modules such as csv if you still need them! Reporting outputs (inluding CSVs) include the information about the number of children a location has. #1174 Known issues Memory leak results in Error: spawn ENOMEM #886 On the server command line run crontab -e and then add the following entry to restart the program every 24 hours 0 0 * * * docker stop tangerine; docker start tangerine . 2.0.0 (pre-release) \u00b6 Features As a Tangerine Database admin, I want to control which users have the \"Manager\" role for creating new groups #218 As a Tangerine Editor User, I expect to see timestamps on CSVs down to the second #223 As a user, if I end up on a http:// URL I want to be redirected to the https:// version of that URL #98 Bugs New groups default Client tabs are set up for workflow, should be vanilla tangerine #230 When Tangerine is first installed, User1 does not have the required Manager role so groups cannot be created #229 School Location Subtest does not render after upgrading from Tangerine 0.4.x to v2.0.0 #189 If a group was upgraded from 0.x.x and does not have a media folder, APK generating fails #186 Deleting group does not set security correctly on resulting \"deleted\" database #227 Large CSVs fail to generate #221 When a new Workflow is created it is missing retrictToRole, reporting, and authenticityParameters #228 Ensure /var/log/couchdb exists so CouchDB does not crash #216 Technical Information Document how to use SSL with Tangerine #219 Things to add to .gitignore #185 Clean up build process so client does not need to compile twice #74 Upgrade Instructions This is the first release with upgrade scripts so you will need to run all upgrade scripts between the version you started at and this one. For example, if you are at Tangerine 0.4.6, then you must run... docker exec -it tangerine-container /tangerine-server/upgrades/v1.0.0.sh docker exec -it tangerine-container /tangerine-server/upgrades/v2.0.0.sh If you are at Tangerine 1.7.8, then you must run... docker exec -it tangerine-container /tangerine-server/upgrades/v2.0.0.sh v2.2.0 \u00b6 Information User Stories - As a Site Owner I want to know how many results have been uploaded given arbitrary time period #457 Technical - Refactor start.sh and config.defaults.sh to allow configurable ports and tag #456 Upgrade Instructions docker exec -it tangerine-container /tangerine-server/upgrades/v2.2.0.sh","title":"What's New"},{"location":"whats-new/#whats-new","text":"","title":"What's New"},{"location":"whats-new/#v3120","text":"Fixes for all of Tangerine Autostop is not triggered when marking the entire lineas incorrect #1869 Mark entire line of grid as incorrect cannot be undone #1651 Meta data print screen Prompt and Hint are not displayed for Radio Buttons (single type) #1748 Form Metadata view of Checkboxes with one option is missing #2239 Delete a an incomplete form from a case does not refresh the screen #2114 When all optional and incomplete forms are removed (no required forms in the event) from an event on the client the + button is not shown to re-add any of them #2113 New Features for Case Module Data Collector finds Event Forms are automatically created on Case Event creation and after adding a Participant #2147 Demo Data Collector has found a non required form has become required #2233 Demo Part 1: https://youtu.be/dnJk4LaGuQw Demo Part 2: https://youtu.be/I0JOZounZc4 Data Collector finds Case Event is automatically marked as complete #2235 Demo Data Collector sees indicator on Event Form when corresponding Form Response has not been synced to a device #2232 Demo Data Collector views a dedicated page for a Participant's Event Forms for a specific Case Event #2236 Demo Data Collector is redirected to custom route after Event Form is submitted #2237 Demo Fixes for Case Module Device User registering only sees user profiles they can associate with restricted by location the Device is assigned #2248 When all optional and incomplete forms are removed (no required forms in the event) from an event on the client the + button is not shown to re-add any of them #2113 Delete an incomplete form from a case does not refresh the screen #2114 New features for Sync Protocol 2 Restore encrypted backup on Device #2127 API Changes for Case Module caseEvent.status is now caseEvent.complete which has a value of true or false as opposed to the status strings. caseService.startEventForm(...) is now caseService.createEventForm(...). caseService.deleteEventFormInstance(...) is now caseService.deleteEventForm(...). caseService.getCaseEventFormsData(...) is now caseService.getEventFormData(...). caseService.setCaseEventFormsData(...) is now caseService.setEventFormData(...). Upgrade instructions # Fetch the updates. cd tangerine git fetch origin git checkout v3.12.0 # Now you are ready to start the server. ./start.sh v3.12.0 # Run upgrade docker exec -it tangerine reporting-cache-clear # Remove Tangerine's previous version Docker Image. docker rmi tangerine/tangerine:v3.11.0 Note that after running the upgrade script, your reporting caches may take some time to finish rebuilding. Android upgrade instructions: If you are upgrading an Android device that was installed with Tangerine v3.8.0 or greater, you will need to regenerate your APK and reinstall, otherwise you may use the over the air updater.","title":"v3.12.0"},{"location":"whats-new/#v3110","text":"New Features in all Tangerine Device Manager installs many Tangerine APKs on a single device #2182 CSV output enhancements: Editor User indicates whether to include PII in CSV export #1771 User profile information available in CSV export #2081 Editor User exports CSV file that contains the group and form name #2108 New 'T' namespace for helper functions #2198 New Features in Tangerine with Case Module Enabled New Features in Tangerine with Case Module enabled Data Collector changes location of Case #2098 demo Data Collector views an alert #2020 demo Data Collector views custom report #2143 docs Developer Notes Group permissions #2187","title":"v3.11.0"},{"location":"whats-new/#v3100","text":"Developer Notes Resolve problems with client compilation in Angular #2091 Upgrade instructions # Fetch the updates. cd tangerine git fetch origin git checkout v3.10.0 # Now you are ready to start the server. ./start.sh v3.10.0 # Run upgrade docker exec -it tangerine /tangerine/server/src/upgrade/v3.10.0.js","title":"v3.10.0"},{"location":"whats-new/#v391","text":"Fixes Database views are missing when running tangerine-preview or npm start #2096 Event Schedule day view duplicates day event and show it in previous day as well #2103 According to date carousel, events appear off by one week #2094 Event Schedule templates are failing #2085 Reports form is not added to forms.json #2088 Events appear off by one day in Schedule List #2101 CouchDB port should be configurable in config.sh #2092 When opening the schedule view the first page is missing the header dates #2082 Data Collector unable to open an Event from the Event Schedule #2102 When editing a radio button options in editor, options should be in one column, not two #2090","title":"v3.9.1"},{"location":"whats-new/#v390","text":"New Features Set and get properties for Case Event Forms #2023 Data Manager reviews Cases PR Data Collector removes Event Form. PR Fixes Fix additional memory leaks in Case module causing tablets to slow down. PR Make getValue() function in Event Form List Item related templates less likely to crash. change Fixed incompatibilities with 2-way sync and P2P Sync. Fixed issue causing tablets to crash when syncing with a database with tens of thousands of records. Developer Notes Editor and Clients upgraded to Angular 8. Changes Due to current limitations of two way sync, two changes have been made to the Device form in Tangerine Editor: First, changing a Device's assigned location and sync settings after the Device record has been claimed will no longer be allowed. Second, devices will now always be required to be assigned to the last level in your location hierarchy. Upgrade instructions When you run the upgrade script, if you are using sync protocol 2 and have enabled, forms configured for 2 way sync will now be configured to use CouchDB sync to push documents up as opposed to \"custom sync\". # Fetch the updates. cd tangerine git fetch origin git checkout v3.9.0 # If you did not upgrade your config.sh in v3.8.1, migrate it now. # Move custom variables from config.sh_backup to config.sh. Note that T_ADMIN and T_PASS are no longer needed. mv config.sh config.sh_backup cp config.defaults.sh config.sh # To edit both files in vim you would run... vim -O config.sh config.sh_backup # Now you are ready to start the server. ./start.sh v3.9.0 # Run upgrade docker exec -it tangerine /tangerine/server/src/upgrade/v3.9.0.js","title":"v3.9.0"},{"location":"whats-new/#v381","text":"Fixes Client app performance improvements Improved caching of files. We are caching important configuration files for faster page loads (app-config.json, forms.json, location-list.json) and the Roboto font and have reduced redundant rendering calls. 1991 Loading spinner when opening an Event Form in a Case. #1992 Fixed a memory leak when viewing a Case which was causing tablets to crash if spending too much time on a Case screen. #2000 Radiobuttons now load faster on forms. Editor fixes Fixed an issue causing editor content region to be untouchable when window was narrow. #1940 Improved CSV output so it now contains Release ID, Device ID, and Build Channel on every row #349 Developer Notes We focused on issues with slow performance on tablets when viewing forms. We are caching important configuration files (app-config.json, forms.json, location-list.json) and the Roboto font and have reduced redundant rendering calls. More information in the Globals doc . Server Admin Notes We cleaned up config variables in config.sh , deprecated T_ADMIN and T_PASS #1986 New generate-cases command for load testing a large number of Cases based on your custom content in a group. #1993 New reset-all-devices command for reseting the server token and database keys for all devices. Note that after running this command you will need to reinstall on all devices and reregister with new QR codes. This command is useful if you are migrating a large amount of devices to a new group or a new server and you want to maintain Device ID consistency with the Device Serial numbers you are tracking. Upgrade instructions # Fetch the updates. cd tangerine git fetch origin git checkout v3.8.1 # Now migrate custom variables from config.sh_backup to config.sh. Note that T_ADMIN and T_PASS are no longer needed. mv config.sh config.sh_backup cp config.defaults.sh config.sh # To edit both files in vim you would run... vim -O config.sh config.sh_backup # Now you are ready to start the server. ./start.sh v3.8.1","title":"v3.8.1"},{"location":"whats-new/#v380","text":"v3.8.0 is a big and exciting release! To accomodate the long list of changes, we split up this round of release notes into sections: General, Sync Protocol 2 Module, and Case Module, and Developer notes.","title":"v3.8.0"},{"location":"whats-new/#general","text":"The following are features and fixes that are coming to all Tangerine installs. With this release comes an improved Editor UI experience, a faster device setup process, new form features, and much more. Group tabs are now in 4 sections Breadcrumbs allows you to navigate back up deeply nested areas New Features Editor User browses Group UI by nested categories (as opposed to flat list) #1880 Device Administrator is prompted to authorize permissions on first app load #1896 Data Collector defines password according to policy #1867 Data Collector views device info such as Device ID, Assigned Location, Server URL, Group Name, and Release Channel. #1834 Data Collector in checkboxes chooses \"none of the above\", then other options are unselected #1822 Editor distinguishes between inputs that are hidden and skipped #1800 Minor tweaks to the menu (now there is a single \"Sync\" item) and added tab bars to some pages for consistency.","title":"General"},{"location":"whats-new/#sync-protocol-2-module","text":"Sync Protocol 2 is a new module that can be enabled on a Tangerine installation that adds Device management, the ability for form responses to sync to the server and back down to tablets, the ablity for two tablets to sync form responses with each other offline, and much more. Sync Protocol 2 Module Features Manage which devices have access to sync, when they last synced, when they last updated and which version Define which form responses are synced up and back down to tablets Data Collector generates encrypted backup of Device #1909 Data Collector conducts a two-way sync with server only getting data from server relevant to their location #1755 Device sync by Location: Sync Protocol 2: Enables a \"Device Setup\" process on first boot of the client application. This requires you set up a \"Device\" record on the server. When setting up a Device record on the server, it will give you a QR code to use to scan from the tablet in order to receive it's device ID and token. Data Collector syncs to server with large dataset #1757 Data collector synchronizes data between devices using an Offline P2P mechanism #279 Editor User configures two-way sync for form responses from specific forms #1753 Editor revokes access to syncing with server for a lost Device #1894 Case Module Features Data Collector views Case Events in Schedule with Estimated Day, Scheduled Day, Window, and Occurred On Dates #1737 Data Collector creates (another) instance of a repeatable form for a specific participant in a specific event(8hrs) #1786 Data Collector views which Participant they are filling out a form for #1820 Data Collector searches for a Case in a large dataset #1893 Improvements to Case Home search - limit docs to 25 when no phrase is entered: #1871. Added rule to delay search in Case Home until at least two characters have been entered. Search results now sorted by date record updated. Lazy loading tabs in Case Home - this helps resolve some of the slowness in loading Case Home. Also disabled animations on tabs to remove jankiness. Developer Updates Re-enabled git config in Dockerfile - still having git networking error even when off corp network. Updated docker-tangerine-base-image to v3.4.0 New load testing doc. Added random name generation to the script that generates new cases - useful for load testing and checking how well search listing works. If using the 'case-mother' switch, record templates are pulled from your group. Upgrade instructions On the server, backup your data folder and then run the following commands. git fetch origin git checkout v3.8.0 ./start.sh v3.8.0 docker exec -it tangerine /tangerine/server/src/upgrade/v3.8.0.js Replace all ocurrences of localStorage.getItem('currentUser') with window.currentUser .","title":"Sync Protocol 2 Module"},{"location":"whats-new/#v372","text":"More fixes for upgrade process from v3.1.0.","title":"v3.7.2"},{"location":"whats-new/#v371","text":"Fixes Fix translations update script. Fix client update process when upgrading from v3.1.0. Upgrade instructions: On the server, backup your data folder and then run the following commands. git fetch origin git checkout v3.7.1 ./start.sh v3.7.1 docker exec tangerine translations-update","title":"v3.7.1"},{"location":"whats-new/#v370","text":"Fixes When editing forms, they will only save back to the server after clicking the top level \"save\" button. There is also now messaging around when the save either completes successfully or fails. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1645 On <tangy-timed> when using auto stop, return the property instead of the instead of the truthfulness of the value which is always false. PR: https://github.com/Tangerine-Community/tangy-form/pull/110 When uploadUnlockedFormReponses is set to true only incomplete forms are Synced up. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1725 In editor, modifying allowed pattern on text and number inputs does not work. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1770 Fix spacing between checkboxes in client Issue: https://github.com/Tangerine-Community/Tangerine/issues/1690 Fix click target and style for Case Event Form list Issue: https://github.com/Tangerine-Community/Tangerine/issues/1681 PR: https://github.com/Tangerine-Community/Tangerine/pull/1702 Fix Partial Date validation Issue: https://github.com/Tangerine-Community/Tangerine/issues/1683 PR: https://github.com/Tangerine-Community/tangy-form/pull/71 EF Touch changes <tangy-eftouch multi-select go-next-on-selection=\"2\"> should become <tangy-eftouch multi-select=\"2\" go-next-on-selection> . This allows for expanding functionality of being able to use multi-select without go-next-on-selection but still limit the number of choices the user can make minus the transition. no-corrections has been deprecated for new disable-after-selection attribute. When used with multi-select , the number of selections are still limited by the setting on multi-select , but changing selection is not allowed. The required attribute when used with multi-select will only require just one value selected. If you need form example 2 selections to be valid, you can combine required-all multi-select=\"2\" . We have an API change where we used to have TangyEftouch.value.selection was sometimes a string when not using multi-select and then when using multi-select , is was an array of strings. Now TangyEftouch.value.selection will always be an array of strings. Features When editing forms, the user will be warned of any duplicate variable names that exist in the form. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1793 Improve messaging when an APK update fails to download Issue: https://github.com/Tangerine-Community/Tangerine/issues/1743 PR: https://github.com/Tangerine-Community/Tangerine/commit/2ede9d3fb9d43dda234bfdcfc4849769b9b08e69 Data Collector sends SMS message from form Issue: https://github.com/Tangerine-Community/Tangerine/issues/1745 Data Collector views events in schedule with icons, estimated date info, and scheduled date info Issue: https://github.com/Tangerine-Community/Tangerine/issues/1686 Data Collector views Case Module screens in French Issue: https://github.com/Tangerine-Community/Tangerine/issues/1711 Data Collector confirms case when opened Issue: https://github.com/Tangerine-Community/Tangerine/issues/1695 PR: https://github.com/Tangerine-Community/Tangerine/pull/1741 Improved support for changing color scheme of client app using custom-styles.css , possible to have \"dark mode\". PR: https://github.com/Tangerine-Community/Tangerine/pull/1742 Data Collector shares all data on Device with other Users on the same Device. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1712 PR: https://github.com/Tangerine-Community/Tangerine/pull/1709 Data Collector finds Case Event status has changed to \"complete\" when all required forms are submitted. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1693 PR: https://github.com/Tangerine-Community/Tangerine/pull/1719 Data Collector finds all required Event Form instances in a Case Event are created upon opening the Case Event. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1691 PR: https://github.com/Tangerine-Community/Tangerine/pull/1718 Data Collector registers a Participant in a Case and views Event Forms grouped by Participant Issue: https://github.com/Tangerine-Community/Tangerine/issues/1692 PR : https://github.com/Tangerine-Community/Tangerine/pull/1723 Upgrade instructions On the server, backup your data folder and then run the following commands. git fetch origin git checkout v3.7.0 ./start.sh v3.7.0 docker exec tangerine translations-update","title":"v3.7.0"},{"location":"whats-new/#v365","text":"Fix timed grid output to exclude item level variables in logstash output https://github.com/Tangerine-Community/Tangerine/pull/1806 Upgrade instructions After the usual upgrade commands, also clear reporting caches with docker exec -it tangerine reporting-cache-clear .","title":"v3.6.5"},{"location":"whats-new/#v364","text":"Fix usage of T_CSV_MARK_DISABLED_OR_HIDDEN_WITH in some cases.","title":"v3.6.4"},{"location":"whats-new/#v363","text":"Allow disabled or hidden inputs output in CSV to be overridden using CSV_MARK_DISABLED_OR_HIDDEN_WITH in config.sh . The default value in config.defaults.sh is \"999\" which is what it has been for a few releases. When upgrading, do nothing if you want this to stay the same, otherwise use \"ORIGINAL_VALUE\" if you want to turn off the feature or set to your own custom value such as \"SKIPPED\" .","title":"v3.6.3"},{"location":"whats-new/#v362","text":"Fix import of location list from CSV https://github.com/Tangerine-Community/Tangerine/pull/1732/commits/05e57e8f1bb869dbd52b927d45fc223903e201db","title":"v3.6.2"},{"location":"whats-new/#v361","text":"Fixes Fix form routing for archived and active forms. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1722 PR: https://github.com/Tangerine-Community/Tangerine/pull/1724 Fix \"Mark entire line as incorrect in grids is not reflected in csv #1713\" Issue: https://github.com/Tangerine-Community/Tangerine/issues/1713 PR: https://github.com/Tangerine-Community/tangy-form/pull/103","title":"v3.6.1"},{"location":"whats-new/#v360","text":"New Features Support for changing the order of forms. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1523 PR: https://github.com/Tangerine-Community/Tangerine/pull/1707 Support for archiving a form. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1526 PR: https://github.com/Tangerine-Community/Tangerine/pull/1675 Improvements and support on all inputs for error-text , hint-text , question-number , and content translations. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1655 PR: https://github.com/Tangerine-Community/tangy-form/pull/88 , https://github.com/Tangerine-Community/tangy-form/pull/86 Add support to <tangy-qr> for scanning data matrix codes. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1653 PR: https://github.com/Tangerine-Community/tangy-form/pull/87 New \"Capture Item at N Seconds\" feature for <tangy-timed> will prompt Data Collector to mark which item the child last read after a specific amount of time. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1586 PR: https://github.com/Tangerine-Community/tangy-form/pull/95 New goTo('itemID') helper function to navigate users to a specific item given some item level on-change logic. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1652 PR: https://github.com/Tangerine-Community/tangy-form/pull/92 New <tangy-signature> input for capturing signatures. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1656 PR: https://github.com/Tangerine-Community/tangy-form/pull/90 Visibility of labels and/or icons on item navigation now configurable with <tangy-form-item hide-nav-icons> and <tangy-form-item hide-nav-labels> . Issue: https://github.com/Tangerine-Community/Tangerine/issues/1682 PR: https://github.com/Tangerine-Community/tangy-form/pull/73 Fixes Fix Class tablets that are filling up their disk too fast. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1706 Fix metadata print screen options PR: https://github.com/Tangerine-Community/Tangerine/pull/1703 Issue: https://github.com/Tangerine-Community/Tangerine/issues/1670 , https://github.com/Tangerine-Community/Tangerine/issues/1671 Fix missing camera permission blocking APK installs form using QR or Photo Capture Issue: https://github.com/Tangerine-Community/Tangerine/issues/1646 , https://github.com/Tangerine-Community/Tangerine/issues/1578 Fix performance issues caused by needless TangyForm.on-change events from firing when they don't need to. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1656 PR: https://github.com/Tangerine-Community/tangy-form/pull/89 Fix data collector reviews completed fullscreen form Issue: https://github.com/Tangerine-Community/Tangerine/issues/1629 PR: https://github.com/Tangerine-Community/tangy-form/pull/75 <tangy-eftouch auto-progress> now distinguishes between going next on the time limit and going next on a number of selections. The API is now <tangy-eftouch go-next-on-selection=2> for going next on 2 selection and <tangy-eftouch go-next-on-time-limit> for going next on the time limit. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1597 PR: https://github.com/Tangerine-Community/tangy-form/pull/84 <tangy-eftouch> content is now more likely to fit above the fold, not overlap with content above it, be more consistent on smaller screens, and also adapt to screen size changes. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1591 , https://github.com/Tangerine-Community/Tangerine/issues/1587 PR: https://github.com/Tangerine-Community/tangy-form/pull/79 <tangy-eftouch> suffered from going to next item twice due to time limit and selection being made at in a close window. This is now fixed. Issue: https://github.com/Tangerine-Community/Tangerine/issues/1596 PR: https://github.com/Tangerine-Community/tangy-form/pull/76 Fix Partial Date validation and for disabled attribute not reflecting Issue: https://github.com/Tangerine-Community/Tangerine/issues/1683 PR: https://github.com/Tangerine-Community/tangy-form/pull/71 Fix variable names in Editor to allow for only valid variable names. 2 or more characters, begin with alpha, no spaces, periods, allow _ no dash Issue: https://github.com/Tangerine-Community/Tangerine/issues/1566 , https://github.com/Tangerine-Community/Tangerine/issues/1558 , https://github.com/Tangerine-Community/Tangerine/issues/1461 PR: https://github.com/Tangerine-Community/tangy-form-editor/pull/77 Fix for Autostop for radio buttons - Issue: https://github.com/Tangerine-Community/Tangerine/issues/1519 PR's: https://github.com/Tangerine-Community/Tangerine/issues/1590 https://github.com/Tangerine-Community/tangy-form/pull/100 https://github.com/Tangerine-Community/tangy-form/pull/100 Experimental Features When using the experimental Case module, Editors can now program forms to trigger the creation of a \"Data Query\" when Data Collectors are entering data. Data queries are then shown later in a \"Data Queries\" tab where clarification on prior data entered is requested. PR: https://github.com/Tangerine-Community/Tangerine/pull/1661 Upgrade instructions On the server, backup your data folder and then run the following commands. git fetch origin git checkout v3.6.0 ./start.sh v3.6.0 Now you may publish a release to your Devices and run the \"Check for Update\" on each Device. Note that if you are looking to use the QR Code scanner and you have been using Android Installation, you will need to reinstall the App on Devices and make sure to note the additional permissions installation instructions noted in the README.md file for enabling the App to have Camera Access. If using the Web Browser Installation, there is no need to reinstall the app for Camera access.","title":"v3.6.0"},{"location":"whats-new/#v350","text":"New Features Forms with fullscreen enabled now have a toggle button for the user to enable/disable fullscreen mode. Form designers may specify the number of taps in order for fullscreen to disable. https://github.com/Tangerine-Community/tangy-form/pull/51 , https://github.com/Tangerine-Community/tangy-form/pull/72 , https://github.com/Tangerine-Community/tangy-form-editor/pull/73 An inputs object keyed by input name is now available for use in valid-if statements. https://github.com/Tangerine-Community/tangy-form/pull/65 A new Partial Date item is available https://github.com/Tangerine-Community/tangy-form/pull/57 Translations updates. #1613 New custom-styles.css file which can be added by modifying a group's assets folder. You may define CSS classes and then utilize them in the editor by adding them under each widget's class attribute. New \"Copy form\" feature added to to Editor and more descriptive icon for adding a database record #1627 Fixes Helper functions for timed grids are now safer, will not crash if a grid was skipped and info is not availble. https://github.com/Tangerine-Community/tangy-form/pull/61 Print view for a form had a bug where only the first page was printable. This is now fixed so that all pages may be printed. https://github.com/Tangerine-Community/Tangerine/pull/1605 Fix tangy-select test regression and work on EFTouch transition sound plays only on auto-progress #137 API change in tangy-select - use of secondaryLabel is supported but deprecated; Use optionSelectLabel instead. #1602 Fix the display of uploaded docs #1609 Enable auto-stop for untimed grids #1522 Increased clickable target for forms list and visits tab #1628 Upgrade instructions Backup your data folder and then run the following commands. git fetch origin git checkout v3.5.0 ./start.sh v3.5.0 docker exec -it tangerine /tangerine/server/src/upgrade/v3.5.0.js If any of your on-change logic looks into a form item's contents using tangyFormItemEl.shadowRoot.querySelector(...) or this.$.content.querySelector(...) , you must change it. The contents of the form can now be accessed at tangyFormItemEl.querySelector(...) . Also, the content element is no longer available. For example: // replace var el = this.$.content.querySelector('tangy-input[name=\\'classId\\']') //with var el = this.querySelector('tangy-input[name=\\'classId\\']') The advantage of moving this content out of the shadow DOM is that you can now style it directly from your app.","title":"v3.5.0"},{"location":"whats-new/#v340","text":"New Features New groups now ordered by creation date : Creating new groups will now order them by the date the were created in the group list. #1584 Configurable Web App Device Orientation : You can now specify the Web App orientation (portrait, landscape, or any) on device using the T_ORIENTATION variable in config.sh . Add T_ORIENTATION=\"any\" to config.sh to have more flexible orientations for PWA's. The options for T_ORIENTATION are at https://developer.mozilla.org/en-US/docs/Web/Manifest/orientation Media Library and Image support for Forms : Each group now has a media library tab where they can uplaod images which can then be utilized when inserting the new \"Image\" item on forms. #1138 New ACASI widget : The ACASI widget is braodly based on the EFTouch widget, but focused on a more static presentation of images and sounds. #56 Configurable font size in grids : You may now configure the font size in tangy-timed and tangy-untimed grids using the Option Font Size input. In tangy-form, it is exposed as option-font-size. Example of generated code: <tangy-timed required columns=\"3\" duration=80 name=\"class1_term2\" option-font-size=\"5\"> Auto-stop for tangy-radio-buttons : Add support for autostop in tangy-radio-buttons #49 . In Editor, set the Threshold to the number of incorrect answers: screenshots . Autostop is implemented by using the hideInputsUponThreshhold helper, which takes a tangy-form-item element and compares the number of correct radio button answers to the value in its incorrect-threshold attribute. Example of generated code: <tangy-form-item id=\"item1\" incorrect-threshold=\"2\"> New \"correct\" attribute for radio button options : A new \"correct\" attribute has been added to tangy-list-item to store the correct value. There is a \"Correct\" checkbox next to each option. Example of generated code: <tangy-radio-buttons name=\"fruit_selection2\" label=\"What is your favorite fruit?\"> <option name=\"tangerine\">Tangerine</option> <option name=\"cherry\" correct>Cherry</option> </tangy-radio-buttons> Fixes Critical Sync and \"data loss\" fix : Some variants of v3.3.x saw cases where data seemed to be lost on the tablet and sync no longer worked. After this release is deployed to the server, release for your groups and instruct all tablets to upgrade. The upgrade process may take many minutes depending on the amount of data stored on the tablet due to a schema update in the database. For an in depth look at what this update does, see the code here . Logstash Improvements #1516 User profiles were in a nested object, now they have been merged to be flat in the logstash output doc. See example here . If a form response uses a location element, it will now be extracted out into a top level \"geoip\" property whose value is an object with \"lat\" and \"lon\" properties. See example here . When new forms are created in the editor, they will no longer have a . character in their ID. This was causing some uneccessary and confusing logic in logstash config files. See PR here . EFTouch : A large number of fixes have been made for EFTouch. See recent issues here . Updated to tangy-form-editor ^5.18.0 for Change grid variables in CSV starting with variable_0 to variable_1 . A previous update to tangy-form to 3.15.1, tangy-form-editor to 5.17.0 to fixed Editing form level HTML requires two Save clicks Beta Features Two-way Sync : Allows for two-way sync of form responses. Can be configured to two way sync form responses for specific forms and also by geographic region defined in the user profile. See docs/feature-two-way-sync.md . and Add a tangy input inside a tangy box duplicates items , and enable Adjustable letter size for grids Case Module Add the \"case\" module to T_MODULES in config.sh and the default landing page for a group will be the cases search page and new \"Case Management Editor\" tab will appear in groups for creating and editing Case Definitions. #1517 Clientside search of Forms for Case Management Groups allows Cases to be found using the device camera to scan a QR code. See docs/case-management-group.md . Add event time and scheduling to Case Mangement Groups #1518 New layout for Case and Case Event pages. Upgrade instructions Backup your data folder and then run the following commands. git fetch origin git checkout v3.4.0 ./start.sh","title":"v3.4.0"},{"location":"whats-new/#v331","text":"This release fixes a feature that made it into v3.3.0 but had a bug and was disabled. This release fixes that bug and makes it available. As an Editor user I want to be able to do an initial import of my location structure. #1117","title":"v3.3.1"},{"location":"whats-new/#v330","text":"Features Assessor reviews high level case variables, AKA \"Case Manifest\" #1399 Assessor changes language setting to Russian #1402 Untimed Grid subtest #1366 Editor Style Upgrades (April 2019) #1421 Group Names can now have spaces and special characters #1424 Editor configures Timed Grid to show or hide labels on buttons #1432 Server Admin tunes the reporting delay between when an upload occurs and it shows up in reporting outputs #1441 CSV output for single checkboxes now show up as \"0\" and \"1\" as opposed to \"\" and \"on\" #1367 CSV output for single radiobuttons now show up as \"0\" and \"1\" as opposed to \"null\" and \"on\" #1433 You can now limit who can add/see sitewide users to only the USER1 account by setting T_USER1_MANAGED_SERVER_USERS to \"true\" in config.sh #1381 . Client now has an \"About\" page with details about what Tangerine is #1465 . Upgrade instructions Backup your data folder and then run the following commands. git fetch origin git checkout v3.3.0 ./start.sh docker exec -it tangerine /tangerine/server/src/upgrade/v3.3.0.js","title":"v3.3.0"},{"location":"whats-new/#v320","text":"Developer Notes Ability to define database views on a per module basis in Client Angular #1419 Integrate test harness and TypeScript with server using NestJS #1413 Fix client tests, organize shared services and guards into the shared module, move client/app/ to client/ #1398 Upgrade instructions git fetch origin git checkout v3.2.0 ./start.sh docker exec tangerine /tangerine/upgrades/v3.2.0.js - In each group's app-config.json , change \"direction\" to \"languageDirection\" . - If using a translation other than English, change in each group's app-config.json , change \"languageCode\" to the corresponding language code. Current codes other than en for English is JO_ar for Jordanian and KH_km for Khmer.","title":"v3.2.0"},{"location":"whats-new/#v310","text":"Features Item Editor UX Improvements #810 Assessor verifies correct location selected by reviewing metadata of location #1191 As an assessor I'd like to include a hint option to be displayed below the question text #1279 Grids: helper functions for grids #1183 Ability to mark an entire row as incorrect on grids #1333 Assessor's backed up form responses are archived when storage is filling up #1304 Assessor scans a QR Code into form #1309 All hidden inputs have reporting values of \"999\" #1349 Merge reporting output of radiobuttons into one column. Fixes Editor not properly logging users out resulting in getting stuck every 24 hours #1314 Min and Max for input number cannot be saved through the interface #1297 time on grids cannot be changes and is always 60 seconds #1301 Unclosed tags in html container can break form #1289 Tangy timed option values disappear #1302 Note that #1349 will bve optional in future releases and you may not want to upgrade until that time. Upgrade instructions git fetch origin git checkout v3.1.0 ./start.sh docker exec tangerine reporting-cache-clear","title":"v3.1.0"},{"location":"whats-new/#v300-beta13","text":"Upgrade Instructions git fetch origin git checkout v3.0.0 # Note the new T_UPLOAD_TOKEN variable which is a replacement for the old upload account variables. mv config.sh config.sh_backup cp config.defaults.sh config.sh vim config.sh ./start.sh docker exec tangerine push-all-groups-views docker exec tangerine reporting-cache-clear For existing groups, you need to edit their app-config.json files in the ./data/client/content/groups folders. Replace them with the following template and make sure to update variables such as groupName , uploadToken , and serverUrl . { \"listUsernamesOnLoginScreen\" : true , \"modules\" : [ ], \"groupName\" : \"pineapple\" , \"securityQuestionText\" : \"What is your year of birth?\" , \"hideProfile\" : false , \"direction\" : \"ltr\" , \"columnsOnVisitsTab\" : [], \"hashSecurityQuestionResponse\" : false , \"uploadUnlockedFormReponses\" : false , \"uploadToken\" : \"change this to match T_UPLOAD_TOKEN in config.sh\" , \"securityPolicy\" : [ \"password\" ], \"homeUrl\" : \"case-management\" , \"serverUrl\" : \"https://f571f419.ngrok.io/\" , \"centrallyManagedUserProfile\" : false , \"registrationRequiresServerUser\" : false } New Features Server admin imports client archives into server #1166 After exporting data from clients, we now have an easy command line tool to import them. Place those exported files in ./data/archives folder and then run docker exec tangerine import-archives . Consumers of reporting API find user profile data appended to form responses #1147 New logstash module for installations that want to use logstash to migrate data to an Elastic Search instance. Enable by adding logstash to the list of modules in config.sh , then clear reporting caches docker exec -it tangerine bash; cd /tangerine/server/src/scripts; ./clear-all-reporting-cache.js; . You will find new <groupName>-logstash databases in CouchDB that you can configure logstash to consume. Upload Tokens instead of upload usernames and passwords. In your config.sh change T_UPLOAD_TOKEN to a secret phrase and then in existing groups add that to app-config.json as an \"uploadToken\" property and uploadUrl to serverUrl but without the username and password and upload/<groupName> . For example, \"uploadUrl\": \"http://uploader:password@foo.tangerinecentral.org/upload/foo\" would become \"serverUrl\":\"http://foo.tangerinecentral.org\", \"groupName\":\"foo\", \"uploadToken\":\"secret_foo_passphrase\" . If you not planning on updating clients right away, in config.sh set T_LEGACY=\"true\" to support the older upload API that those clients expect. When all clients are upgraded, set that variable back to false. Editor edits location list for group #982 @TODO Editor creates, edits, and deletes form responses on the server #1047 Editor exports CSV of a form for a month of their choosing #1143 Editor sees user profile form related columns joined to CSV of all forms #1142 On client, prevent users from editing their own profile. To impact new groups, change T_HIDE_PROFILE to \"true\" in config.sh . To modify existing groups, change \"hideProfile\" in group level app-config.json to true . Assessor registers on tablet, downloads form responses created on server #1129 On device registration, after user creates account, will force user to enter 6 character code that references online account. To impact new groups, change T_REGISTRATION_REQUIRES_SERVER_USER to \"true\" . To modify existing groups, change \"registrationRequiresServerUser\" in group level app-config.json to true . Editor updates client user profile on server, Assessor sees updated profile after next sync #1134 On client sync, will result in any changes made to a user profile on the server to be downloaded and reflected on the client. To impact new groups, change T_CENTRALLY_MANAGED_USER_PROFILE to \"true\" in config.sh . To modify existing groups, change \"centrallyManagedUserProfile\" in group level app-config.json to true . Editor views tangy-timed items_per_minute calculation in the CSV #1100 <tangy-location> can be filtered by entries in the profile by adding attribute <tangy-location filter-by-global> . In the editor when editing a <tangy-location> you will find a new option \"Filter by locations in the user profile?\" you can check. Advanced forms features (no GUI for these features) <tangy-input-group> can be used to create repeatable groups of inputs. See the demo here . Geofence for v3 #941 If you location list has latitude and longitude properties for each location, you can validate your <tangy-location> selection given a geofence in <tangy-gps> . See the screenshots here and a code example of how to build this in your form here . Upload incomplete form responses (important for Class module) To modify existing groups, set \"uploadUnlockedFormReponses\" to true in app-config.json . Server Admin clears reporting cache #1064 Server Admin runs script to update views in databases #962 Server Admin limits by site or by group the number of form responses uploaded end up in reporting outputs #1155 This feature brings two new settings to config.sh . Set T_PAID_MODE to \"site\" to limit on a sitewide level, use \"group\" to limit on a per group level. Set T_PAID_ALLOWANCE from \"umlimited\" to a specific number like \"1000\" to limit form responses that end up in reporting outputs to one thousand. This mechanism works by marking uploaded form responses as \"paid\". When you first upgrade to this release, none of your form responses will be marked as paid and will not end up in reporting outputs until they are marked as paid against the allowance. If you want to mark all current uploaded form responses as paid and only mark against their allowance for future uploads, set the allowance to unlimited and after the reporting caches have been built, set the allowance desired and run ./start.sh again. Optional Modules you can turn on and off in config.sh T_MODULES list. Note that if you are going to override the default T_MODULES list with an additional module such as class , don't forget to add modules such as csv if you still need them! Reporting outputs (inluding CSVs) include the information about the number of children a location has. #1174 Known issues Memory leak results in Error: spawn ENOMEM #886 On the server command line run crontab -e and then add the following entry to restart the program every 24 hours 0 0 * * * docker stop tangerine; docker start tangerine .","title":"v3.0.0-beta13"},{"location":"whats-new/#200-pre-release","text":"Features As a Tangerine Database admin, I want to control which users have the \"Manager\" role for creating new groups #218 As a Tangerine Editor User, I expect to see timestamps on CSVs down to the second #223 As a user, if I end up on a http:// URL I want to be redirected to the https:// version of that URL #98 Bugs New groups default Client tabs are set up for workflow, should be vanilla tangerine #230 When Tangerine is first installed, User1 does not have the required Manager role so groups cannot be created #229 School Location Subtest does not render after upgrading from Tangerine 0.4.x to v2.0.0 #189 If a group was upgraded from 0.x.x and does not have a media folder, APK generating fails #186 Deleting group does not set security correctly on resulting \"deleted\" database #227 Large CSVs fail to generate #221 When a new Workflow is created it is missing retrictToRole, reporting, and authenticityParameters #228 Ensure /var/log/couchdb exists so CouchDB does not crash #216 Technical Information Document how to use SSL with Tangerine #219 Things to add to .gitignore #185 Clean up build process so client does not need to compile twice #74 Upgrade Instructions This is the first release with upgrade scripts so you will need to run all upgrade scripts between the version you started at and this one. For example, if you are at Tangerine 0.4.6, then you must run... docker exec -it tangerine-container /tangerine-server/upgrades/v1.0.0.sh docker exec -it tangerine-container /tangerine-server/upgrades/v2.0.0.sh If you are at Tangerine 1.7.8, then you must run... docker exec -it tangerine-container /tangerine-server/upgrades/v2.0.0.sh","title":"2.0.0 (pre-release)"},{"location":"whats-new/#v220","text":"Information User Stories - As a Site Owner I want to know how many results have been uploaded given arbitrary time period #457 Technical - Refactor start.sh and config.defaults.sh to allow configurable ports and tag #456 Upgrade Instructions docker exec -it tangerine-container /tangerine-server/upgrades/v2.2.0.sh","title":"v2.2.0"},{"location":"artwork/icons/","text":"Icons for v3 \u00b6 Gimp source and examples of icons are in the icon-source directory adjacent to this file.","title":"Icons for v3"},{"location":"artwork/icons/#icons-for-v3","text":"Gimp source and examples of icons are in the icon-source directory adjacent to this file.","title":"Icons for v3"},{"location":"data-collector/","text":"Data Collector Guide \u00b6 Using P2P Sync for Offline Data Transfer More coming soon!","title":"Data Collector Guide"},{"location":"data-collector/#data-collector-guide","text":"Using P2P Sync for Offline Data Transfer More coming soon!","title":"Data Collector Guide"},{"location":"data-collector/data-collector-overview/","text":"Tangerine Data Collection \u00b6 Logging in Check for Tangerine Updates Deploying Tangerine for Offline Data Collection Data Collection Downloading your data Data Transmission Quality Management \u00b6 Forms Data Security Forms Review and Release Process General Data Quality Rules","title":"Tangerine Data Collection"},{"location":"data-collector/data-collector-overview/#tangerine-data-collection","text":"Logging in Check for Tangerine Updates Deploying Tangerine for Offline Data Collection Data Collection Downloading your data Data Transmission","title":"Tangerine Data Collection"},{"location":"data-collector/data-collector-overview/#quality-management","text":"Forms Data Security Forms Review and Release Process General Data Quality Rules","title":"Quality Management"},{"location":"developer/","text":"Developer Guide Contents \u00b6 i18n-translation.md modules.md Application design \u00b6 Bootstrapping Tangerine Viewing Forms and Form Data Supporting custom elements Tangerine Globals How Tangerine code is generated Debugging \u00b6 Creating Clean Development Content debugging-reporting.md debugging_node_apps.md Managing Deployments \u00b6 Upgrades Load Testing \u00b6 Load Testing Developing Cordova Plugins \u00b6 cordova-plugin-development.md Tangerine Class Projects \u00b6 class-docs.md class-deletions.md Troubleshooting \u00b6 Docker Network Issues","title":"Developer Guide Contents"},{"location":"developer/#developer-guide-contents","text":"i18n-translation.md modules.md","title":"Developer Guide Contents"},{"location":"developer/#application-design","text":"Bootstrapping Tangerine Viewing Forms and Form Data Supporting custom elements Tangerine Globals How Tangerine code is generated","title":"Application design"},{"location":"developer/#debugging","text":"Creating Clean Development Content debugging-reporting.md debugging_node_apps.md","title":"Debugging"},{"location":"developer/#managing-deployments","text":"Upgrades","title":"Managing Deployments"},{"location":"developer/#load-testing","text":"Load Testing","title":"Load Testing"},{"location":"developer/#developing-cordova-plugins","text":"cordova-plugin-development.md","title":"Developing Cordova Plugins"},{"location":"developer/#tangerine-class-projects","text":"class-docs.md class-deletions.md","title":"Tangerine Class Projects"},{"location":"developer/#troubleshooting","text":"Docker Network Issues","title":"Troubleshooting"},{"location":"developer/bootstrapping-tangerine/","text":"Bootstrapping Tangerine \u00b6 During a recent Angular 8 upgrade process, we had to change how Tangerine initializes. If Tangerine is running inside a Cordova app, it must wait until the 'deviceReady' event is emitted. Our earlier method of doing this in main.ts is no longer possible; therefore, we are intercepting the Service initialization process by using APP_INITIALIZER to pause the app while Cordova loads. Here is the relevant comit . For more information, view the Predefined tokens and multiple provider section in the Angular documentation.","title":"Bootstrapping Tangerine"},{"location":"developer/bootstrapping-tangerine/#bootstrapping-tangerine","text":"During a recent Angular 8 upgrade process, we had to change how Tangerine initializes. If Tangerine is running inside a Cordova app, it must wait until the 'deviceReady' event is emitted. Our earlier method of doing this in main.ts is no longer possible; therefore, we are intercepting the Service initialization process by using APP_INITIALIZER to pause the app while Cordova loads. Here is the relevant comit . For more information, view the Predefined tokens and multiple provider section in the Angular documentation.","title":"Bootstrapping Tangerine"},{"location":"developer/class-deletions/","text":"Deletions in Tangerine \u00b6 We're archiving records instead of deleting them in Tangerine by setting archive:true on the root of the doc and filtering queries by && !archive . For most queries, you simply must simply append && !archive to the query in order to ensure your views filter for the archive flag. Sample view that filters by archive: responsesByClassIdCurriculumId: { map: function (doc) { if (doc.hasOwnProperty('collection') && doc.collection === 'TangyFormResponse' && !doc.archive) { if (doc.hasOwnProperty('metadata') && doc.metadata.studentRegistrationDoc.classId) { // console.log(\"matching: \" + doc.metadata.studentRegistrationDoc.classId) emit([doc.metadata.studentRegistrationDoc.classId, doc.form.id], true); } } }.toString() }, Sample function to archive some records: async archiveStudent(column) { let studentId = column.id console.log(\"Archiving student:\" + studentId) let deleteConfirmed = confirm(_TRANSLATE(\"Delete this student?\")); if (deleteConfirmed) { try { let responses = await this.classViewService.getResponsesByStudentId(studentId) for (const response of responses as any[] ) { response.doc.archive = true; let lastModified = Date.now(); response.doc.lastModified = lastModified const archiveResult = await this.classViewService.saveResponse(response.doc) console.log(\"archiveResult: \" + archiveResult) } let result = await this.dashboardService.archiveStudentRegistration(studentId) console.log(\"result: \" + result) } catch (e) { console.log(\"Error deleting student: \" + e) return false; } } }","title":"Deletions in Tangerine"},{"location":"developer/class-deletions/#deletions-in-tangerine","text":"We're archiving records instead of deleting them in Tangerine by setting archive:true on the root of the doc and filtering queries by && !archive . For most queries, you simply must simply append && !archive to the query in order to ensure your views filter for the archive flag. Sample view that filters by archive: responsesByClassIdCurriculumId: { map: function (doc) { if (doc.hasOwnProperty('collection') && doc.collection === 'TangyFormResponse' && !doc.archive) { if (doc.hasOwnProperty('metadata') && doc.metadata.studentRegistrationDoc.classId) { // console.log(\"matching: \" + doc.metadata.studentRegistrationDoc.classId) emit([doc.metadata.studentRegistrationDoc.classId, doc.form.id], true); } } }.toString() }, Sample function to archive some records: async archiveStudent(column) { let studentId = column.id console.log(\"Archiving student:\" + studentId) let deleteConfirmed = confirm(_TRANSLATE(\"Delete this student?\")); if (deleteConfirmed) { try { let responses = await this.classViewService.getResponsesByStudentId(studentId) for (const response of responses as any[] ) { response.doc.archive = true; let lastModified = Date.now(); response.doc.lastModified = lastModified const archiveResult = await this.classViewService.saveResponse(response.doc) console.log(\"archiveResult: \" + archiveResult) } let result = await this.dashboardService.archiveStudentRegistration(studentId) console.log(\"result: \" + result) } catch (e) { console.log(\"Error deleting student: \" + e) return false; } } }","title":"Deletions in Tangerine"},{"location":"developer/class-docs/","text":"Getting Started \u00b6 How to get data out of a TangyFormResponse \u00b6 const studentRegistrationDoc = await dashboardService.getResponse(this.studentId); const srInputs = this.getInputValues(studentRegistrationDoc); getInputValues(doc) { let inputs = doc.items.reduce((acc, item) => [...acc, ...item.inputs], []) let obj = {} for (const el of inputs) { var attrs = inputs.attributes; for(let i = inputs.length - 1; i >= 0; i--) { obj[inputs[i].name] = inputs[i].value; } } console.log(\"obj: \" + JSON.stringify(obj)) return obj; }","title":"Getting Started"},{"location":"developer/class-docs/#getting-started","text":"","title":"Getting Started"},{"location":"developer/class-docs/#how-to-get-data-out-of-a-tangyformresponse","text":"const studentRegistrationDoc = await dashboardService.getResponse(this.studentId); const srInputs = this.getInputValues(studentRegistrationDoc); getInputValues(doc) { let inputs = doc.items.reduce((acc, item) => [...acc, ...item.inputs], []) let obj = {} for (const el of inputs) { var attrs = inputs.attributes; for(let i = inputs.length - 1; i >= 0; i--) { obj[inputs[i].name] = inputs[i].value; } } console.log(\"obj: \" + JSON.stringify(obj)) return obj; }","title":"How to get data out of a TangyFormResponse"},{"location":"developer/cordova-plugin-development/","text":"Cordova plugin development \u00b6 Getting started \u00b6 It is a lot easier to build a cordova plugin for Tangerine using a generic Cordova project instead of developing directly in Tangerine, because in Tangerine access to the actual client Cordova code is hidden away in /tangerine/client/builds/apk. So first use the cordova cli to generate a new project. Refreshing your new plugin in your Cordova project \u00b6 After making modifications to the plugin, rm and add the plugin and the cordova android platform before building. cordova plugin rm cordova - plugin - nearby - connections cordova platform rm android cordova platform add android @ 8 cordova plugin add .. / .. / Tangerine - Community / cordova - plugin - nearby - connections cordova build android Updating the cordova plugin inside Tangerine \u00b6 After your done the bulk of your Cordova development, you will need to modify the docker-tangerine-base-image to include the new plugin. After updating the base image, don't forget to update the Dockerfile. Sometimes you may need to view an update to the plugin but you don't want to go to the trouble of updating the base image. It is possible to work on the plugin code and then refresh the code in Tangerine. First you will need to share the source code with your docker instance Add the following to develop.sh: --volume $(pwd)/../cordova-plugin-nearby-connections:/tangerine/client/cordova-plugin-nearby-connections \\ Once your container has started, docker exec into it, and run the following: cd / tangerine / client / builds / apk cordova plugin rm cordova - plugin - nearby - connections cordova plugin add .. / .. / cordova - plugin - nearby - connections -- save Sometimes cordova can have issues with cleaning the build; here's a way to make sure you have the updated code: cd / tangerine / client / builds / apk cordova plugin rm cordova - plugin - nearby - connections cordova platform rm android cordova platform add android @ 8 cordova plugin add .. / .. / cordova - plugin - nearby - connections -- save cordova build android Updating Angular client code used in the APK \u00b6 IF you're developing Cordova plugins for Tangerine and make changes to the Angular client code that is displayed in the apk, you will need to refresh the apk build. Run the following code: cd / tangerine / client && \\ rm - rf builds / apk / www / shell && \\ rm - rf builds / pwa / release - uuid / app && \\ cp - r dev builds / apk / www / shell && \\ cp - r pwa - tools / updater - app / build / default builds / pwa && \\ cp - r dev builds / pwa / release - uuid / app Then generate the apk. To check if it worked, you can search for the new code in these files: vi builds / apk / www / shell / main . js vi builds / pwa / release - uuid / app / main . js T0 uninstall and re-install the apk: adb uninstall org . rti . tangerine adb install qa / apks / group - long - uuisd / platforms / android / app / build / outputs / apk / debug / app - debug . apk","title":"Cordova plugin development"},{"location":"developer/cordova-plugin-development/#cordova-plugin-development","text":"","title":"Cordova plugin development"},{"location":"developer/cordova-plugin-development/#getting-started","text":"It is a lot easier to build a cordova plugin for Tangerine using a generic Cordova project instead of developing directly in Tangerine, because in Tangerine access to the actual client Cordova code is hidden away in /tangerine/client/builds/apk. So first use the cordova cli to generate a new project.","title":"Getting started"},{"location":"developer/cordova-plugin-development/#refreshing-your-new-plugin-in-your-cordova-project","text":"After making modifications to the plugin, rm and add the plugin and the cordova android platform before building. cordova plugin rm cordova - plugin - nearby - connections cordova platform rm android cordova platform add android @ 8 cordova plugin add .. / .. / Tangerine - Community / cordova - plugin - nearby - connections cordova build android","title":"Refreshing your new plugin in your Cordova project"},{"location":"developer/cordova-plugin-development/#updating-the-cordova-plugin-inside-tangerine","text":"After your done the bulk of your Cordova development, you will need to modify the docker-tangerine-base-image to include the new plugin. After updating the base image, don't forget to update the Dockerfile. Sometimes you may need to view an update to the plugin but you don't want to go to the trouble of updating the base image. It is possible to work on the plugin code and then refresh the code in Tangerine. First you will need to share the source code with your docker instance Add the following to develop.sh: --volume $(pwd)/../cordova-plugin-nearby-connections:/tangerine/client/cordova-plugin-nearby-connections \\ Once your container has started, docker exec into it, and run the following: cd / tangerine / client / builds / apk cordova plugin rm cordova - plugin - nearby - connections cordova plugin add .. / .. / cordova - plugin - nearby - connections -- save Sometimes cordova can have issues with cleaning the build; here's a way to make sure you have the updated code: cd / tangerine / client / builds / apk cordova plugin rm cordova - plugin - nearby - connections cordova platform rm android cordova platform add android @ 8 cordova plugin add .. / .. / cordova - plugin - nearby - connections -- save cordova build android","title":"Updating the cordova plugin inside Tangerine"},{"location":"developer/cordova-plugin-development/#updating-angular-client-code-used-in-the-apk","text":"IF you're developing Cordova plugins for Tangerine and make changes to the Angular client code that is displayed in the apk, you will need to refresh the apk build. Run the following code: cd / tangerine / client && \\ rm - rf builds / apk / www / shell && \\ rm - rf builds / pwa / release - uuid / app && \\ cp - r dev builds / apk / www / shell && \\ cp - r pwa - tools / updater - app / build / default builds / pwa && \\ cp - r dev builds / pwa / release - uuid / app Then generate the apk. To check if it worked, you can search for the new code in these files: vi builds / apk / www / shell / main . js vi builds / pwa / release - uuid / app / main . js T0 uninstall and re-install the apk: adb uninstall org . rti . tangerine adb install qa / apks / group - long - uuisd / platforms / android / app / build / outputs / apk / debug / app - debug . apk","title":"Updating Angular client code used in the APK"},{"location":"developer/creating-clean-dev-content/","text":"Creating Clean Development Content \u00b6 If you are trying to fix an issue, it is helpful to begin development using content that is known to support common Tangerine features. This can be more reliable than using a project's content because that content may have missing forms that create bugs that have nothing to do with the issue you are trying to resolve. The create-group command to the rescue! The following command downloads a content set known to support common Tangerine features and is used for load-testing. Notice that it is a github repo; therefore, you may clone it and modify at will. docker exec tangerine create-group \"New Group C\" https://github.com/rjsteinert/tangerine-content-set-test.git There is also support for creating a group using local content from the content-sets directory' in the Tangerine repository. Currently, there is support for creating a case-module: docker exec tangerine create-group \"New Group D\" case-module You may also configure how inputs are populated by custom functions; see the Case generation section in the Load testing doc . If you add --help to the create-group command you may see other options as well. docker exec tangerine create-group --help To see more examples, check out the demo video from the v3.10.0 release.","title":"Creating clean dev content"},{"location":"developer/creating-clean-dev-content/#creating-clean-development-content","text":"If you are trying to fix an issue, it is helpful to begin development using content that is known to support common Tangerine features. This can be more reliable than using a project's content because that content may have missing forms that create bugs that have nothing to do with the issue you are trying to resolve. The create-group command to the rescue! The following command downloads a content set known to support common Tangerine features and is used for load-testing. Notice that it is a github repo; therefore, you may clone it and modify at will. docker exec tangerine create-group \"New Group C\" https://github.com/rjsteinert/tangerine-content-set-test.git There is also support for creating a group using local content from the content-sets directory' in the Tangerine repository. Currently, there is support for creating a case-module: docker exec tangerine create-group \"New Group D\" case-module You may also configure how inputs are populated by custom functions; see the Case generation section in the Load testing doc . If you add --help to the create-group command you may see other options as well. docker exec tangerine create-group --help To see more examples, check out the demo video from the v3.10.0 release.","title":"Creating Clean Development Content"},{"location":"developer/debugging-reporting/","text":"Debugging the Reporting Cache process \u00b6 Configure your project to use the CSV and Logstash modules: T_MODULES=\"['csv', 'logstash']\" Start the development environment... ./develop.sh Create a group called foo in the GUI. Then open ./server/src/app.service.ts and comment out the call to this.keepAliveReportingWorker() . \"exec\" into the container and note how foo has been added to the /reporting-worker-state.json file. docker exec -it tangerine bash cat /reporting-worker-state.json Seed the foo group with 100 form responses. docker exec tangerine generate-uploads 100 foo Clear the cache ```shell script docker exec tangerine reporting-cache-clear If you get the error message 'Waiting for current reporting worker to stop...', you must exec into the container and remove the semaphore: ```shell script rm /reporting-worker-running and then run reporting-cache-clear again. Start the reporting-worker-batch.js batch process manually and check for errors ```shell script /tangerine/server/src/scripts/reporting-worker-batch.js In Chrome, go to `chrome://inspect`, click `Configure...`, and add `127.0.0.1:9228` as an entry in \"Target discovery settings\". //@TODO OUTDATED but still relevant Now manually trigger a batch. After the command finishes, verify the batch by checking `http://localhost:5984/_utils/#database/foo-reporting/_all_docs`. node --inspect-brk=0.0.0.0:9228 $(which reporting-worker-batch) There will be only 15 docs in your reporting db because that is the batch size. Although Tangerine in develop.sh mode runs node in a debugger process, you must launch a separate node process to debug the batch reporting worker. If no errors occurred, copy the temporary state to the current state. cp /reporting-worker-state.json_tmp /reporting-worker-state.json Keep repeating to continue processing... cat /reporting-worker-state.json | /tangerine/serversrc/scripts/reporting-worker-batch.js | tee /reporting-worker-state.json_tmp cp /reporting-worker-state.json_tmp /reporting-worker-state.json If you would like to debug, add the `--inspect-brk=0.0.0.0:9227` option to the `run-worker.js` command. cat /reporting-worker-state.json | node --inspect-brk=0.0.0.0:9227 /tangerine/server/src/scripts/reporting-worker-batch.js | tee /reporting-worker-state.json_tmp When you run that command, it will wait on the first line of the script for a debugger to connect to it. In Chrome, go to `chrome://inspect`, click `Configure...`, and add `127.0.0.1:9227` as an entry in \"Target discovery settings\". Now back to the `chrome://inspect` page and you will find under the `Remote Target #127.0.0.1` group, a new target has been discovered called `/tangerine/server/reporting/run-worker.js`. Click `inspect` and now you should be able to set breakpoints and walk through the code. You may not be able to set breakpoints in all files so use \"step into\" and the `debugger` keyword to get the debugger to the focus you want. If you want to keep the cache worker running, use watch. watch -n 1 \"cat /reporting-worker-state.json | node /tangerine/server/reporting/run-worker.js | tee /.reporting-worker-state.json | json_pp && cp /.reporting-worker-state.json /reporting-worker-state.json\" If you need to clear a reporting cache, don't simply delete the reporting db. Use reporting-cache-clear You typically need to remove the semaphore before running reporting-cache-clear, especially if there was a crash rm /reporting-worker-running ## A typical report debugging workflow: Remember to setup config.sh properly! (Make sure T_MODULES=\"['csv','logstash']\") Comment out keepAliveReportingWorker in /server/src/app.service.ts. Remember to add `127.0.0.1:9228` as an entry in \"Target discovery settings\" in chrome://inspect/#devices You may need to add `debugger` before the line of code you wish to debug. docker exec into your container docker exec -it tangerine bash Then you'll typically need to rm the reporting-worker-running - it keeps reporting-cache-clear from running if a previous debug session crashed. rm /reporting-worker-running reporting-cache-clear node --inspect-brk=0.0.0.0:9228 $(which reporting-worker-batch) Switch back to Chrome, open `chrome://inspect`. The debugger will be the session that looks like this: Target /usr/local/bin/reporting-worker-batch file:///tangerine/server/src/scripts/reporting-worker-batch.js Inspect ``` When it launches, it will wait on the first line of the script for a debugger to connect to it. Click F8 to run. If all is right and good in this world, it will stop at your debugger statement. When the batch has completed, your debugger window will close.","title":"Debugging reporting"},{"location":"developer/debugging-reporting/#debugging-the-reporting-cache-process","text":"Configure your project to use the CSV and Logstash modules: T_MODULES=\"['csv', 'logstash']\" Start the development environment... ./develop.sh Create a group called foo in the GUI. Then open ./server/src/app.service.ts and comment out the call to this.keepAliveReportingWorker() . \"exec\" into the container and note how foo has been added to the /reporting-worker-state.json file. docker exec -it tangerine bash cat /reporting-worker-state.json Seed the foo group with 100 form responses. docker exec tangerine generate-uploads 100 foo Clear the cache ```shell script docker exec tangerine reporting-cache-clear If you get the error message 'Waiting for current reporting worker to stop...', you must exec into the container and remove the semaphore: ```shell script rm /reporting-worker-running and then run reporting-cache-clear again. Start the reporting-worker-batch.js batch process manually and check for errors ```shell script /tangerine/server/src/scripts/reporting-worker-batch.js In Chrome, go to `chrome://inspect`, click `Configure...`, and add `127.0.0.1:9228` as an entry in \"Target discovery settings\". //@TODO OUTDATED but still relevant Now manually trigger a batch. After the command finishes, verify the batch by checking `http://localhost:5984/_utils/#database/foo-reporting/_all_docs`. node --inspect-brk=0.0.0.0:9228 $(which reporting-worker-batch) There will be only 15 docs in your reporting db because that is the batch size. Although Tangerine in develop.sh mode runs node in a debugger process, you must launch a separate node process to debug the batch reporting worker. If no errors occurred, copy the temporary state to the current state. cp /reporting-worker-state.json_tmp /reporting-worker-state.json Keep repeating to continue processing... cat /reporting-worker-state.json | /tangerine/serversrc/scripts/reporting-worker-batch.js | tee /reporting-worker-state.json_tmp cp /reporting-worker-state.json_tmp /reporting-worker-state.json If you would like to debug, add the `--inspect-brk=0.0.0.0:9227` option to the `run-worker.js` command. cat /reporting-worker-state.json | node --inspect-brk=0.0.0.0:9227 /tangerine/server/src/scripts/reporting-worker-batch.js | tee /reporting-worker-state.json_tmp When you run that command, it will wait on the first line of the script for a debugger to connect to it. In Chrome, go to `chrome://inspect`, click `Configure...`, and add `127.0.0.1:9227` as an entry in \"Target discovery settings\". Now back to the `chrome://inspect` page and you will find under the `Remote Target #127.0.0.1` group, a new target has been discovered called `/tangerine/server/reporting/run-worker.js`. Click `inspect` and now you should be able to set breakpoints and walk through the code. You may not be able to set breakpoints in all files so use \"step into\" and the `debugger` keyword to get the debugger to the focus you want. If you want to keep the cache worker running, use watch. watch -n 1 \"cat /reporting-worker-state.json | node /tangerine/server/reporting/run-worker.js | tee /.reporting-worker-state.json | json_pp && cp /.reporting-worker-state.json /reporting-worker-state.json\" If you need to clear a reporting cache, don't simply delete the reporting db. Use reporting-cache-clear You typically need to remove the semaphore before running reporting-cache-clear, especially if there was a crash rm /reporting-worker-running ## A typical report debugging workflow: Remember to setup config.sh properly! (Make sure T_MODULES=\"['csv','logstash']\") Comment out keepAliveReportingWorker in /server/src/app.service.ts. Remember to add `127.0.0.1:9228` as an entry in \"Target discovery settings\" in chrome://inspect/#devices You may need to add `debugger` before the line of code you wish to debug. docker exec into your container docker exec -it tangerine bash Then you'll typically need to rm the reporting-worker-running - it keeps reporting-cache-clear from running if a previous debug session crashed. rm /reporting-worker-running reporting-cache-clear node --inspect-brk=0.0.0.0:9228 $(which reporting-worker-batch) Switch back to Chrome, open `chrome://inspect`. The debugger will be the session that looks like this: Target /usr/local/bin/reporting-worker-batch file:///tangerine/server/src/scripts/reporting-worker-batch.js Inspect ``` When it launches, it will wait on the first line of the script for a debugger to connect to it. Click F8 to run. If all is right and good in this world, it will stop at your debugger statement. When the batch has completed, your debugger window will close.","title":"Debugging the Reporting Cache process"},{"location":"developer/debugging_node_apps/","text":"In develop.sh, the port 9229 should be opend. docker run \\ -d \\ --name tangerine-container \\ -p 80:80 -p 5984:5984 -p 9229:9229 \\ --env \"DEBUG=1\" \\ --env \"NODE_ENV=development\" \\ etc... Add the folloiwng to your node process: --inspect=[::]:9229 index.js for example, reporting/shart.sh: nodemon --inspect=[::]:9229 index.js using the leh* db for testing workflow csv generation http://localhost/app/group-leh_wi_lan_pilot_2018/index.html#assessments","title":"Debugging node apps"},{"location":"developer/docker-network-issues/","text":"Docker Network Issues \u00b6 Overview \u00b6 If you develop behind a corporate firewall, you may run into issues when building Tangerine from the Dockerfile relating to network access to file resources. Why would this happen? - Your corporate network may use the same ports as the virtual private network that docker creates. - Your local DNS may may configured to use an internal corporate DNS which causes resolution problems when offline. If you experience these problems, add the following switches to your docker config file: \"default-address-pools\" : [ { \"base\" : \"172.80.0.0/16\" , \"size\" : 24 }, { \"base\" : \"172.90.0.0/16\" , \"size\" : 24 } ] , \"dns\" : [ \"75.75.75.75\" , \"8.8.8.8\" ] Background \u00b6 Networking \u00b6 Error: bower polymer#^2.0.0 ECMDERR Failed to execute \"git ls-remote --tags --heads https://github.com/Polymer/polymer.git\", exit code of #128 fatal: unable to access 'https://github.com/Polymer/polymer.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated. Additional error details: fatal: unable to access 'https://github.com/Polymer/polymer.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated. Quoting correspondence with a colleague: \"Docker creates bridge networks on the set of ranges 172.[17-31].0.0/16 (and some others) by default. If a server had a Docker network on 172.19.0.0/16, it could receive traffic from the VPN, but it would send its response to the bridge network, where it wouldn\u2019t go anywhere.\" Fortunately, we can change the default address pools for Docker networks by changing the configuration for the Docker daemon: https://github.com/moby/moby/pull/36396 I\u2019m setting ours to the default address example in that pull request:\" \"default-address-pools\" : [ { \"base\" : \"172.80.0.0/16\" , \"size\" : 24 }, { \"base\" : \"172.90.0.0/16\" , \"size\" : 24 } ] DNS \u00b6 Error: request to https://registry.npmjs.org/@vaadin/vaadin-usage-statistics/-/vaadin-usage-statistics-2.1.0.tgz failed, reason: getaddrinfo EAI_AGAIN registry.npmjs.org registry.npmjs.org:443 I think this is where I found this solution: https://github.com/npm/npm/issues/16661 So, I needed to configure the docker DNS config. The first item is my local ISP (Comcast_ DNS server, the second is Google\u2019s.) \"dns\": [ \"75.75.75.75\", \"8.8.8.8\" ] Change them to your needs. Anyway, the good news is that with both the default-address-pools and dns properties in my docker config, my build works both connected and disconnected to the RTI VPN.","title":"Docker Network Issues"},{"location":"developer/docker-network-issues/#docker-network-issues","text":"","title":"Docker Network Issues"},{"location":"developer/docker-network-issues/#overview","text":"If you develop behind a corporate firewall, you may run into issues when building Tangerine from the Dockerfile relating to network access to file resources. Why would this happen? - Your corporate network may use the same ports as the virtual private network that docker creates. - Your local DNS may may configured to use an internal corporate DNS which causes resolution problems when offline. If you experience these problems, add the following switches to your docker config file: \"default-address-pools\" : [ { \"base\" : \"172.80.0.0/16\" , \"size\" : 24 }, { \"base\" : \"172.90.0.0/16\" , \"size\" : 24 } ] , \"dns\" : [ \"75.75.75.75\" , \"8.8.8.8\" ]","title":"Overview"},{"location":"developer/docker-network-issues/#background","text":"","title":"Background"},{"location":"developer/docker-network-issues/#networking","text":"Error: bower polymer#^2.0.0 ECMDERR Failed to execute \"git ls-remote --tags --heads https://github.com/Polymer/polymer.git\", exit code of #128 fatal: unable to access 'https://github.com/Polymer/polymer.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated. Additional error details: fatal: unable to access 'https://github.com/Polymer/polymer.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated. Quoting correspondence with a colleague: \"Docker creates bridge networks on the set of ranges 172.[17-31].0.0/16 (and some others) by default. If a server had a Docker network on 172.19.0.0/16, it could receive traffic from the VPN, but it would send its response to the bridge network, where it wouldn\u2019t go anywhere.\" Fortunately, we can change the default address pools for Docker networks by changing the configuration for the Docker daemon: https://github.com/moby/moby/pull/36396 I\u2019m setting ours to the default address example in that pull request:\" \"default-address-pools\" : [ { \"base\" : \"172.80.0.0/16\" , \"size\" : 24 }, { \"base\" : \"172.90.0.0/16\" , \"size\" : 24 } ]","title":"Networking"},{"location":"developer/docker-network-issues/#dns","text":"Error: request to https://registry.npmjs.org/@vaadin/vaadin-usage-statistics/-/vaadin-usage-statistics-2.1.0.tgz failed, reason: getaddrinfo EAI_AGAIN registry.npmjs.org registry.npmjs.org:443 I think this is where I found this solution: https://github.com/npm/npm/issues/16661 So, I needed to configure the docker DNS config. The first item is my local ISP (Comcast_ DNS server, the second is Google\u2019s.) \"dns\": [ \"75.75.75.75\", \"8.8.8.8\" ] Change them to your needs. Anyway, the good news is that with both the default-address-pools and dns properties in my docker config, my build works both connected and disconnected to the RTI VPN.","title":"DNS"},{"location":"developer/how-tangerine-is-built/","text":"How Tangerine code is generated \u00b6 When the develop.sh script is run, the Dockerfile builds tangerine into dist/tangerine-client and copies the built code into builds/apk/www/shell and builds/pwa/release-uuid/app. When Dockerfile is complete, it runs entrypoint-development.sh and watches for changes, sending its output to the dev directory: ./node_modules/.bin/ng build --watch --poll 100 --base-href ./ --output-path ./dev & If you need to make an apk using the updated code, run the following script: cd / tangerine / client && \\ rm - rf builds / apk / www / shell && \\ rm - rf builds / pwa / release - uuid / app && \\ cp - r dev builds / apk / www / shell && \\ cp - r pwa - tools / updater - app / build / default builds / pwa && \\ cp - r dev builds / pwa / release - uuid / app","title":"How Tangerine code is generated"},{"location":"developer/how-tangerine-is-built/#how-tangerine-code-is-generated","text":"When the develop.sh script is run, the Dockerfile builds tangerine into dist/tangerine-client and copies the built code into builds/apk/www/shell and builds/pwa/release-uuid/app. When Dockerfile is complete, it runs entrypoint-development.sh and watches for changes, sending its output to the dev directory: ./node_modules/.bin/ng build --watch --poll 100 --base-href ./ --output-path ./dev & If you need to make an apk using the updated code, run the following script: cd / tangerine / client && \\ rm - rf builds / apk / www / shell && \\ rm - rf builds / pwa / release - uuid / app && \\ cp - r dev builds / apk / www / shell && \\ cp - r pwa - tools / updater - app / build / default builds / pwa && \\ cp - r dev builds / pwa / release - uuid / app","title":"How Tangerine code is generated"},{"location":"developer/i18n-translation/","text":"i18n/Translation \u00b6 In Tangerine there are two kinds of translations, content translations and application translations. Content translations are embedded in form content by Editor Users using <t-lang> tags, while application translations are embedded in application level code using the t function in Web Components, _TRANSLATE function in an Angular TS file, or translate pipe in Angular component templates. Content Translations \u00b6 Translations for specific languages are embedded in content, thus portable and specific to that content. The <t-lang> component ( https://github.com/ICTatRTI/translation-web-component ) is used to detect the language assigned to the HTML doc. In the following example, the label on the hello input will be \"Hello\" if English is set as the language, \"Bonjour\" if French is selected as the language. <tangy-input name=\"hello\" label=\" <t-lang en>Hello</t-lang> <t-lang fr>Bonjour</t-lang> \" > </tangy-input> Application Translations \u00b6 In application code, instead of placing inline translations, a centrally managed JSON file is sourced for replacing strings. At ./client/default-assets/translation.fr.json you will find the JSON file use for translations when the French language is selected. { \"Accuracy\": \"Pr\u00e9cision\", \"Accuracy Level\": \"Niveau de pr\u00e9cision\", \"Add New User\": \"Ajouter un nouvel utilisateur\", \"Add User to Group\": \"Ajouter un utilisateur \u00e0 un groupe\", ... } You'll also find the Russian translation at ./client/default-assets/translation.ru.json . { \"Accuracy\": \"\u0410\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u044c\", \"Accuracy Level\": \"\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u0438\", \"Add New User\": \"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", \"Add User to Group\": \"Add User to Group\", ... } And many more. Each file defines an object where the keys are what to replace in the application and the values are what to replace strings with for that language. Depending on where in the application the string is, there are different techniques for exposing a string to translation. In Web Components libraries such as <tangy-form> and <tangy-form-editor> , they use a special t function. Translating strings in template literals looks like... this.shadowRoot.innerHTML = ` <h1> ${t('Hello')} </h1> ... ` Often times Polymer templates are used which won't let you embed functions. In that case, in connectedCallback a this.t object is assembled and then used in the Polymer template. connectedCallback() { super.connectedCallback() this.t = { hello: t(\"Hello\") } } template() { return html` [[t.hello]] ` } In Angular Components, the translate pipe is available in templates and _TRANSLATE function for translating in TS files outside of templates. <h1> {{'Hello'|translate}} </h1> const helloString = _TRANSLATE('Hello') Other notes \u00b6 Mat-pagination needs a special service to enable use of translation.json - see class/_services/mat-pagination-intl.service.ts Right to left languages (RTL) \u00b6 Mat-menu does not support RTL out of the box, but it's simple to get it working: add dir=\"rtl\" to its enclosing element. <span dir=\"rtl\">&nbsp;&nbsp;&nbsp; <button mat-button [matMenuTriggerFor]=\"reportsMenu\" class=\"mat-button\">{{'Select Report'|translate}}</button> <mat-menu #reportsMenu=\"matMenu\"> <button mat-menu-item [matMenuTriggerFor]=\"groupingMenu\">Class grouping</button> </mat-menu> <mat-menu #groupingMenu=\"matMenu\"> <button mat-menu-item *ngFor=\"let item of formList\" routerLink=\"/reports/{{item.id}}/{{item.classId}}\">{{item.title}}</button> </mat-menu> </span> mat-table also needs some twekas to work - Css: .mat-column-Name { padding-right:5px; } th.mat-header-cell { text-align: right; }","title":"i18n/Translation"},{"location":"developer/i18n-translation/#i18ntranslation","text":"In Tangerine there are two kinds of translations, content translations and application translations. Content translations are embedded in form content by Editor Users using <t-lang> tags, while application translations are embedded in application level code using the t function in Web Components, _TRANSLATE function in an Angular TS file, or translate pipe in Angular component templates.","title":"i18n/Translation"},{"location":"developer/i18n-translation/#content-translations","text":"Translations for specific languages are embedded in content, thus portable and specific to that content. The <t-lang> component ( https://github.com/ICTatRTI/translation-web-component ) is used to detect the language assigned to the HTML doc. In the following example, the label on the hello input will be \"Hello\" if English is set as the language, \"Bonjour\" if French is selected as the language. <tangy-input name=\"hello\" label=\" <t-lang en>Hello</t-lang> <t-lang fr>Bonjour</t-lang> \" > </tangy-input>","title":"Content Translations"},{"location":"developer/i18n-translation/#application-translations","text":"In application code, instead of placing inline translations, a centrally managed JSON file is sourced for replacing strings. At ./client/default-assets/translation.fr.json you will find the JSON file use for translations when the French language is selected. { \"Accuracy\": \"Pr\u00e9cision\", \"Accuracy Level\": \"Niveau de pr\u00e9cision\", \"Add New User\": \"Ajouter un nouvel utilisateur\", \"Add User to Group\": \"Ajouter un utilisateur \u00e0 un groupe\", ... } You'll also find the Russian translation at ./client/default-assets/translation.ru.json . { \"Accuracy\": \"\u0410\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u044c\", \"Accuracy Level\": \"\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u0438\", \"Add New User\": \"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", \"Add User to Group\": \"Add User to Group\", ... } And many more. Each file defines an object where the keys are what to replace in the application and the values are what to replace strings with for that language. Depending on where in the application the string is, there are different techniques for exposing a string to translation. In Web Components libraries such as <tangy-form> and <tangy-form-editor> , they use a special t function. Translating strings in template literals looks like... this.shadowRoot.innerHTML = ` <h1> ${t('Hello')} </h1> ... ` Often times Polymer templates are used which won't let you embed functions. In that case, in connectedCallback a this.t object is assembled and then used in the Polymer template. connectedCallback() { super.connectedCallback() this.t = { hello: t(\"Hello\") } } template() { return html` [[t.hello]] ` } In Angular Components, the translate pipe is available in templates and _TRANSLATE function for translating in TS files outside of templates. <h1> {{'Hello'|translate}} </h1> const helloString = _TRANSLATE('Hello')","title":"Application Translations"},{"location":"developer/i18n-translation/#other-notes","text":"Mat-pagination needs a special service to enable use of translation.json - see class/_services/mat-pagination-intl.service.ts","title":"Other notes"},{"location":"developer/i18n-translation/#right-to-left-languages-rtl","text":"Mat-menu does not support RTL out of the box, but it's simple to get it working: add dir=\"rtl\" to its enclosing element. <span dir=\"rtl\">&nbsp;&nbsp;&nbsp; <button mat-button [matMenuTriggerFor]=\"reportsMenu\" class=\"mat-button\">{{'Select Report'|translate}}</button> <mat-menu #reportsMenu=\"matMenu\"> <button mat-menu-item [matMenuTriggerFor]=\"groupingMenu\">Class grouping</button> </mat-menu> <mat-menu #groupingMenu=\"matMenu\"> <button mat-menu-item *ngFor=\"let item of formList\" routerLink=\"/reports/{{item.id}}/{{item.classId}}\">{{item.title}}</button> </mat-menu> </span> mat-table also needs some twekas to work - Css: .mat-column-Name { padding-right:5px; } th.mat-header-cell { text-align: right; }","title":"Right to left languages (RTL)"},{"location":"developer/load-testing/","text":"Load testing \u00b6 Client-side testing \u00b6 Generate a PWA. Go to any case record and enter the following in the js console: this . caseService . generateCases ( 1 ) You may change the number of cases generated. It uses the current case as a template for the generated cases. TODO: Use the case-export.json in the group. You can check how many docs are in the db with: this . userService . getSharedDBDocCount () Select \"Sync Online\" to test syncing a large recordset. Server-side generation \u00b6 One may populate a vanilla Tangerine instance with records using the cli: docker exec tangerine generate-uploads 500 group-uuid 2000 100 That command generates 500 sets (each of which has 2 records) in batches of 100, posted every 2000 ms. Each doc are generated from templates in server/src/scripts/generate-uploads. Add the 'class' switch to the end of that command will generate a studentRegistrationDoc in addition to the other 2 docs. (Read server/src/scripts/generate-uploads/bin.js for more details.) You may need to modify the templates to suit the docs you wish to generate. Case generation \u00b6 You may create a group for testing using the create-group command. See the creating clean dev conntent doc for more information. There is a case-module option that creates generic case forms. You may also use your own custom group forms. Case generation uses a case-export.json file placed in the group directory as the template for record generation. To create this json file, generate a PWA and create a new case. While viewing the case, open the javascript console and use the copy(await this.caseService.export()) command to copy the json. Then paste this data into a case-export.json file. Please note that some groups, such as those created by the case-module mentioned earlier, already have a case-export.json file; however, you may be testing for different scenarios so feel free to create your own. Create or modify the custom-generators.js file if you have different variable substitutions. This file exports: - customGenerators: An object that has custom functions you may define - customSubstitutions: An array of substitutions. Here is an example of substitutions: const substitutions = [ { \"type\" : \"caseDoc\" }, { \"type\" : \"demoDoc\" , \"formId\" : \"registration-role-1\" , \"substitutions\" : { \"first_name\" : { \"functionName\" : \"firstname\" , \"runOnce\" : \"perCase\" }, \"last_name\" : { \"functionName\" : \"surname\" , \"runOnce\" : \"perCase\" }, \"consent\" : { \"functionName\" : \"yes_no\" , \"runOnce\" : false } } } ] In this example, there are two files that can have variable substitution: - caseDoc - This is the case manifest, which has the doc.type === 'case'. No substitutions are listed for this doc. - demoDoc - This is the demographics form that corresponds to the formId, which is \"registration-role-1\" in the example. Since the current case-module example does not have any substitutions happening in the caseDoc inputs, there are no entries for substitutions in it. The demoDoc does have substitutions. The substitutions are key/value pairs. The substitutions key is the variable name of the input you wish to substitute, and the substitutions value is an object that may declare several properties: - functionName: how the function is called - runOnce: if the function is executed when the script is initialized per case, or when each doc is generated. the pre-built randomised field you wish to substitute. In this example, first_name is being populated by the firstname function, which is run when each case is generated. Case generation also performs other types of randomization. Here are some examples: - firstname: Randomises a female first name - surname: Randomizes a last name - tangerineModifiedOn: Today's date, offet by the running tally of docs being generated. The time is similarly offset. - day: day part of tangerineModifiedOn, padded with 0 if needed. - month: month part of tangerineModifiedOn, padded with 0 if needed. - year: year part of tangerineModifiedOn. - date: year + '-' + month + '-' + day; - participant_id: Random number under 1000000. - participantUuid: A UUID. Before generating cases, create a device registration in order to properly generate a location property in the generated docs. When setting location, case generation uses the first doc in the group's devices database. If you don't have one, sync won't work properly. Case generation will fail if there are no device registrations. To generate cases, use the following docker command: docker exec tangerine generate-cases 1 group-uuid This would generate one case. Change the number to generate more. Clean things up \u00b6 To delete all generated records (but keep the views), use bulkdelete .","title":"Load testing"},{"location":"developer/load-testing/#load-testing","text":"","title":"Load testing"},{"location":"developer/load-testing/#client-side-testing","text":"Generate a PWA. Go to any case record and enter the following in the js console: this . caseService . generateCases ( 1 ) You may change the number of cases generated. It uses the current case as a template for the generated cases. TODO: Use the case-export.json in the group. You can check how many docs are in the db with: this . userService . getSharedDBDocCount () Select \"Sync Online\" to test syncing a large recordset.","title":"Client-side testing"},{"location":"developer/load-testing/#server-side-generation","text":"One may populate a vanilla Tangerine instance with records using the cli: docker exec tangerine generate-uploads 500 group-uuid 2000 100 That command generates 500 sets (each of which has 2 records) in batches of 100, posted every 2000 ms. Each doc are generated from templates in server/src/scripts/generate-uploads. Add the 'class' switch to the end of that command will generate a studentRegistrationDoc in addition to the other 2 docs. (Read server/src/scripts/generate-uploads/bin.js for more details.) You may need to modify the templates to suit the docs you wish to generate.","title":"Server-side generation"},{"location":"developer/load-testing/#case-generation","text":"You may create a group for testing using the create-group command. See the creating clean dev conntent doc for more information. There is a case-module option that creates generic case forms. You may also use your own custom group forms. Case generation uses a case-export.json file placed in the group directory as the template for record generation. To create this json file, generate a PWA and create a new case. While viewing the case, open the javascript console and use the copy(await this.caseService.export()) command to copy the json. Then paste this data into a case-export.json file. Please note that some groups, such as those created by the case-module mentioned earlier, already have a case-export.json file; however, you may be testing for different scenarios so feel free to create your own. Create or modify the custom-generators.js file if you have different variable substitutions. This file exports: - customGenerators: An object that has custom functions you may define - customSubstitutions: An array of substitutions. Here is an example of substitutions: const substitutions = [ { \"type\" : \"caseDoc\" }, { \"type\" : \"demoDoc\" , \"formId\" : \"registration-role-1\" , \"substitutions\" : { \"first_name\" : { \"functionName\" : \"firstname\" , \"runOnce\" : \"perCase\" }, \"last_name\" : { \"functionName\" : \"surname\" , \"runOnce\" : \"perCase\" }, \"consent\" : { \"functionName\" : \"yes_no\" , \"runOnce\" : false } } } ] In this example, there are two files that can have variable substitution: - caseDoc - This is the case manifest, which has the doc.type === 'case'. No substitutions are listed for this doc. - demoDoc - This is the demographics form that corresponds to the formId, which is \"registration-role-1\" in the example. Since the current case-module example does not have any substitutions happening in the caseDoc inputs, there are no entries for substitutions in it. The demoDoc does have substitutions. The substitutions are key/value pairs. The substitutions key is the variable name of the input you wish to substitute, and the substitutions value is an object that may declare several properties: - functionName: how the function is called - runOnce: if the function is executed when the script is initialized per case, or when each doc is generated. the pre-built randomised field you wish to substitute. In this example, first_name is being populated by the firstname function, which is run when each case is generated. Case generation also performs other types of randomization. Here are some examples: - firstname: Randomises a female first name - surname: Randomizes a last name - tangerineModifiedOn: Today's date, offet by the running tally of docs being generated. The time is similarly offset. - day: day part of tangerineModifiedOn, padded with 0 if needed. - month: month part of tangerineModifiedOn, padded with 0 if needed. - year: year part of tangerineModifiedOn. - date: year + '-' + month + '-' + day; - participant_id: Random number under 1000000. - participantUuid: A UUID. Before generating cases, create a device registration in order to properly generate a location property in the generated docs. When setting location, case generation uses the first doc in the group's devices database. If you don't have one, sync won't work properly. Case generation will fail if there are no device registrations. To generate cases, use the following docker command: docker exec tangerine generate-cases 1 group-uuid This would generate one case. Change the number to generate more.","title":"Case generation"},{"location":"developer/load-testing/#clean-things-up","text":"To delete all generated records (but keep the views), use bulkdelete .","title":"Clean things up"},{"location":"developer/modules/","text":"Tangy Modules \u00b6 Modules provide additional features to Tangerine, such as: - automatically add forms to the client when a new group is created (via groupNew hook) - data transformation for reporting (via flatFormResponse hook) Modules: - Class Steps to add a module - Create an index.js file inside server/src/modules/moduleName using the sample below as a guide. - Implement any relevant hooks. See the examples for flatFormResponse and groupNew, below. - Forms that need to be copied over to the client should be placed in server/src/modules/moduleName. Sample module index.js \u00b6 ``` const clog = require('tangy-log').clog const fs = require('fs-extra') module.exports = { hooks: { flatFormResponse: function(data) { return new Promise((resolve, reject) => { debugger; let formResponse = data.formResponse let flatFormResponse = data.flatFormResponse if (formResponse.metadata && formResponse.metadata.studentRegistrationDoc && formResponse.metadata.studentRegistrationDoc.classId) { let studentRegistrationDoc = formResponse.metadata.studentRegistrationDoc flatFormResponse[ sr_classId ] = studentRegistrationDoc.classId; flatFormResponse[ sr_student_name ] = studentRegistrationDoc.student_name; flatFormResponse[ sr_student_id ] = studentRegistrationDoc.id; flatFormResponse[ sr_age ] = studentRegistrationDoc.age; flatFormResponse[ sr_gender ] = studentRegistrationDoc.gender; } resolve({flatFormResponse, formResponse}) }) }, groupNew: function(data) { return new Promise(async (resolve, reject) => { const {groupName, appConfig} = data clog(\"Setting homeUrl to dashboard and uploadUnlockedFormReponses to true.\") appConfig.homeUrl = \"dashboard\" appConfig.uploadUnlockedFormReponses = true // copy the class forms try { await fs.copy('/tangerine/server/src/modules/class/', /tangerine/client/content/groups/${groupName} ) clog(\"Copied class module forms.\") } catch (err) { console.error(err) } resolve(data) }) }, } } ``` This code will be automatically run when the TangyModules (server/src/modules/index.js) is run","title":"Tangy Modules"},{"location":"developer/modules/#tangy-modules","text":"Modules provide additional features to Tangerine, such as: - automatically add forms to the client when a new group is created (via groupNew hook) - data transformation for reporting (via flatFormResponse hook) Modules: - Class Steps to add a module - Create an index.js file inside server/src/modules/moduleName using the sample below as a guide. - Implement any relevant hooks. See the examples for flatFormResponse and groupNew, below. - Forms that need to be copied over to the client should be placed in server/src/modules/moduleName.","title":"Tangy Modules"},{"location":"developer/modules/#sample-module-indexjs","text":"``` const clog = require('tangy-log').clog const fs = require('fs-extra') module.exports = { hooks: { flatFormResponse: function(data) { return new Promise((resolve, reject) => { debugger; let formResponse = data.formResponse let flatFormResponse = data.flatFormResponse if (formResponse.metadata && formResponse.metadata.studentRegistrationDoc && formResponse.metadata.studentRegistrationDoc.classId) { let studentRegistrationDoc = formResponse.metadata.studentRegistrationDoc flatFormResponse[ sr_classId ] = studentRegistrationDoc.classId; flatFormResponse[ sr_student_name ] = studentRegistrationDoc.student_name; flatFormResponse[ sr_student_id ] = studentRegistrationDoc.id; flatFormResponse[ sr_age ] = studentRegistrationDoc.age; flatFormResponse[ sr_gender ] = studentRegistrationDoc.gender; } resolve({flatFormResponse, formResponse}) }) }, groupNew: function(data) { return new Promise(async (resolve, reject) => { const {groupName, appConfig} = data clog(\"Setting homeUrl to dashboard and uploadUnlockedFormReponses to true.\") appConfig.homeUrl = \"dashboard\" appConfig.uploadUnlockedFormReponses = true // copy the class forms try { await fs.copy('/tangerine/server/src/modules/class/', /tangerine/client/content/groups/${groupName} ) clog(\"Copied class module forms.\") } catch (err) { console.error(err) } resolve(data) }) }, } } ``` This code will be automatically run when the TangyModules (server/src/modules/index.js) is run","title":"Sample module index.js"},{"location":"developer/supporting-custom-elements/","text":"Supporting custom elements and external libs \u00b6 Adding new elements \u00b6 To add a new custom element or to add support for new polymer or other web components, you must make them accessible to Angular: - add to package.json - import into polyfills You also need to add CUSTOM_ELEMENTS_SCHEMA to your module to support custom tags in your templates: schemas : [ CUSTOM_ELEMENTS_SCHEMA ], Manual imports \u00b6 Some libs need to be imported manually because they are not available as ES6 modules. Add the lib using a script tag - < script src = \"./libs/plotly-latest.min.js\" ></ script > and then add to angular.json: \"assets\" : [ \"src/libs/plotly-latest.min.js\" ] Resolving incompatibilities \u00b6 The \"skipLibCheck\": true switch in tscondig.json will causes type checking of declaration files (files with extension .d.ts) to be skipped. ( Stack Overflow discussion ) If you run into an error such as ERROR in node_modules/tangy-form/tangy-form-response-model.d.ts:18:17 - error TS1039: Initializers are not allowed in ambient contexts. this switch may be useful to getting the app to compile. We decided to not use it - simply removing it worked fine - but if it's a choice between the app compiling or not, it's worth using.","title":"Supporting custom elements and external libs"},{"location":"developer/supporting-custom-elements/#supporting-custom-elements-and-external-libs","text":"","title":"Supporting custom elements and external libs"},{"location":"developer/supporting-custom-elements/#adding-new-elements","text":"To add a new custom element or to add support for new polymer or other web components, you must make them accessible to Angular: - add to package.json - import into polyfills You also need to add CUSTOM_ELEMENTS_SCHEMA to your module to support custom tags in your templates: schemas : [ CUSTOM_ELEMENTS_SCHEMA ],","title":"Adding new elements"},{"location":"developer/supporting-custom-elements/#manual-imports","text":"Some libs need to be imported manually because they are not available as ES6 modules. Add the lib using a script tag - < script src = \"./libs/plotly-latest.min.js\" ></ script > and then add to angular.json: \"assets\" : [ \"src/libs/plotly-latest.min.js\" ]","title":"Manual imports"},{"location":"developer/supporting-custom-elements/#resolving-incompatibilities","text":"The \"skipLibCheck\": true switch in tscondig.json will causes type checking of declaration files (files with extension .d.ts) to be skipped. ( Stack Overflow discussion ) If you run into an error such as ERROR in node_modules/tangy-form/tangy-form-response-model.d.ts:18:17 - error TS1039: Initializers are not allowed in ambient contexts. this switch may be useful to getting the app to compile. We decided to not use it - simply removing it worked fine - but if it's a choice between the app compiling or not, it's worth using.","title":"Resolving incompatibilities"},{"location":"developer/tangerine-globals/","text":"Globals in Tangerine \u00b6 Globals in memory \u00b6 In-memory globals won't survive refreshing the browser. We are caching important configuration files (app-config.json, forms.json, location-list.json) to avoid having to keep fetching those docs from the db. Use the following code to take advantage of this caching: - await this.appConfigService.getLocationList(); - await this.tangyFormsInfoService.getFormsInfo(); - await this.appConfigService.getAppConfig; - await this.tangyFormService.getFormMarkup(this.eventFormDefinition.formId); CaseDefinitionsService also has implements of caseDefinitions, but that is not exposed publicly. More info in this PR: https://github.com/Tangerine-Community/Tangerine/pull/1991 Globals that are stored in a database \u00b6 Database variables will persist after page refreshes or app reboots. Use VariableService. Stores data in 'tangerine-variables' pouchdb as a key/value pair. The key is the _id in the doc. The value can be a string, JSON object, or any other data type that can be persisted in a pouchdb. await this . variableService . set ( 'tangerine-device-is-registered' , true ) await this . variableService . get ( 'tangerine-device-is-registered' ) Widely-used Configuration Variables \u00b6 Server \u00b6 They are not globals, but they are mighty useful. The TangerineConfigService provides variables set in config.sh. Expose it in your constructor: private readonly configService : TangerineConfigService , And then you may use it: const userOneUsername = this . configService . config (). userOneUsername Client \u00b6 Use await this.appConfigService.getAppConfig; to fetch app-config.json settings in client.","title":"Globals in Tangerine"},{"location":"developer/tangerine-globals/#globals-in-tangerine","text":"","title":"Globals in Tangerine"},{"location":"developer/tangerine-globals/#globals-in-memory","text":"In-memory globals won't survive refreshing the browser. We are caching important configuration files (app-config.json, forms.json, location-list.json) to avoid having to keep fetching those docs from the db. Use the following code to take advantage of this caching: - await this.appConfigService.getLocationList(); - await this.tangyFormsInfoService.getFormsInfo(); - await this.appConfigService.getAppConfig; - await this.tangyFormService.getFormMarkup(this.eventFormDefinition.formId); CaseDefinitionsService also has implements of caseDefinitions, but that is not exposed publicly. More info in this PR: https://github.com/Tangerine-Community/Tangerine/pull/1991","title":"Globals in memory"},{"location":"developer/tangerine-globals/#globals-that-are-stored-in-a-database","text":"Database variables will persist after page refreshes or app reboots. Use VariableService. Stores data in 'tangerine-variables' pouchdb as a key/value pair. The key is the _id in the doc. The value can be a string, JSON object, or any other data type that can be persisted in a pouchdb. await this . variableService . set ( 'tangerine-device-is-registered' , true ) await this . variableService . get ( 'tangerine-device-is-registered' )","title":"Globals that are stored in a database"},{"location":"developer/tangerine-globals/#widely-used-configuration-variables","text":"","title":"Widely-used Configuration Variables"},{"location":"developer/tangerine-globals/#server","text":"They are not globals, but they are mighty useful. The TangerineConfigService provides variables set in config.sh. Expose it in your constructor: private readonly configService : TangerineConfigService , And then you may use it: const userOneUsername = this . configService . config (). userOneUsername","title":"Server"},{"location":"developer/tangerine-globals/#client","text":"Use await this.appConfigService.getAppConfig; to fetch app-config.json settings in client.","title":"Client"},{"location":"developer/upgrades/","text":"Upgrades \u00b6 There are two ways to apply upgrades to Tangerine configuration or databases that cannot be automatically upgraded: - via a shell script, runnable via docker exec -it tangerine /tangerine/server/src/upgrade/v3.9.0.js - adding to the updates.ts array. This will run automatically when the client app starts if a new version was deployed. Update tips \u00b6 Be aware that sync-protocol 2 uses a shared database; therefore, you don't want to do the same update whenever a different user logs in. The requiresViewsRefresh property will update All Default User Docs, which may place too much load on the tablet when it re-indexes those views. The following code checks for that scenario and show how to update a single view: { requiresViewsUpdate: false, script: async (userDb, appConfig, userService: UserService) => { // syncProtocol uses a single shared db for all users. Update only once. if (appConfig.syncProtocol === '2' && localStorage.getItem('ran-update-v3.9.0')) return console.log('Updating to v3.9.0...') await userDb.put(TangyFormsDocs[0]) await userDb.query('responsesUnLockedAndNotUploaded') localStorage.setItem('ran-update-v3.9.0', 'true') }","title":"Upgrades"},{"location":"developer/upgrades/#upgrades","text":"There are two ways to apply upgrades to Tangerine configuration or databases that cannot be automatically upgraded: - via a shell script, runnable via docker exec -it tangerine /tangerine/server/src/upgrade/v3.9.0.js - adding to the updates.ts array. This will run automatically when the client app starts if a new version was deployed.","title":"Upgrades"},{"location":"developer/upgrades/#update-tips","text":"Be aware that sync-protocol 2 uses a shared database; therefore, you don't want to do the same update whenever a different user logs in. The requiresViewsRefresh property will update All Default User Docs, which may place too much load on the tablet when it re-indexes those views. The following code checks for that scenario and show how to update a single view: { requiresViewsUpdate: false, script: async (userDb, appConfig, userService: UserService) => { // syncProtocol uses a single shared db for all users. Update only once. if (appConfig.syncProtocol === '2' && localStorage.getItem('ran-update-v3.9.0')) return console.log('Updating to v3.9.0...') await userDb.put(TangyFormsDocs[0]) await userDb.query('responsesUnLockedAndNotUploaded') localStorage.setItem('ran-update-v3.9.0', 'true') }","title":"Update tips"},{"location":"developer/viewing-forms-and-data/","text":"Viewing Forms and Form Data \u00b6 Use TangyFormService to retrieve form definitions and response data: this . formResponse = await this . tangyFormService . getResponse ( this . eventForm . formResponseId ) const tangyFormMarkup = await this . tangyFormService . getFormMarkup ( this . eventFormDefinition . formId ) But there are other ways of getting data out of Tangerine. First you need to see where you are getting data from. Mapping of components to forms \u00b6 EventFormListItemComponent - listing of forms in an event CaseEventListItemComponent - listing of events (such as Followup ANC Visits) in a case. Helper functions already in components \u00b6 In the component for a list, helper functions may already expose the properties you need to populate a template. In EventFormListItemComponent, notice the variable exposed: const response = await this . formService . getResponse ( this . eventForm . formResponseId ) const getValue = ( variableName ) => { // more code inside getValue(); }, {}) // snip const caseInstance = this . case const caseDefinition = this . caseDefinition const caseEventDefinition = this . caseEventDefinition const caseEvent = this . caseEvent const eventForm = this . eventForm const eventFormDefinition = this . eventFormDefinition const formatDate = ( unixTimeInMilliseconds , format ) => moment ( new Date ( unixTimeInMilliseconds )). format ( format ) const TRANSLATE = _TRANSLATE eval ( `this.renderedTemplateListItemIcon = this.caseDefinition.templateEventFormListItemIcon ? \\` ${ this . caseDefinition . templateEventFormListItemIcon } \\` : \\` ${ this . defaultTemplateListItemIcon } \\`` ) eval ( `this.renderedTemplateListItemPrimary = this.caseDefinition.templateEventFormListItemPrimary ? \\` ${ this . caseDefinition . templateEventFormListItemPrimary } \\` : \\` ${ this . defaultTemplateListItemPrimary } \\`` ) eval ( `this.renderedTemplateListItemSecondary = this.caseDefinition.templateEventFormListItemSecondary ? \\` ${ this . caseDefinition . v } \\` : \\` ${ this . defaultTemplateListItemSecondary } \\`` ) If there is not a response for a form, response will be false; therefore, if you do a getValue() in your template, be sure to test if response is true. If you wish to display the startDatetime in your template, note that is is part of the response object - it is returned as response.startDatetime. In other cases - for values inside the form - use getValue(variableName) - but test if response is true first! Also, remember that the variableName is one of the id's in the inputs array, which is inside each item in the items array. Testing your templates \u00b6 Here's an easy way to test your template code: in the js console, use the copy() function to copy the value for your template: copy ( this . caseDefinition . templateEventFormListItemSecondary ) Then add the fields or functions you need. In this case, I'm adding a getValue: `<t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: ${ ! eventForm . complete ? '<t-lang en>Incomplete</t-lang><t-lang fr>Incompl\u00e8te</t-lang>' : '<t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang>' } ${ response ? `Version: ${ getValue ( \"content_release_version\" ) } ` : '' } ` Output: \"<t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: <t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang> Start date: 3/13/2020, 11:25:19 AM\" Note that I was testing for existence of response, and also nesting templates to show the \"Version\" text if there was a value for content_release_version. Another example: <t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: ${!eventForm.complete ? '<t-lang en>Incomplete</t-lang><t-lang fr>Incompl\u00e8te</t-lang>' : '<t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang>'} ${response ? Start date: ${response.startDatetime} : ''} debugging templates \u00b6 To make the dev tool stop on a breakpoint in a Case Definition's template, add the following debugger statement to the content of the template. $ {(()=>{ debugger })()} When that template loads, the Chrome devtools will pause and you can inspect local variables/functions available and try running them in the console. Note that different templates will have different helper functions and variables available.","title":"Viewing Forms and Form Data"},{"location":"developer/viewing-forms-and-data/#viewing-forms-and-form-data","text":"Use TangyFormService to retrieve form definitions and response data: this . formResponse = await this . tangyFormService . getResponse ( this . eventForm . formResponseId ) const tangyFormMarkup = await this . tangyFormService . getFormMarkup ( this . eventFormDefinition . formId ) But there are other ways of getting data out of Tangerine. First you need to see where you are getting data from.","title":"Viewing Forms and Form Data"},{"location":"developer/viewing-forms-and-data/#mapping-of-components-to-forms","text":"EventFormListItemComponent - listing of forms in an event CaseEventListItemComponent - listing of events (such as Followup ANC Visits) in a case.","title":"Mapping of components to forms"},{"location":"developer/viewing-forms-and-data/#helper-functions-already-in-components","text":"In the component for a list, helper functions may already expose the properties you need to populate a template. In EventFormListItemComponent, notice the variable exposed: const response = await this . formService . getResponse ( this . eventForm . formResponseId ) const getValue = ( variableName ) => { // more code inside getValue(); }, {}) // snip const caseInstance = this . case const caseDefinition = this . caseDefinition const caseEventDefinition = this . caseEventDefinition const caseEvent = this . caseEvent const eventForm = this . eventForm const eventFormDefinition = this . eventFormDefinition const formatDate = ( unixTimeInMilliseconds , format ) => moment ( new Date ( unixTimeInMilliseconds )). format ( format ) const TRANSLATE = _TRANSLATE eval ( `this.renderedTemplateListItemIcon = this.caseDefinition.templateEventFormListItemIcon ? \\` ${ this . caseDefinition . templateEventFormListItemIcon } \\` : \\` ${ this . defaultTemplateListItemIcon } \\`` ) eval ( `this.renderedTemplateListItemPrimary = this.caseDefinition.templateEventFormListItemPrimary ? \\` ${ this . caseDefinition . templateEventFormListItemPrimary } \\` : \\` ${ this . defaultTemplateListItemPrimary } \\`` ) eval ( `this.renderedTemplateListItemSecondary = this.caseDefinition.templateEventFormListItemSecondary ? \\` ${ this . caseDefinition . v } \\` : \\` ${ this . defaultTemplateListItemSecondary } \\`` ) If there is not a response for a form, response will be false; therefore, if you do a getValue() in your template, be sure to test if response is true. If you wish to display the startDatetime in your template, note that is is part of the response object - it is returned as response.startDatetime. In other cases - for values inside the form - use getValue(variableName) - but test if response is true first! Also, remember that the variableName is one of the id's in the inputs array, which is inside each item in the items array.","title":"Helper functions already in components"},{"location":"developer/viewing-forms-and-data/#testing-your-templates","text":"Here's an easy way to test your template code: in the js console, use the copy() function to copy the value for your template: copy ( this . caseDefinition . templateEventFormListItemSecondary ) Then add the fields or functions you need. In this case, I'm adding a getValue: `<t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: ${ ! eventForm . complete ? '<t-lang en>Incomplete</t-lang><t-lang fr>Incompl\u00e8te</t-lang>' : '<t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang>' } ${ response ? `Version: ${ getValue ( \"content_release_version\" ) } ` : '' } ` Output: \"<t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: <t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang> Start date: 3/13/2020, 11:25:19 AM\" Note that I was testing for existence of response, and also nesting templates to show the \"Version\" text if there was a value for content_release_version. Another example: <t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: ${!eventForm.complete ? '<t-lang en>Incomplete</t-lang><t-lang fr>Incompl\u00e8te</t-lang>' : '<t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang>'} ${response ? Start date: ${response.startDatetime} : ''}","title":"Testing your templates"},{"location":"developer/viewing-forms-and-data/#debugging-templates","text":"To make the dev tool stop on a breakpoint in a Case Definition's template, add the following debugger statement to the content of the template. $ {(()=>{ debugger })()} When that template loads, the Chrome devtools will pause and you can inspect local variables/functions available and try running them in the console. Note that different templates will have different helper functions and variables available.","title":"debugging templates"},{"location":"editor/","text":"Editor Quick Links \u00b6 Form Development Guides \u00b6 Tangerine Form Developer's Cookbook Local Content Development with Tangerine Preview Configuration Guide The Tangerine Preview tool for advanced users writing forms in HTML and using Git for version control Case Module \u00b6 Case Management Data Model Case Module Cookbook Configuring Case functionality Custom Case Reports","title":"Editor Quick Links"},{"location":"editor/#editor-quick-links","text":"","title":"Editor Quick Links"},{"location":"editor/#form-development-guides","text":"Tangerine Form Developer's Cookbook Local Content Development with Tangerine Preview Configuration Guide The Tangerine Preview tool for advanced users writing forms in HTML and using Git for version control","title":"Form Development Guides"},{"location":"editor/#case-module","text":"Case Management Data Model Case Module Cookbook Configuring Case functionality Custom Case Reports","title":"Case Module"},{"location":"editor/tangerine-preview-tool/","text":"Tangerine Preview \u00b6 Tangerine Preview is a command line tool for previewing the Tangerine content you are working on your local computer. It work on Windows, Mac, and Linux. If you are on macOS, check out this video that demonstrates how to install and use the Tangerine Preview tool. Install \u00b6 Before you install tangerine-preview , make sure to install node.js . If you are on macOS, you will need to set permissions to allow for global installs by running the following command. sudo chown -R `whoami` /usr/local/lib/node_modules For all platforms, open a command line terminal and run Tangerine Preview install command. npm install -g tangerine-preview Preview your content \u00b6 Open a command prompt, change directory to your content that you would like to preview, then run the tangerine-preview command. cd your-project tangerine-preview Lastly, open Google Chrome to http://localhost:3000 As you make content changes, they will be synced to the app. Reload your web browser and you'll see the changes. Update tangerine-preview \u00b6 When new releases come out for tangerine, tangerine-preview will also be updated. To update, open a command prompt and run the install command again. npm install -g tangerine-preview","title":"Tangerine preview tool"},{"location":"editor/tangerine-preview-tool/#tangerine-preview","text":"Tangerine Preview is a command line tool for previewing the Tangerine content you are working on your local computer. It work on Windows, Mac, and Linux. If you are on macOS, check out this video that demonstrates how to install and use the Tangerine Preview tool.","title":"Tangerine Preview"},{"location":"editor/tangerine-preview-tool/#install","text":"Before you install tangerine-preview , make sure to install node.js . If you are on macOS, you will need to set permissions to allow for global installs by running the following command. sudo chown -R `whoami` /usr/local/lib/node_modules For all platforms, open a command line terminal and run Tangerine Preview install command. npm install -g tangerine-preview","title":"Install"},{"location":"editor/tangerine-preview-tool/#preview-your-content","text":"Open a command prompt, change directory to your content that you would like to preview, then run the tangerine-preview command. cd your-project tangerine-preview Lastly, open Google Chrome to http://localhost:3000 As you make content changes, they will be synced to the app. Reload your web browser and you'll see the changes.","title":"Preview your content"},{"location":"editor/tangerine-preview-tool/#update-tangerine-preview","text":"When new releases come out for tangerine, tangerine-preview will also be updated. To update, open a command prompt and run the install command again. npm install -g tangerine-preview","title":"Update tangerine-preview"},{"location":"editor/Getting%20Started%20-%20Editor/add-sections/","text":"Adding Sections to a Form \u00b6 To add a new section to your instrument, hit \"ADD SECTION\". The interface allows a drag-and-drop feature which enables reordering of the sections already created. The order in which the sections are listed, is the same as the sequence of screens that will be shown on the tablet when the tablet user is filling in the form. Section Editor \u00b6 Upon adding a new section, or selecting to \"EDIT\" your instrument section, you will see the section editor screen below. If this is a new section, you might give it a new name from the section header. Click the pen icon on the right of the blue bar and overwrite the \"title\". Or any other of the configuration options. Then hit SUBMIT to save your edits. Section Options \u00b6 Each one of the sections has some options that you can control: Show this section in the summary at the end -- mark only if this section is the last one, and if you have coded some summary/feedback otherwise leave unchecked. Hide the back button -- checking this option will remove the Back button from the section when rendered on the tablet. Hide the next button -- hides the Next button on a section. Sometimes advancing the page may depend on the selection of an item, just like it is on some EF inputs. Generally, you keep this unchecked. right-to-left orientation -- switches the position of the Back and Next buttons for RTL languages. Hide navigation labels -- Hides the label from the Back and Next buttons so that it becomes an arrow. Hide navigation icons -- Hides the arrow from the back and Next buttons. If both this and the above are checked you will only see an orange button without labels and text. Threshold: Number of incorrect answers before disabling remaining questions -- This option is used in conjunction with radio button questions only. Set it to the number of consecutive incorrect replies before the test is discontinued. You must mark an option in the radio button group as Correct for this to work. Only one correct option per question can be defined. To add an item to your instrument section, click This opens the item type selection interface. These elements are subdivided into groups of item types (e.g., inputs, location, lists, misc): Inputs \u00b6 INPUT-DATE: This item type renders a calendar widget on the tablet INPUT-TEXT: This item type is a standard numbers and letters field INPUT-TIME: This item type displays a clock hour selection on the tablet INPUT-NUMBER: This item type opens up the number keyboard on the tablet and doesn't allow any other non-number characters to be inserted here Location \u00b6 GPS: This item type automatically collects GPS coordinates of the tablet LOCATION: The location item type requires a list of locations, e.g. school names by district and region to be imported to the Tangerine editor. Check out the location list section Lists \u00b6 CHECKBOX: This item type allows for multiple answers to be selected from a list of options CHECKBOX GROUP: Allows for multiple answer options to be selected from a group of options DROPDOWN (select): This item type allows for a single answer selection for longer lists RADIO BUTTONS: This item type only allows for a single answer selection from a list of answer options Miscellaneous \u00b6 IMAGE: the image items allows you to select an image already uploaded by the media library and present it to the user on a particular section SIGNATURE: this input type allows you to capture a signature by the assessor. HTML CONTENT CONTAINER: This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. QR CODE SCANNER: This item allows scanning of a QR and Data Matrix codes. Tangerine will capture and save the target info (e.g. URL). EF TOUCH: This item type is to assess children's executive functions, including working memory, inhibitory control, and cognitive flexibility (requires RTI manual support to upload your images and sounds). TIMED GRID: This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. UNTIMED GRID: This item type facilitates assessment approaches that are not timed, but require many items, e.g. oral counting, untimed reading comprehension tasks, etc. CONSENT: This item is a special function for participant consent. If the participants responds that no consent is given, the form will be closed and data saved accordingly. Depending on the element chosen, an interface for providing more detail on the item being rendered/created is presented in the Item Editor.","title":"Adding Sections to a Form"},{"location":"editor/Getting%20Started%20-%20Editor/add-sections/#adding-sections-to-a-form","text":"To add a new section to your instrument, hit \"ADD SECTION\". The interface allows a drag-and-drop feature which enables reordering of the sections already created. The order in which the sections are listed, is the same as the sequence of screens that will be shown on the tablet when the tablet user is filling in the form.","title":"Adding Sections to a Form"},{"location":"editor/Getting%20Started%20-%20Editor/add-sections/#section-editor","text":"Upon adding a new section, or selecting to \"EDIT\" your instrument section, you will see the section editor screen below. If this is a new section, you might give it a new name from the section header. Click the pen icon on the right of the blue bar and overwrite the \"title\". Or any other of the configuration options. Then hit SUBMIT to save your edits.","title":"Section Editor"},{"location":"editor/Getting%20Started%20-%20Editor/add-sections/#section-options","text":"Each one of the sections has some options that you can control: Show this section in the summary at the end -- mark only if this section is the last one, and if you have coded some summary/feedback otherwise leave unchecked. Hide the back button -- checking this option will remove the Back button from the section when rendered on the tablet. Hide the next button -- hides the Next button on a section. Sometimes advancing the page may depend on the selection of an item, just like it is on some EF inputs. Generally, you keep this unchecked. right-to-left orientation -- switches the position of the Back and Next buttons for RTL languages. Hide navigation labels -- Hides the label from the Back and Next buttons so that it becomes an arrow. Hide navigation icons -- Hides the arrow from the back and Next buttons. If both this and the above are checked you will only see an orange button without labels and text. Threshold: Number of incorrect answers before disabling remaining questions -- This option is used in conjunction with radio button questions only. Set it to the number of consecutive incorrect replies before the test is discontinued. You must mark an option in the radio button group as Correct for this to work. Only one correct option per question can be defined. To add an item to your instrument section, click This opens the item type selection interface. These elements are subdivided into groups of item types (e.g., inputs, location, lists, misc):","title":"Section Options"},{"location":"editor/Getting%20Started%20-%20Editor/add-sections/#inputs","text":"INPUT-DATE: This item type renders a calendar widget on the tablet INPUT-TEXT: This item type is a standard numbers and letters field INPUT-TIME: This item type displays a clock hour selection on the tablet INPUT-NUMBER: This item type opens up the number keyboard on the tablet and doesn't allow any other non-number characters to be inserted here","title":"Inputs"},{"location":"editor/Getting%20Started%20-%20Editor/add-sections/#location","text":"GPS: This item type automatically collects GPS coordinates of the tablet LOCATION: The location item type requires a list of locations, e.g. school names by district and region to be imported to the Tangerine editor. Check out the location list section","title":"Location"},{"location":"editor/Getting%20Started%20-%20Editor/add-sections/#lists","text":"CHECKBOX: This item type allows for multiple answers to be selected from a list of options CHECKBOX GROUP: Allows for multiple answer options to be selected from a group of options DROPDOWN (select): This item type allows for a single answer selection for longer lists RADIO BUTTONS: This item type only allows for a single answer selection from a list of answer options","title":"Lists"},{"location":"editor/Getting%20Started%20-%20Editor/add-sections/#miscellaneous","text":"IMAGE: the image items allows you to select an image already uploaded by the media library and present it to the user on a particular section SIGNATURE: this input type allows you to capture a signature by the assessor. HTML CONTENT CONTAINER: This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. QR CODE SCANNER: This item allows scanning of a QR and Data Matrix codes. Tangerine will capture and save the target info (e.g. URL). EF TOUCH: This item type is to assess children's executive functions, including working memory, inhibitory control, and cognitive flexibility (requires RTI manual support to upload your images and sounds). TIMED GRID: This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. UNTIMED GRID: This item type facilitates assessment approaches that are not timed, but require many items, e.g. oral counting, untimed reading comprehension tasks, etc. CONSENT: This item is a special function for participant consent. If the participants responds that no consent is given, the form will be closed and data saved accordingly. Depending on the element chosen, an interface for providing more detail on the item being rendered/created is presented in the Item Editor.","title":"Miscellaneous"},{"location":"editor/Getting%20Started%20-%20Editor/create-new-form/","text":"Creating a New Instrument/Form \u00b6 Prerequisite: Existing group or create a new Group \u00b6 After creating a group or opening an existing one, you will be presented with various options. The first action that you may wish to take is to create a new Form From the main menu options, select Author and then click Forms. This will bring up a listing of all forms for this group. You will notice that there is also a User Profile form. This form represents the profile each user has to fill in on the tablet, after they create their user login details. All information that you require in the user profile is attached to each record in the CSV export file. The user profile represents your assessor's information. Click the plus icon to create a new form. A new form with a default name is created and a default section is placed into this form. To change the form's name, type in the new text and click Save. Form Actions \u00b6 Beside each of the forms you will see some action available. From here you can Edit, Print, Copy, Delete, or Archive a form. We recommend that you archive your forms instead of removing them. This will ensure that you can export the data of a form that is no longer in use. Click on the pen icon to modify the form. Each form contains a number of sections that represent your form's pages Click on the print icon to open a new printable menu where you can select two of the print details. This printable view we often use to quality assure (QA) the instrument or to get a list of variables and their definition. You can also use the print screen to save paper copy of your form. Click on the copy icon to create a copy of the current instrument. You can copy an instrument to a different group or to the current one. Click on the trash icon to delete this form. Click on the archive icon to archive an assessment. All archived forms are moved to the bottom of the page If a form is archived, click the un-archive button to activate a form. Only active forms are displayed in tablet listing of forms to the assessor.","title":"Creating a New Instrument/Form"},{"location":"editor/Getting%20Started%20-%20Editor/create-new-form/#creating-a-new-instrumentform","text":"","title":"Creating a New Instrument/Form"},{"location":"editor/Getting%20Started%20-%20Editor/create-new-form/#prerequisite-existing-group-or-create-a-new-group","text":"After creating a group or opening an existing one, you will be presented with various options. The first action that you may wish to take is to create a new Form From the main menu options, select Author and then click Forms. This will bring up a listing of all forms for this group. You will notice that there is also a User Profile form. This form represents the profile each user has to fill in on the tablet, after they create their user login details. All information that you require in the user profile is attached to each record in the CSV export file. The user profile represents your assessor's information. Click the plus icon to create a new form. A new form with a default name is created and a default section is placed into this form. To change the form's name, type in the new text and click Save.","title":"Prerequisite: Existing group or create a new Group"},{"location":"editor/Getting%20Started%20-%20Editor/create-new-form/#form-actions","text":"Beside each of the forms you will see some action available. From here you can Edit, Print, Copy, Delete, or Archive a form. We recommend that you archive your forms instead of removing them. This will ensure that you can export the data of a form that is no longer in use. Click on the pen icon to modify the form. Each form contains a number of sections that represent your form's pages Click on the print icon to open a new printable menu where you can select two of the print details. This printable view we often use to quality assure (QA) the instrument or to get a list of variables and their definition. You can also use the print screen to save paper copy of your form. Click on the copy icon to create a copy of the current instrument. You can copy an instrument to a different group or to the current one. Click on the trash icon to delete this form. Click on the archive icon to archive an assessment. All archived forms are moved to the bottom of the page If a form is archived, click the un-archive button to activate a form. Only active forms are displayed in tablet listing of forms to the assessor.","title":"Form Actions"},{"location":"editor/Getting%20Started%20-%20Editor/create-new-group/","text":"Creating a New Group \u00b6 Upon logging into your Tangerine instance, you will see a screen listing your Tangerine groups. You might think of groups as discrete data collection efforts that might contain several instruments or forms. If you have, e.g., a baseline data collection and an endline data collection for the same project, you might make these two different groups. When packaging your instruments into the apk (.apk is the application installation file format for Android devices) for installation on an Android device, Tangerine packages all instruments in a group. Thus, you should set up groups and categorize instruments accordingly. On the main group listing page, click \"+\" button in the bottom right corner to create a new group Enter a name for your group and click Submit WARNING: If you are using the free service you are not able to create new groups. If you are a Tangerine subscriber, or run Tangerine on your own server, the user1 account can be configured to be the only account with permissions to create new groups. If this is desired, please send a request for this configuration to support@tangerinehelp.zendesk.com Any Admin user can create a new group unless configured for the user1 account only","title":"Creating a New Group"},{"location":"editor/Getting%20Started%20-%20Editor/create-new-group/#creating-a-new-group","text":"Upon logging into your Tangerine instance, you will see a screen listing your Tangerine groups. You might think of groups as discrete data collection efforts that might contain several instruments or forms. If you have, e.g., a baseline data collection and an endline data collection for the same project, you might make these two different groups. When packaging your instruments into the apk (.apk is the application installation file format for Android devices) for installation on an Android device, Tangerine packages all instruments in a group. Thus, you should set up groups and categorize instruments accordingly. On the main group listing page, click \"+\" button in the bottom right corner to create a new group Enter a name for your group and click Submit WARNING: If you are using the free service you are not able to create new groups. If you are a Tangerine subscriber, or run Tangerine on your own server, the user1 account can be configured to be the only account with permissions to create new groups. If this is desired, please send a request for this configuration to support@tangerinehelp.zendesk.com Any Admin user can create a new group unless configured for the user1 account only","title":"Creating a New Group"},{"location":"editor/Getting%20Started%20-%20Editor/edit-form/","text":"Editing the Form \u00b6 Once you have selected to edit your new or existing instrument/form, you will see a screen like the one below. This view lists the different sections of your instrument. Each section can contain one or more items. On the tablet, items in any one section can be seen on a single screen. The user moves through items by \"scrolling\" down the screen. The user moves through sections by hitting \"Next\" or \"Back\" on the tablet. The form editor provides the interface for adding and editing instrument sections and items. This interface provides controls that make the following actions possible: EDIT HTML - Clicking this button shows you the HTML code behind the form. Please edit the HTML with care. PREVIEW -- This control enables you to have a preview of your form in the current state SAVE -- This control allows you to save the form in its current state ADVANCED -- This Control enables you to access the on-open logic and on-change logic. This logic is used for skipping an entire instrument section. ADD SECTION -- This allows you to add a section of items to your instrument. For each section there are two actions available. EDIT -- This icon opens the interface to edit an instrument section (e.g., add items) DELETE -- This icon deletes this instrument section In this view, you can drag sections to reorder them.","title":"Editing the Form"},{"location":"editor/Getting%20Started%20-%20Editor/edit-form/#editing-the-form","text":"Once you have selected to edit your new or existing instrument/form, you will see a screen like the one below. This view lists the different sections of your instrument. Each section can contain one or more items. On the tablet, items in any one section can be seen on a single screen. The user moves through items by \"scrolling\" down the screen. The user moves through sections by hitting \"Next\" or \"Back\" on the tablet. The form editor provides the interface for adding and editing instrument sections and items. This interface provides controls that make the following actions possible: EDIT HTML - Clicking this button shows you the HTML code behind the form. Please edit the HTML with care. PREVIEW -- This control enables you to have a preview of your form in the current state SAVE -- This control allows you to save the form in its current state ADVANCED -- This Control enables you to access the on-open logic and on-change logic. This logic is used for skipping an entire instrument section. ADD SECTION -- This allows you to add a section of items to your instrument. For each section there are two actions available. EDIT -- This icon opens the interface to edit an instrument section (e.g., add items) DELETE -- This icon deletes this instrument section In this view, you can drag sections to reorder them.","title":"Editing the Form"},{"location":"editor/Getting%20Started%20-%20Editor/editor-overview/","text":"Overview \u00b6 Tangerine contains an extremely extensible foundational framework that allows the form developer to highly customize the core functioanlity, actions, and progression. The following section provides guidance and common examples for extending Tangerine. What is a Tangerine form? \u00b6 Create a New Group Create New Form Editing the Form Adding Sections and Questions Section Editor Copying Items Different Input Types Skip Logic Validation Why custom build forms? Custom Form Building in JavaScript Tangerine Preview \u00b6 Tangerine Preview \u00b6","title":"Overview"},{"location":"editor/Getting%20Started%20-%20Editor/editor-overview/#overview","text":"Tangerine contains an extremely extensible foundational framework that allows the form developer to highly customize the core functioanlity, actions, and progression. The following section provides guidance and common examples for extending Tangerine.","title":"Overview"},{"location":"editor/Getting%20Started%20-%20Editor/editor-overview/#what-is-a-tangerine-form","text":"Create a New Group Create New Form Editing the Form Adding Sections and Questions Section Editor Copying Items Different Input Types Skip Logic Validation Why custom build forms? Custom Form Building in JavaScript","title":"What is a Tangerine form?"},{"location":"editor/Getting%20Started%20-%20Editor/editor-overview/#tangerine-preview","text":"Tangerine Preview","title":"Tangerine Preview"},{"location":"editor/Getting%20Started%20-%20Editor/editor-overview/#_1","text":"","title":""},{"location":"editor/Getting%20Started%20-%20Editor/input-types/","text":"Different Input Types \u00b6 Item Editor \u00b6 The item editor screen is similar for many of the item types. It usually contains the following elements: Variable name: This name has to be unique for any instrument/form, as this will be used for the CSV data output as column header with each observation/child assessed/interview being a row. Avoid special characters and spaces, use lowercase only (e.g., \"age\"). Label: This will be the item label/name that will be displayed to the user (e.g. \"How old are you?\") Question number: If you input a number in here, you will see that the entire questions is moved to the right and the question number stands out when looking at the page. Use this if you are looking for a visual effect like this. Hint Text: This field allows you to add text that acts as a hint for the user (e.g., \"Enter child's age or year of birth, if known\") Show if: This is the place to enter item-level skip logic (see section 5 of this manual). Required: Selecting this checkbox marks the element as a required field. This ensures that users will enter a value before proceeding to other instrument sections or finalizing the instrument/form. Disabled: Selecting this checkbox marks the element as inactive. The item is visible to the user on the tablet, but its value cannot be changed. Hidden: Selecting this checkbox makes the element inactive AND invisible on the tablet. GPS Item \u00b6 Use the GPS item to record the location (longitude & latitude) of the user while filling in the instrument/form. We suggest placing a GPS item always in its own section. Do not combine with other items. When selecting to add an item of the GPS type, Tangerine presents the below item editor screen. The following might be a way to configure this item: Variable name: Enter \"gps\". Hint Text: Leave blank Show if: Leave blank Valid if: Leave blank Required: Select this checkbox to make this a required field. Disabled: Leave blank Hidden: Leave blank Hit \"SUBMIT\" to see the below item added to the section editor. On the tablet this item will look like this: Location \u00b6 This item type offers a dropdown listing of predefined location information such as, e.g., region, district, and school name. Before you add this item to your form, you need to upload a location list and configure Tangerine: To see a video of how to do this Watch the video First, decide what levels you would like to show and prepare a CSV file that contains your locations and ids. Each column header will present a location level (e.g. column A header might be region; column B header might be district, etc.). Make sure each level/column header contains only a single word and no spaces. Second, define the location levels for Tangerine. Click Configure/Location Lists and add the desired levels using the '+' sign Click \"Create a New Location Level\". Enter the name of the \"highest\" location level under \"Label\" (e.g. region). Repeat this process for all other location levels, however, for each \"child\" level, select which is the parent level. E.g. in the case of district, the \"Parent Level\" would be \"region\", and so forth. Hit \"Submit\" to save. NOTE: You cannot delete location levels. Be careful and deliberate as you define them for your group. If you made a mistake or need to make changes, contact the Tangerine helpdesk. Next, click the Import tab and select \"Import CSV\". Double check that your CSV file contains only those columns that you have defined as levels and spelled exactly the same! Download a sample location list file with IDs:( https://drive.google.com/file/d/1y3X0aMJKRYx51--jPC_3OUkMpmkhyEn-/view ) Once you selected the CSV, Tangerine will ask you to map the location levels you already defined to the column headers found in your csv file. Click on the small arrows to select the matching column header. For each ID field, select \"Map a column to a level and select \"AutoGeneratedID\" for the ID as shown in the example below. Then click \"Process CSV\" as shown in the screen above. Once processing is completed, you will receive a notification like this: Once you have successfully uploaded a location list and prepared Tangerine, you can add the location input item to your form. The following might be a way to configure this item, once you completed the above steps. If you think that your location list may change significantly, and you'd like to re-upload it at some point thus not implementing any changes manually, consider adding manual IDs to your location file. In the instruction above, you saw how to add the Autogenerated ID that Tangerine inserts. These IDs, however, are not persisted when you re-upload your location file. In such cases, where you know that you'd rather re-upload the entire file, we recommend that you insert an ID column and you preserve those IDs across versions of your location list. By doing that you ensure that any matching on location IDs (and not on Location labels) will be persisted. To upload a location file with IDs, first create those IDS in the Excel file. Then, on the Map location field instead of selecting Autogenerated ID, select the column representing the ID for the corresponding level. WARNING: Upon wiping out the location list when you have not generated the location IDS, all previous results collected will be missing the labels for those location and will contain only the old IDs; all data on the tablets under the Visits tab will show the ID rather than the label. This is why we highly recommend altering the location list manually or maintaining the IDs across different version of the location list in your Excel file. Check out this Excel file to see a location list with IDs that you can import in Tangerine. The formula for generating the IDs can be copied to your own file: Download a sample location list file with IDs: ( https://drive.google.com/file/d/1y3X0aMJKRYx51--jPC_3OUkMpmkhyEn-/view ) Variable name: Enter \"location\". Hint Text: Leave blank Show levels (ex. county,subcounty): Enter \"province,district,school\" Show if: Leave blank Valid if: Leave blank Required: Select this checkbox to make this a required field. Disabled: Leave blank Hidden: Leave blank Show meta-data: Leave blank Hit \"SUBMIT\" to see the below item added to the section editor. On the tablet this item will look like this: NOTE: Without a location list, no location will be displayed, and the item will be seen as \"loading\". Checkbox group (Checkbox, Radio Buttons, or Dropdowns) \u00b6 This item type lets you define a checkbox item that lets a user pick one or more options. The following might be a way to configure this item: Variable name: Enter \"books\". Label: Enter \"What kind of books do you like to read?\" Hint Text: Enter \"Tick all that apply\" Show if: Leave blank Valid if: Leave blank Required: Selecting this checkbox to make this a required field. Disabled: Leave blank Hidden: Leave blank Value (answer option): Enter the data value for the first answer option, e.g., \"0\" Label (answer option): Enter the label for the first answer option, e.g., \"None\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"1\" Label (answer option): \"Storybooks (fiction)\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"2\" Label (answer option): \"Books about real things (non-fiction) When done adding all answer options, hit \"SUBMIT\". NOTE: The item type \"CHECKBOX\" only adds a single checkbox to the form, with the item label being the answer option label. On the tablet this single checkbox item will look like this: Radio Buttons \u00b6 Radio buttons are an item type used for items that allow for only one answer. The configuration for radio buttons is the same as for checkbox group with one exception. You will see that radio button options have a checkmark to indicate which answer is correct. This is used in conjunction with the Threshold defined in the section header. When you have a threshold defined as 4, and for each question there is only one question option defined as correct, Tangerine will discontinue (hide the questions) after 4 consecutive replies are given as not correct. You can use this in EGMA tasks or in any other scenario where this makes sense On the tablet the radio button item will look like this: Dropdown \u00b6 Dropdown is an item type used for items that allow for only one answer to be picked from a dropdown list of items. This item type is convenient when there are many options to choose from. The configuration for a dropdown item is the same as for checkbox group. On the tablet the dropdown item will look like this: Timed Grid \u00b6 This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. The following might be a way to configure this item: Variable name: Enter \"letter_sound\". Number of columns: Enter the number of columns by which you'd like to organize the items. Enter, e.g. \"4\" (Tip: choose less columns for larger items, like words or operation problems) Hint Text: Leave blank Auto Stop: The autostop field defines the number of consecutive incorrect items, starting from the first one, after which the test stops automatically. For example, with an autostop value of 10, if a child has the first 10 items all incorrect, the test will stop. If a child has the first 4 items correct and then the following 10 items incorrect, the test will not autostop. Show if: Leave blank Valid if: Leave blank Mark entire rows: This option allows the user to mark and entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Selecting this checkbox to make this a required field. Disabled: Leave blank Hidden: Leave blank Duration in seconds: Enter the time allowed to complete this assessment, e.g. \"60\" for 60 seconds or one minute. Options (each option separated by a space): Enter all grid items here. Separate each item by a space from the next; if you have extra spaces please remove them! When done adding all answer options, hit \"SUBMIT\". NOTE: For these kids of assessments there are usually instructions preceding the assessment items. Insert those instructions as a \"HTML CONTENT CONTAINER\" item first, as shown below, followed by the \"TIMED GRID\" in the same section. We recommend to only feature the instructions (HTML Content) and Timed Grid in any one section of your instrument/form On the tablet the timed grid item will look like this: HTML Content Container \u00b6 This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. You can treat this container as a variable and hide or show different instructional text upon the selection of different options. The following might be a way to configure this item: Variable name: Enter \"Assessor instructions\". Show if: Leave blank Valid if: Leave blank Mark entire rows: This option allows the user to mark an entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Leave blank Disabled: Leave blank Hidden: Leave blank Rows 1-X: Insert assessor instructions, use html tags to insert line breaks or formatting (e.g. for a line break; text for bolding a piece of text, etc.). When done adding all answer options, hit \"SUBMIT\". On the tablet this HTML container item will look like this: Copying Items \u00b6 If you have an element and/or content which is the same as a previous element (e.g., radio buttons) that you would like to insert into your instrument quickly, without having to click \"INSERT HERE\" again, there is a COPY feature that you can use to do this. First, enter your original content (e.g., variable name, labels, and values) and then click SUBMIT. Once the first step is complete, next you click on the icon. Doing so automatically creates a duplicate of all your original content, except the variable name, which you will need to edit, if desired. In the image below, you can see that all duplicates are auto-populated with the name \"widget,\" followed by an underscore, and a mix of letters and numbers (always different from the previous copy). If you would like to, you can edit all the content of the copy to fit your needs.","title":"Different Input Types"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#different-input-types","text":"","title":"Different Input Types"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#item-editor","text":"The item editor screen is similar for many of the item types. It usually contains the following elements: Variable name: This name has to be unique for any instrument/form, as this will be used for the CSV data output as column header with each observation/child assessed/interview being a row. Avoid special characters and spaces, use lowercase only (e.g., \"age\"). Label: This will be the item label/name that will be displayed to the user (e.g. \"How old are you?\") Question number: If you input a number in here, you will see that the entire questions is moved to the right and the question number stands out when looking at the page. Use this if you are looking for a visual effect like this. Hint Text: This field allows you to add text that acts as a hint for the user (e.g., \"Enter child's age or year of birth, if known\") Show if: This is the place to enter item-level skip logic (see section 5 of this manual). Required: Selecting this checkbox marks the element as a required field. This ensures that users will enter a value before proceeding to other instrument sections or finalizing the instrument/form. Disabled: Selecting this checkbox marks the element as inactive. The item is visible to the user on the tablet, but its value cannot be changed. Hidden: Selecting this checkbox makes the element inactive AND invisible on the tablet.","title":"Item Editor"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#gps-item","text":"Use the GPS item to record the location (longitude & latitude) of the user while filling in the instrument/form. We suggest placing a GPS item always in its own section. Do not combine with other items. When selecting to add an item of the GPS type, Tangerine presents the below item editor screen. The following might be a way to configure this item: Variable name: Enter \"gps\". Hint Text: Leave blank Show if: Leave blank Valid if: Leave blank Required: Select this checkbox to make this a required field. Disabled: Leave blank Hidden: Leave blank Hit \"SUBMIT\" to see the below item added to the section editor. On the tablet this item will look like this:","title":"GPS Item"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#location","text":"This item type offers a dropdown listing of predefined location information such as, e.g., region, district, and school name. Before you add this item to your form, you need to upload a location list and configure Tangerine: To see a video of how to do this Watch the video First, decide what levels you would like to show and prepare a CSV file that contains your locations and ids. Each column header will present a location level (e.g. column A header might be region; column B header might be district, etc.). Make sure each level/column header contains only a single word and no spaces. Second, define the location levels for Tangerine. Click Configure/Location Lists and add the desired levels using the '+' sign Click \"Create a New Location Level\". Enter the name of the \"highest\" location level under \"Label\" (e.g. region). Repeat this process for all other location levels, however, for each \"child\" level, select which is the parent level. E.g. in the case of district, the \"Parent Level\" would be \"region\", and so forth. Hit \"Submit\" to save. NOTE: You cannot delete location levels. Be careful and deliberate as you define them for your group. If you made a mistake or need to make changes, contact the Tangerine helpdesk. Next, click the Import tab and select \"Import CSV\". Double check that your CSV file contains only those columns that you have defined as levels and spelled exactly the same! Download a sample location list file with IDs:( https://drive.google.com/file/d/1y3X0aMJKRYx51--jPC_3OUkMpmkhyEn-/view ) Once you selected the CSV, Tangerine will ask you to map the location levels you already defined to the column headers found in your csv file. Click on the small arrows to select the matching column header. For each ID field, select \"Map a column to a level and select \"AutoGeneratedID\" for the ID as shown in the example below. Then click \"Process CSV\" as shown in the screen above. Once processing is completed, you will receive a notification like this: Once you have successfully uploaded a location list and prepared Tangerine, you can add the location input item to your form. The following might be a way to configure this item, once you completed the above steps. If you think that your location list may change significantly, and you'd like to re-upload it at some point thus not implementing any changes manually, consider adding manual IDs to your location file. In the instruction above, you saw how to add the Autogenerated ID that Tangerine inserts. These IDs, however, are not persisted when you re-upload your location file. In such cases, where you know that you'd rather re-upload the entire file, we recommend that you insert an ID column and you preserve those IDs across versions of your location list. By doing that you ensure that any matching on location IDs (and not on Location labels) will be persisted. To upload a location file with IDs, first create those IDS in the Excel file. Then, on the Map location field instead of selecting Autogenerated ID, select the column representing the ID for the corresponding level. WARNING: Upon wiping out the location list when you have not generated the location IDS, all previous results collected will be missing the labels for those location and will contain only the old IDs; all data on the tablets under the Visits tab will show the ID rather than the label. This is why we highly recommend altering the location list manually or maintaining the IDs across different version of the location list in your Excel file. Check out this Excel file to see a location list with IDs that you can import in Tangerine. The formula for generating the IDs can be copied to your own file: Download a sample location list file with IDs: ( https://drive.google.com/file/d/1y3X0aMJKRYx51--jPC_3OUkMpmkhyEn-/view ) Variable name: Enter \"location\". Hint Text: Leave blank Show levels (ex. county,subcounty): Enter \"province,district,school\" Show if: Leave blank Valid if: Leave blank Required: Select this checkbox to make this a required field. Disabled: Leave blank Hidden: Leave blank Show meta-data: Leave blank Hit \"SUBMIT\" to see the below item added to the section editor. On the tablet this item will look like this: NOTE: Without a location list, no location will be displayed, and the item will be seen as \"loading\".","title":"Location"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#checkbox-group-checkbox-radio-buttons-or-dropdowns","text":"This item type lets you define a checkbox item that lets a user pick one or more options. The following might be a way to configure this item: Variable name: Enter \"books\". Label: Enter \"What kind of books do you like to read?\" Hint Text: Enter \"Tick all that apply\" Show if: Leave blank Valid if: Leave blank Required: Selecting this checkbox to make this a required field. Disabled: Leave blank Hidden: Leave blank Value (answer option): Enter the data value for the first answer option, e.g., \"0\" Label (answer option): Enter the label for the first answer option, e.g., \"None\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"1\" Label (answer option): \"Storybooks (fiction)\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"2\" Label (answer option): \"Books about real things (non-fiction) When done adding all answer options, hit \"SUBMIT\". NOTE: The item type \"CHECKBOX\" only adds a single checkbox to the form, with the item label being the answer option label. On the tablet this single checkbox item will look like this:","title":"Checkbox group (Checkbox, Radio Buttons, or Dropdowns)"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#radio-buttons","text":"Radio buttons are an item type used for items that allow for only one answer. The configuration for radio buttons is the same as for checkbox group with one exception. You will see that radio button options have a checkmark to indicate which answer is correct. This is used in conjunction with the Threshold defined in the section header. When you have a threshold defined as 4, and for each question there is only one question option defined as correct, Tangerine will discontinue (hide the questions) after 4 consecutive replies are given as not correct. You can use this in EGMA tasks or in any other scenario where this makes sense On the tablet the radio button item will look like this:","title":"Radio Buttons"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#dropdown","text":"Dropdown is an item type used for items that allow for only one answer to be picked from a dropdown list of items. This item type is convenient when there are many options to choose from. The configuration for a dropdown item is the same as for checkbox group. On the tablet the dropdown item will look like this:","title":"Dropdown"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#timed-grid","text":"This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. The following might be a way to configure this item: Variable name: Enter \"letter_sound\". Number of columns: Enter the number of columns by which you'd like to organize the items. Enter, e.g. \"4\" (Tip: choose less columns for larger items, like words or operation problems) Hint Text: Leave blank Auto Stop: The autostop field defines the number of consecutive incorrect items, starting from the first one, after which the test stops automatically. For example, with an autostop value of 10, if a child has the first 10 items all incorrect, the test will stop. If a child has the first 4 items correct and then the following 10 items incorrect, the test will not autostop. Show if: Leave blank Valid if: Leave blank Mark entire rows: This option allows the user to mark and entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Selecting this checkbox to make this a required field. Disabled: Leave blank Hidden: Leave blank Duration in seconds: Enter the time allowed to complete this assessment, e.g. \"60\" for 60 seconds or one minute. Options (each option separated by a space): Enter all grid items here. Separate each item by a space from the next; if you have extra spaces please remove them! When done adding all answer options, hit \"SUBMIT\". NOTE: For these kids of assessments there are usually instructions preceding the assessment items. Insert those instructions as a \"HTML CONTENT CONTAINER\" item first, as shown below, followed by the \"TIMED GRID\" in the same section. We recommend to only feature the instructions (HTML Content) and Timed Grid in any one section of your instrument/form On the tablet the timed grid item will look like this:","title":"Timed Grid"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#html-content-container","text":"This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. You can treat this container as a variable and hide or show different instructional text upon the selection of different options. The following might be a way to configure this item: Variable name: Enter \"Assessor instructions\". Show if: Leave blank Valid if: Leave blank Mark entire rows: This option allows the user to mark an entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Leave blank Disabled: Leave blank Hidden: Leave blank Rows 1-X: Insert assessor instructions, use html tags to insert line breaks or formatting (e.g. for a line break; text for bolding a piece of text, etc.). When done adding all answer options, hit \"SUBMIT\". On the tablet this HTML container item will look like this:","title":"HTML Content Container"},{"location":"editor/Getting%20Started%20-%20Editor/input-types/#copying-items","text":"If you have an element and/or content which is the same as a previous element (e.g., radio buttons) that you would like to insert into your instrument quickly, without having to click \"INSERT HERE\" again, there is a COPY feature that you can use to do this. First, enter your original content (e.g., variable name, labels, and values) and then click SUBMIT. Once the first step is complete, next you click on the icon. Doing so automatically creates a duplicate of all your original content, except the variable name, which you will need to edit, if desired. In the image below, you can see that all duplicates are auto-populated with the name \"widget,\" followed by an underscore, and a mix of letters and numbers (always different from the previous copy). If you would like to, you can edit all the content of the copy to fit your needs.","title":"Copying Items"},{"location":"editor/Getting%20Started%20-%20Editor/skip-logic/","text":"Skip Logic \u00b6 Every instrument/form, section, and individual item provides an interface for adding logic, e.g. skip logic, that controls the interactivity and presentation of the instrument, section, or item. There are two types of skip logic that can be applied: On form level - used to skip an entire section and implement logic that is applicable to the entire form On section/page level Most common case: You can implement those in the item's 'Skip If' field, or Used for more complex conditions Implement the skip in the section's on-change logic The functions that we use for skip logic are: getValue('name') - to check the value of input 'name' Use this for Text, Number, Dates, Time, Radio buttons, or Drop down lists getValue('name').includes('value') - to check if 'value' is in the selected items of 'name' Use this call to check if a value is in the list of selected values of a checkbox group input. grid specific functions - look at the end of this page for more information. Join skip logic conditions using the && (AND) and || (OR) operators getValue('repeatedgrade') == '1' && getValue('age') >= 1 Negate a condition using the ! (NOT) operator getValue('repeatedgrade') != '1' Or !getValue('grades_taught').includes('1') Logic at item level \u00b6 You want to skip an item question: Navigate to the \"Show if\" in the Item Editor. In this example this item (e.g., \"Which grade did you repeat?\" will ONLY be shown if the response to the previous item (e.g., asking about whether the person ever repeated a grade) was \"yes\" (data value 1). getValue('repeatedgrade') == '1' Alternatively, for a preceding question that had \"Other\" as an answer option, the logic here might look like this: getValue('q10') == '9' Other examples might include a specific value of a preceding item. Use the below example for questions of type checkbox group, where more than one answer can be selected. getValue('q12').includes('5') NOTE: The skip logic commands used in Tangerine are case-sensitive and space-sensitive. You must type precisely the name of the variables which you want to reference. NOTE: Use single straight quotation marks to demarcate variables names ', do NOT use single slanted quotation marks ' or double quotation marks \". Logic at instrument/form level \u00b6 At the instrument/form level, accessing this logic editor is via advanced settings in the section editor. Click on ADVANCED to see the screen below with \"on-open\" and \"on-change\" entries. As outlined earlier, at the item level, such logic can be added in the \"Show if\" field in the item editor. On-open and on-change As the name suggest, on-open logic is only executed when the form is opened whereas on-change logic is always executed whenever a change happens in the whole form. When selecting on-open logic either at the instrument/form level or in the section editor, the following screen appears. The interface allows JavaScript logic to be incorporated into the instrument. (Skip) Logic Examples \u00b6 You want to skip an entire section: Navigate to and select the \"on-change\" at the instrument/form level. This logic will not work if you insert it in a section (it must be defined on form level) In this example, the section gets skipped based on responses from a previous item, e.g., if the respondent answered negatively to a previous question \"Do you have children?\". Note that the sectionID is provided in Tangerine in the section details as shown below. Form level skip logic is used to present or hide an entire section page to the user. This is very useful when managing a workflow and you need to display some sections but hide others according to the selected option for a question. For example, you can show a certain section only for grade 1 and hide it if grade 2 is selected. if ( getValue ( 'children' ) == '1' ) { sectionEnable ( 'item_1' )} else { sectionDisable ( 'item_1' )} You want to hide a set of items based on responses to an item in a previous section: Navigate to and select the \"on-open\" at the section level. In this example several items in this section are hidden based on the participant's response to the item about the child's schooling experience in a previous section. if ( getValue ( 'school' ) == '1' ) { itemShow ( 'grade' ) itemShow ( 'repeatedgrade' ) itemShow ( 'dropout' )} else { itemHide ( 'grade' ) itemHide ( 'repeatedgrade' ) itemHide ( 'dropout' )} You want to hide a set of items based on responses to two items in a previous section: Navigate to and select the \"on-open\" at the section level. In this example the item \"teachers_name\" should only be shown if the participant's previous response to \"teacher_available\" was yes = 1 AND if the participant' previous response to \"class_selected\" was \"1\". if ( getValue ( ' teacher_available' ) === '1' && getValue ( 'class_selected' ) === '1' ) { itemShow ( 'teachers_name' )} else { itemHide ( 'teachers_name' )} The Logic interface offer syntax highlighting. This is handy when you have errors in your code. Below is an example of an error and sample message. Logic at section level \u00b6 At the section level, the logic editor can be accessed by editing the Section Details clicking the pen icon on the right of the blue bar (where one can also rename the section). Skip logic with grid specific functions \u00b6 You may be in the situation where you are required to perform a skip based on some results from a grid. We provide four functions that you can use in your skip logic to show or hide questions or sections based on the results of a grid. Showing a question based on the number of attempted items on a grid If you'd like to hide a question when the number of attempted items on a particular grid is over a certain threshold you can make use of the 'numberOfItemsAttempted(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show it only when the number of attempted items on the grid is greater than 10 numberOfItemsAttempted ( inputs . letter_sound ) > 10 Showing a question based on the number of correct items of a grid Sometimes it may be the case where you want to show a question only if there are a certain N items on the grid answered correctly. In those cases, we make use of the 'numberOfCorrectItems(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show this question only when the number of correct items on the grid is greater than 0 numberOfCorrectItems ( inputs . letter_sound ) > 0 Show a question only if the grid did not auto stop If you have set the autostop value of a grid with variable name 'letter_sound' and you want to show a question only when the grid did not discontinue due to a triggered auto stop, then you can insert the below logic into the question's Show If field: inputs . letter_sound . gridAutoStopped The use of the '!' gives us the opposite of the result returned by the function. If the grid stopped the result will be true. When we use the '!' in front of the function, it means that, when the grid did not stop we want a positive answer hence show the question. Show a question based on the words per minute read on a grid It may happen that you need to show a question only to advanced students. In those cases, we make use of the function 'itemsPerMinute(input)' This function returns the number of items per minute read by the student. We can use it, just as before, in the Show If input field of a question, like so: itemsPerMinute ( inputs . letter_sound ) > 35 This call will force a question to be displayed only when the rate of reading was higher than 35 workds per minute. NOTE: All of the above functions can also be used to show or a hide an entire section page.","title":"Skip Logic"},{"location":"editor/Getting%20Started%20-%20Editor/skip-logic/#skip-logic","text":"Every instrument/form, section, and individual item provides an interface for adding logic, e.g. skip logic, that controls the interactivity and presentation of the instrument, section, or item. There are two types of skip logic that can be applied: On form level - used to skip an entire section and implement logic that is applicable to the entire form On section/page level Most common case: You can implement those in the item's 'Skip If' field, or Used for more complex conditions Implement the skip in the section's on-change logic The functions that we use for skip logic are: getValue('name') - to check the value of input 'name' Use this for Text, Number, Dates, Time, Radio buttons, or Drop down lists getValue('name').includes('value') - to check if 'value' is in the selected items of 'name' Use this call to check if a value is in the list of selected values of a checkbox group input. grid specific functions - look at the end of this page for more information. Join skip logic conditions using the && (AND) and || (OR) operators getValue('repeatedgrade') == '1' && getValue('age') >= 1 Negate a condition using the ! (NOT) operator getValue('repeatedgrade') != '1' Or !getValue('grades_taught').includes('1')","title":"Skip Logic"},{"location":"editor/Getting%20Started%20-%20Editor/skip-logic/#logic-at-item-level","text":"You want to skip an item question: Navigate to the \"Show if\" in the Item Editor. In this example this item (e.g., \"Which grade did you repeat?\" will ONLY be shown if the response to the previous item (e.g., asking about whether the person ever repeated a grade) was \"yes\" (data value 1). getValue('repeatedgrade') == '1' Alternatively, for a preceding question that had \"Other\" as an answer option, the logic here might look like this: getValue('q10') == '9' Other examples might include a specific value of a preceding item. Use the below example for questions of type checkbox group, where more than one answer can be selected. getValue('q12').includes('5') NOTE: The skip logic commands used in Tangerine are case-sensitive and space-sensitive. You must type precisely the name of the variables which you want to reference. NOTE: Use single straight quotation marks to demarcate variables names ', do NOT use single slanted quotation marks ' or double quotation marks \".","title":"Logic at item level"},{"location":"editor/Getting%20Started%20-%20Editor/skip-logic/#logic-at-instrumentform-level","text":"At the instrument/form level, accessing this logic editor is via advanced settings in the section editor. Click on ADVANCED to see the screen below with \"on-open\" and \"on-change\" entries. As outlined earlier, at the item level, such logic can be added in the \"Show if\" field in the item editor. On-open and on-change As the name suggest, on-open logic is only executed when the form is opened whereas on-change logic is always executed whenever a change happens in the whole form. When selecting on-open logic either at the instrument/form level or in the section editor, the following screen appears. The interface allows JavaScript logic to be incorporated into the instrument.","title":"Logic at instrument/form level"},{"location":"editor/Getting%20Started%20-%20Editor/skip-logic/#skip-logic-examples","text":"You want to skip an entire section: Navigate to and select the \"on-change\" at the instrument/form level. This logic will not work if you insert it in a section (it must be defined on form level) In this example, the section gets skipped based on responses from a previous item, e.g., if the respondent answered negatively to a previous question \"Do you have children?\". Note that the sectionID is provided in Tangerine in the section details as shown below. Form level skip logic is used to present or hide an entire section page to the user. This is very useful when managing a workflow and you need to display some sections but hide others according to the selected option for a question. For example, you can show a certain section only for grade 1 and hide it if grade 2 is selected. if ( getValue ( 'children' ) == '1' ) { sectionEnable ( 'item_1' )} else { sectionDisable ( 'item_1' )} You want to hide a set of items based on responses to an item in a previous section: Navigate to and select the \"on-open\" at the section level. In this example several items in this section are hidden based on the participant's response to the item about the child's schooling experience in a previous section. if ( getValue ( 'school' ) == '1' ) { itemShow ( 'grade' ) itemShow ( 'repeatedgrade' ) itemShow ( 'dropout' )} else { itemHide ( 'grade' ) itemHide ( 'repeatedgrade' ) itemHide ( 'dropout' )} You want to hide a set of items based on responses to two items in a previous section: Navigate to and select the \"on-open\" at the section level. In this example the item \"teachers_name\" should only be shown if the participant's previous response to \"teacher_available\" was yes = 1 AND if the participant' previous response to \"class_selected\" was \"1\". if ( getValue ( ' teacher_available' ) === '1' && getValue ( 'class_selected' ) === '1' ) { itemShow ( 'teachers_name' )} else { itemHide ( 'teachers_name' )} The Logic interface offer syntax highlighting. This is handy when you have errors in your code. Below is an example of an error and sample message.","title":"(Skip) Logic Examples"},{"location":"editor/Getting%20Started%20-%20Editor/skip-logic/#logic-at-section-level","text":"At the section level, the logic editor can be accessed by editing the Section Details clicking the pen icon on the right of the blue bar (where one can also rename the section).","title":"Logic at section level"},{"location":"editor/Getting%20Started%20-%20Editor/skip-logic/#skip-logic-with-grid-specific-functions","text":"You may be in the situation where you are required to perform a skip based on some results from a grid. We provide four functions that you can use in your skip logic to show or hide questions or sections based on the results of a grid. Showing a question based on the number of attempted items on a grid If you'd like to hide a question when the number of attempted items on a particular grid is over a certain threshold you can make use of the 'numberOfItemsAttempted(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show it only when the number of attempted items on the grid is greater than 10 numberOfItemsAttempted ( inputs . letter_sound ) > 10 Showing a question based on the number of correct items of a grid Sometimes it may be the case where you want to show a question only if there are a certain N items on the grid answered correctly. In those cases, we make use of the 'numberOfCorrectItems(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show this question only when the number of correct items on the grid is greater than 0 numberOfCorrectItems ( inputs . letter_sound ) > 0 Show a question only if the grid did not auto stop If you have set the autostop value of a grid with variable name 'letter_sound' and you want to show a question only when the grid did not discontinue due to a triggered auto stop, then you can insert the below logic into the question's Show If field: inputs . letter_sound . gridAutoStopped The use of the '!' gives us the opposite of the result returned by the function. If the grid stopped the result will be true. When we use the '!' in front of the function, it means that, when the grid did not stop we want a positive answer hence show the question. Show a question based on the words per minute read on a grid It may happen that you need to show a question only to advanced students. In those cases, we make use of the function 'itemsPerMinute(input)' This function returns the number of items per minute read by the student. We can use it, just as before, in the Show If input field of a question, like so: itemsPerMinute ( inputs . letter_sound ) > 35 This call will force a question to be displayed only when the rate of reading was higher than 35 workds per minute. NOTE: All of the above functions can also be used to show or a hide an entire section page.","title":"Skip logic with grid specific functions"},{"location":"editor/Getting%20Started%20-%20Editor/tangerine-preview-tool/","text":"Tangerine Preview \u00b6 Tangerine Preview is a command line tool for previewing the Tangerine content you are working on your local computer. It work on Windows, Mac, and Linux. If you are on macOS, check out this video that demonstrates how to install and use the Tangerine Preview tool. Install \u00b6 Before you install tangerine-preview , make sure to install node.js . If you are on macOS, you will need to set permissions to allow for global installs by running the following command. sudo chown -R `whoami` /usr/local/lib/node_modules For all platforms, open a command line terminal and run Tangerine Preview install command. npm install -g tangerine-preview Preview your content \u00b6 Open a command prompt, change directory to your content that you would like to preview, then run the tangerine-preview command. cd your-project tangerine-preview Lastly, open Google Chrome to http://localhost:3000 As you make content changes, they will be synced to the app. Reload your web browser and you'll see the changes. Update tangerine-preview \u00b6 When new releases come out for tangerine, tangerine-preview will also be updated. To update, open a command prompt and run the install command again. npm install -g tangerine-preview","title":"Tangerine preview tool"},{"location":"editor/Getting%20Started%20-%20Editor/tangerine-preview-tool/#tangerine-preview","text":"Tangerine Preview is a command line tool for previewing the Tangerine content you are working on your local computer. It work on Windows, Mac, and Linux. If you are on macOS, check out this video that demonstrates how to install and use the Tangerine Preview tool.","title":"Tangerine Preview"},{"location":"editor/Getting%20Started%20-%20Editor/tangerine-preview-tool/#install","text":"Before you install tangerine-preview , make sure to install node.js . If you are on macOS, you will need to set permissions to allow for global installs by running the following command. sudo chown -R `whoami` /usr/local/lib/node_modules For all platforms, open a command line terminal and run Tangerine Preview install command. npm install -g tangerine-preview","title":"Install"},{"location":"editor/Getting%20Started%20-%20Editor/tangerine-preview-tool/#preview-your-content","text":"Open a command prompt, change directory to your content that you would like to preview, then run the tangerine-preview command. cd your-project tangerine-preview Lastly, open Google Chrome to http://localhost:3000 As you make content changes, they will be synced to the app. Reload your web browser and you'll see the changes.","title":"Preview your content"},{"location":"editor/Getting%20Started%20-%20Editor/tangerine-preview-tool/#update-tangerine-preview","text":"When new releases come out for tangerine, tangerine-preview will also be updated. To update, open a command prompt and run the install command again. npm install -g tangerine-preview","title":"Update tangerine-preview"},{"location":"editor/Getting%20Started%20-%20Editor/validation/","text":"Validation \u00b6 Tangerine provides the option to check the validity of an input field. Navigate to the \"Valid if\" field in the Item Editor. Field Validation Examples \u00b6 If, for example, the value entered into an \"INPUT-NUMBER\" field should have 9 or more characters, enter the following into \"Valid if\" for this item: input . value . length > 9 Tangerine also allow you to compare the value entered in the current item to a value entered for another, earlier item. This might be the case, e.g. for attendance when observing a classroom. That is, when recording attendance, the number of children present should not exceed the number of children enrolled. Assume that a relevant variable name of the earlier item was \"boys_enrolled\" and the current items is about the boys present, this might be the validation logic to enter under \"Valid if\" for boys_present. parseInt ( input . value ) <= inputs . boys_enrolled . value If you want to validate that a number input is in between a particular range but also allow a 'No Reply' answer, use the below validation rule: input . value >= 0 && input . value <= 10 || input . value == 999 Here we make sure that the user can only enter numbers between 0 and 10 but also 999 as a reply to this question. If you have a list of checkboxes with the option No (value 0), NA (value 888), and some other options, and you'd like to make sure that the assessor cannot select the options No or the option NA along with other available options you need to implement a rule like the one below. The variable name in the below example is TQ1 ( ! getValue ( 'TQ1' ). includes ( '888' ) && ! getValue ( 'TQ1' ). includes ( '0' )) || ( getValue ( 'TQ1' ). includes ( '888' ) || getValue ( 'TQ1' ). includes ( '0' )) && getValue ( 'TQ1' ). length == 1","title":"Validation"},{"location":"editor/Getting%20Started%20-%20Editor/validation/#validation","text":"Tangerine provides the option to check the validity of an input field. Navigate to the \"Valid if\" field in the Item Editor.","title":"Validation"},{"location":"editor/Getting%20Started%20-%20Editor/validation/#field-validation-examples","text":"If, for example, the value entered into an \"INPUT-NUMBER\" field should have 9 or more characters, enter the following into \"Valid if\" for this item: input . value . length > 9 Tangerine also allow you to compare the value entered in the current item to a value entered for another, earlier item. This might be the case, e.g. for attendance when observing a classroom. That is, when recording attendance, the number of children present should not exceed the number of children enrolled. Assume that a relevant variable name of the earlier item was \"boys_enrolled\" and the current items is about the boys present, this might be the validation logic to enter under \"Valid if\" for boys_present. parseInt ( input . value ) <= inputs . boys_enrolled . value If you want to validate that a number input is in between a particular range but also allow a 'No Reply' answer, use the below validation rule: input . value >= 0 && input . value <= 10 || input . value == 999 Here we make sure that the user can only enter numbers between 0 and 10 but also 999 as a reply to this question. If you have a list of checkboxes with the option No (value 0), NA (value 888), and some other options, and you'd like to make sure that the assessor cannot select the options No or the option NA along with other available options you need to implement a rule like the one below. The variable name in the below example is TQ1 ( ! getValue ( 'TQ1' ). includes ( '888' ) && ! getValue ( 'TQ1' ). includes ( '0' )) || ( getValue ( 'TQ1' ). includes ( '888' ) || getValue ( 'TQ1' ). includes ( '0' )) && getValue ( 'TQ1' ). length == 1","title":"Field Validation Examples"},{"location":"editor/advanced-form-programming/","text":"Overview \u00b6 Tangerine contains an extremely extensible foundational framework that allows the form developer to highly customize the core functioanlity, actions, and progression. The following section provides guidance and common examples for extending Tangerine. TODO: INSERT TABLE OF CONTENTS FOR THIS SECTION AND HIGH-LEVEL OVERVIEW","title":"Overview"},{"location":"editor/advanced-form-programming/#overview","text":"Tangerine contains an extremely extensible foundational framework that allows the form developer to highly customize the core functioanlity, actions, and progression. The following section provides guidance and common examples for extending Tangerine. TODO: INSERT TABLE OF CONTENTS FOR THIS SECTION AND HIGH-LEVEL OVERVIEW","title":"Overview"},{"location":"editor/advanced-form-programming/case-service-api/","text":"Warning Use of the caseService Class is only available when the case module is enabled on the server. TODO: Link to the page that describes how to enable the case service The caseService class allows the form developer to programmatically interact with the case from within the form. Case APIs \u00b6 changeLocation \u00b6 Change the location of a Case. This also changes the location information on all related Form Responses. Parameters Param Type Description location object An object where the properties are the levels and the values are the location node IDs Example video example code setVariable \u00b6 Set a Case level variable in a Case. Parameters Param Type Description variableName string The variable name. value any The value for the variable. Example caseService . setVariable ( 'participant_id' , getValue ( 'participant_id' )) caseService . setVariable ( 'first_name' , getValue ( 'first_name' )) caseService . setVariable ( 'last_name' , getValue ( 'last_name' )) - example code getVariable \u00b6 Get a Case level variable in a Case. Parameters Param Type Description variableName string The variable name. Returns The value requested. Many be any data type that was set Example if ( ! caseService . getVariable ( 'status' )) { caseService . setVariable ( 'status' , 'screening' ) } - example code Case Event API \u00b6 createEvent \u00b6 Dynamically create an instance of an event (defined in the case json) and add it to the current case Parameters Param Type Description eventDefinitionId string Event Definition ID from the Case Definition Document createRequiredEventForms (Optional) boolean (Default: False) Instantiate any required forms within the Event Returns CaseEvent object Example const event1 = caseService . createEvent ( 'event-definition-cf58ca' ) const event2 = caseService . createEvent ( 'event-definition-682ca6' , true ) setEventEstimatedDay \u00b6 Set the estimated day of expected date completion. This is used by the calendar for displaying events. TODO: Improve Description Parameters Param Type Description eventId string (UUID) Event Instance ID from the Case timeInMs number Unix timestamp for the event date/time Example caseService . setEventEstimatedDay ( event1 . id , now ) caseService . setEventEstimatedDay ( 'f9a25042-b03e-11ea-b3de-0242ac130004' , 1592359411 ) setEventScheduledDay \u00b6 Set the scheduled day of expected date completion. This is used by the calendar for displaying events. TODO: Improve Description Parameters Param Type Description eventId string (UUID) Event Instance ID from the Case timeInMs number Unix timestamp for the event date/time Example caseService . setEventScheduledDay ( event1 . id , now ) caseService . setEventScheduledDay ( 'f9a25042-b03e-11ea-b3de-0242ac130004' , 1592359411 ) setEventWindow \u00b6 Set the expected event completion. TODO: Improve Description Parameters Param Type Description eventId string (UUID) Event Instance ID from the Case windowStartDayTimeInMs number Unix timestamp for the event start date/time windowEndDayTimeInMs number Unix timestamp for the event end date/time Example caseService . setEventWindow ( event1 . id , 1592359411 , 1592618611 ) caseService . setEventWindow ( 'f9a25042-b03e-11ea-b3de-0242ac130004' , 1592359411 , 1592618611 ) setEventOccurredOn \u00b6 Set the date in which the event occurred TODO: Improve Description Parameters Param Type Description eventId string (UUID) Event Instance ID from the Case timeInMs number Unix timestamp for the event completion date/time Example caseService . setEventOccurredOn ( event1 . id , now ) caseService . setEventOccurredOn ( 'f9a25042-b03e-11ea-b3de-0242ac130004' , 1592359411 ) disableEventDefinition \u00b6 Prevent creation of an via the new event menu. Parameters Param Type Description eventDefinitionId string (UUID) Event Definition ID from the Case Definition Example caseService . disableEventDefinition ( 'event-definition-1' ) Event Form API \u00b6 createEventForm \u00b6 Dynamically create an instance of an event form (defined in the case json) and add it to the current Case. Parameters Param Type Description caseEventId string Event ID of the Event you want to add this Form to eventFormDefinitionId string Event Form Definition ID of the Event Form ou want to create participantId (optional) string ID of the Participant this Event Form is for. Returns EventForm object Example const eventForm = caseService . startEventForm ( caseEvent . id , 'event-form-definition-fdkai3' , participant . id ) code example video demo deleteEventForm \u00b6 Dynamically delete an instance of an event form. Parameters Param Type Description caseEventId string Event ID of the Event you want to add this Form to eventFormId string Event Form ID of the Event Form you want to delete Example // Find a Case Event and corresponding Event Form instance to delete. const caseEvent = caseService . case . events . find ( event => event . eventDefinitionId === 'event-definition-1' ) const eventForm = caseEvent . eventForms . find ( eventForm => eventForm . eventFormDefinitionId === 'event-form-definition-1' ) // Delete the EventForm. caseService . deleteEventForm ( caseEvent . id , eventForm . id ) setEventFormData \u00b6 Set a custom piece of data for an event form. Note this is a separate data collection than the data on the Form Response related to the Event Form. Parameters Param Type Description caseEventId string Event ID of the Event the Event Form lives in eventFormId string Event Form ID of the Event Form you want to set data on variableName string Variable name you are setting value any Value you want to set Example caseService . setEventFormData ( caseEvent . id , eventForm . id , 'foo' , 'bar' ) getEventFormData \u00b6 Get a custom piece of data for an event form. Note this is a separate data collection than the data on the Form Response related to the Event Form. Parameters Param Type Description caseEventId string Event ID of the Event the Event Form lives in eventFormId string Event Form ID of the Event Form you want to get data of variableName string Variable name you are getting Example const fooData = caseService . getEventFormData ( caseEvent . id , eventForm . id , 'foo' ) markEventFormRequired \u00b6 Mark an Even Form instance as being required. You might do this on a form that was optional, but it has come to lite that it must be filled out before the event is marked as complete. Parameters Param Type Description caseEventId string Event ID of the Event the Event Form lives in eventFormId string Event Form ID of the Event Form you want to mark required Example // Create an EventForm in the current event. You could also find one. const form2 = caseService . createEventForm ( caseEvent . id , 'event-form--mark-form-as-required-example-2' , participant . id ) // Mark EventForm as required. caseService . markEventFormRequired ( caseEvent . id , form2 . id ) example code video markEventFormNotRequired \u00b6 Mark and event form as not required. Parameters Param Type Description caseEventId string Event ID of the Event the Event Form lives in eventFormId string Event Form ID of the Event Form you want to mark not required Example // Mark EventForm as required. caseService . markEventFormRequired ( caseEvent . id , eventForm . id ) Participant API \u00b6 createParticipant \u00b6 Create a participant in a Case. Parameters Param Type Description caseRoleId string A Case Role ID as defined in the Case Role Definitions Returns Participant object Example const participantRole1 = caseService . createParticipant ( 'role-1' ) example code setParticipantData \u00b6 Set some data for a specific Participant. Parameters Param Type Description participantId string ID of the participant variableName string Variable name you are setting value any Value you want to set Example Create a participant and set some data from the current form... const participantRole1 = caseService . createParticipant ( 'role-1' ) caseService . setParticipantData ( participantRole1 . id , 'participant_id' , getValue ( 'participant_id' )) caseService . setParticipantData ( participantRole1 . id , 'first_name' , getValue ( 'first_name' )) caseService . setParticipantData ( participantRole1 . id , 'last_name' , getValue ( 'last_name' )) example code Set data on participant whom this Event Form is assigned to using the global participant object that is active when an EventForm is open that has an assigned Participant... caseService . setParticipantData ( participant . id , 'first_name' , getValue ( 'first_name' )) caseService . setParticipantData ( participant . id , 'last_name' , getValue ( 'last_name' )) example code Find a participant by role and set some data from the current form... const participantRole1 = caseService . case . participants . find ( participant => paritipcant . caseRoleId === 'role-1' ) caseService . setParticipantData ( participantRole1 . id , 'participant_id' , getValue ( 'participant_id' )) caseService . setParticipantData ( participantRole1 . id , 'first_name' , getValue ( 'first_name' )) caseService . setParticipantData ( participantRole1 . id , 'last_name' , getValue ( 'last_name' )) getParticipantData \u00b6 Get some data for a specific Participant. Parameters Param Type Description participantId string ID of the participant variableName string Variable name you are getting Returns This function returns the value of the variable you requested which may consist of any data type you set it to. Example Get participant data of the form whom is assigned to the current form... caseService . getParticipantData ( participant . id , 'first_name' ) example code","title":"API: caseService"},{"location":"editor/advanced-form-programming/case-service-api/#case-apis","text":"","title":"Case APIs"},{"location":"editor/advanced-form-programming/case-service-api/#changelocation","text":"Change the location of a Case. This also changes the location information on all related Form Responses.","title":"changeLocation"},{"location":"editor/advanced-form-programming/case-service-api/#setvariable","text":"Set a Case level variable in a Case.","title":"setVariable"},{"location":"editor/advanced-form-programming/case-service-api/#getvariable","text":"Get a Case level variable in a Case.","title":"getVariable"},{"location":"editor/advanced-form-programming/case-service-api/#case-event-api","text":"","title":"Case Event API"},{"location":"editor/advanced-form-programming/case-service-api/#createevent","text":"Dynamically create an instance of an event (defined in the case json) and add it to the current case","title":"createEvent"},{"location":"editor/advanced-form-programming/case-service-api/#seteventestimatedday","text":"Set the estimated day of expected date completion. This is used by the calendar for displaying events. TODO: Improve Description","title":"setEventEstimatedDay"},{"location":"editor/advanced-form-programming/case-service-api/#seteventscheduledday","text":"Set the scheduled day of expected date completion. This is used by the calendar for displaying events. TODO: Improve Description","title":"setEventScheduledDay"},{"location":"editor/advanced-form-programming/case-service-api/#seteventwindow","text":"Set the expected event completion. TODO: Improve Description","title":"setEventWindow"},{"location":"editor/advanced-form-programming/case-service-api/#seteventoccurredon","text":"Set the date in which the event occurred TODO: Improve Description","title":"setEventOccurredOn"},{"location":"editor/advanced-form-programming/case-service-api/#disableeventdefinition","text":"Prevent creation of an via the new event menu.","title":"disableEventDefinition"},{"location":"editor/advanced-form-programming/case-service-api/#event-form-api","text":"","title":"Event Form API"},{"location":"editor/advanced-form-programming/case-service-api/#createeventform","text":"Dynamically create an instance of an event form (defined in the case json) and add it to the current Case.","title":"createEventForm"},{"location":"editor/advanced-form-programming/case-service-api/#deleteeventform","text":"Dynamically delete an instance of an event form.","title":"deleteEventForm"},{"location":"editor/advanced-form-programming/case-service-api/#seteventformdata","text":"Set a custom piece of data for an event form. Note this is a separate data collection than the data on the Form Response related to the Event Form.","title":"setEventFormData"},{"location":"editor/advanced-form-programming/case-service-api/#geteventformdata","text":"Get a custom piece of data for an event form. Note this is a separate data collection than the data on the Form Response related to the Event Form.","title":"getEventFormData"},{"location":"editor/advanced-form-programming/case-service-api/#markeventformrequired","text":"Mark an Even Form instance as being required. You might do this on a form that was optional, but it has come to lite that it must be filled out before the event is marked as complete.","title":"markEventFormRequired"},{"location":"editor/advanced-form-programming/case-service-api/#markeventformnotrequired","text":"Mark and event form as not required.","title":"markEventFormNotRequired"},{"location":"editor/advanced-form-programming/case-service-api/#participant-api","text":"","title":"Participant API"},{"location":"editor/advanced-form-programming/case-service-api/#createparticipant","text":"Create a participant in a Case.","title":"createParticipant"},{"location":"editor/advanced-form-programming/case-service-api/#setparticipantdata","text":"Set some data for a specific Participant.","title":"setParticipantData"},{"location":"editor/advanced-form-programming/case-service-api/#getparticipantdata","text":"Get some data for a specific Participant.","title":"getParticipantData"},{"location":"editor/advanced-form-programming/local-content-development/","text":"Local content development with Tangerine Preview \u00b6 Tangerine Preview is a command line tool for previewing the Tangerine content you are working on your local computer. It work on Windows, Mac, and Linux. Install \u00b6 Before you install tangerine-preview , make sure to install node.js . Install the Tangerine Preview tool by opening a command prompt and running the following command. npm install -g tangerine-preview Preview your content \u00b6 Open a command prompt, change directory to your content that you would like to preview, then run the tangerine-preview command. cd your-project tangerine-preview Lastly, open Google Chrome to http://localhost:3000 As you make content changes, they will be synced to the app. Reload your web browser and you'll see the changes. Update tangerine-preview \u00b6 When new releases come out for tangerine, tangerine-preview will also be updated. To update, open a command prompt and run the install command again. npm install -g tangerine-preview","title":"Local content development"},{"location":"editor/advanced-form-programming/local-content-development/#local-content-development-with-tangerine-preview","text":"Tangerine Preview is a command line tool for previewing the Tangerine content you are working on your local computer. It work on Windows, Mac, and Linux.","title":"Local content development with Tangerine Preview"},{"location":"editor/advanced-form-programming/local-content-development/#install","text":"Before you install tangerine-preview , make sure to install node.js . Install the Tangerine Preview tool by opening a command prompt and running the following command. npm install -g tangerine-preview","title":"Install"},{"location":"editor/advanced-form-programming/local-content-development/#preview-your-content","text":"Open a command prompt, change directory to your content that you would like to preview, then run the tangerine-preview command. cd your-project tangerine-preview Lastly, open Google Chrome to http://localhost:3000 As you make content changes, they will be synced to the app. Reload your web browser and you'll see the changes.","title":"Preview your content"},{"location":"editor/advanced-form-programming/local-content-development/#update-tangerine-preview","text":"When new releases come out for tangerine, tangerine-preview will also be updated. To update, open a command prompt and run the install command again. npm install -g tangerine-preview","title":"Update tangerine-preview"},{"location":"editor/case-module/","text":"Case Module \u00b6 Case Module allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. In order to create and find cases, you will need to configure the \"case-home\" as the \"homeUrl\" value in app-config.json . Configuring Cases \u00b6 Case Module allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. To configure cases, there are four files to modify. First add a reference to the new Case Definition in the case-definitions.json . Here is an example of a case-definitions.json file that references two Case Definitions. File: case-definitions.json [ { \"id\": \"case-definition-1\", \"name\": \"Case Definition 1\", \"src\": \"./assets/case-definition-1.json\" }, { \"id\": \"case-definition-2\", \"name\": \"Case Definition 2\", \"src\": \"./assets/case-definition-2.json\" } ] Then create the corresponding Case Definition file... File: case-definition-1.json { \"id\" : \"case-definition-1\" , \"formId\" : \"case-definition-1-manifest\" , \"name\" : \"Case Definition 1\" , \"description\" : \"Description...\" , \"startFormOnOpen\" : { \"eventId\" : \"event-definition-1\" , \"eventFormId\" : \"event-form-1\" }, \"eventDefinitions\" : [ { \"id\" : \"event-definition-1\" , \"name\" : \"Event Definition 1\" , \"description\" : \"Description...\" , \"repeatable\" : false , \"required\" : true , \"eventFormDefinitions\" : [ { \"id\" : \"event-form-definition-1\" , \"formId\" : \"form-1\" , \"name\" : \"Form 1\" , \"required\" : true , \"repeatable\" : false } ] } ] } Case Definition Templates \u00b6 As a Data Collector uses the Client App, they navigate a Case's hierarchy of Events and Forms. Almost every piece of information they see can be overriden to display custom variables and logic by using the Case Definition's templates. This section describes the templates available and what variables are available. Note that all templates are evaluated as Javascript Template Literals. There are many good tutorials online about how to use Javascipt Template Literals, here are a couple of Javascript Template Literals examples that we reference often for things like doing conditionals and loops. Schedule templateScheduleListItemIcon default: \"templateScheduleListItemIcon\": \"${caseEvent.status === 'CASE_EVENT_STATUS_COMPLETED' ? 'event_note' : 'event_available'}\" templateScheduleListItemPrimary default: \"templateScheduleListItemPrimary\": \"<span>${caseEventDefinition.name}</span> in Case ${caseService.case._id.substr(0,5)}\" templateScheduleListItemSecondary default: \"templateScheduleListItemSecondary\": \"<span>${caseInstance.label}</span>\" Variables available: - caseService : CaseService - caseDefinition : CaseDefinition - caseEventDefinition : CaseEventDefinition - caseInstance : Case - caseEvent : CaseEvent Debugging Case Definition Templates \u00b6 Configuring search \u00b6 The case references a Form in the formId property of the Case Definition. Make sure there is a form with that corresponding Form ID listed in forms.json with additional configuration for search. File: forms.json [ { \"id\" : \"case-definition-1-manifest\" , \"type\" : \"case\" , \"title\" : \"Case Definition 1 Manifest\" , \"description\" : \"Description...\" , \"listed\" : true , \"src\" : \"./assets/case-definition-1-manifest/form.html\" , \"searchSettings\" : { \"primaryTemplate\" : \"Participant ID: ${searchDoc.variables.participant_id}\" , \"shouldIndex\" : true , \"secondaryTemplate\" : \"Enrollment Date: ${searchDoc.variables.enrollment_date}, Case ID: ${searchDoc._id}\" , \"variablesToIndex\" : [ \"participant_id\" , \"enrollment_date\" ] } } ] The variables you list in variablesToIndex will now be available for searching on with the Tablet level search. To configure the QR code search on Tablets, in your app-config.json , there is a \"barcodeSearchMapFunction\" property. This is a map function for receiving the value of the Search Scan for you to parse out and return the value that should be used for search. A data variable is passed in for you to parse, and the return value is what ends up in the search bar as a text search. Example: if ((JSON.parse(data)).participant_id) { return (JSON.parse(data)).participant_id } else { throw 'Incorrect format' } Configuring two-way sync \u00b6 Because you may need to share cases across devices, configuring two-way sync may be necessary. See the Two-way Sync Documentation for more details. Note that you sync Form Responses, and it's the IDs of that you'll want to sync in the \"formId\" of the Case Definition in order to sync cases. Configuring the Schedule \u00b6 One of the two tabs that Data Collectors see when they log into Tangerine is a \"Schedule\" tab. This schedule will show Case Event's on days where they are have an estimated day, scheduled day, and/or occurred on day. You can set these three dates on an event using the following APIs. caseService.setEventEstimatedDay(idOfEvent, timeInUnixMilliseconds) caseService.setEventOccurredOn(idOfEvent, timeInUnixMilliseconds) caseService.setEventScheduledDay(idOfEvent, timeInUnixMilliseconds)","title":"Case Module"},{"location":"editor/case-module/#case-module","text":"Case Module allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. In order to create and find cases, you will need to configure the \"case-home\" as the \"homeUrl\" value in app-config.json .","title":"Case Module"},{"location":"editor/case-module/#configuring-cases","text":"Case Module allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. To configure cases, there are four files to modify. First add a reference to the new Case Definition in the case-definitions.json . Here is an example of a case-definitions.json file that references two Case Definitions. File: case-definitions.json [ { \"id\": \"case-definition-1\", \"name\": \"Case Definition 1\", \"src\": \"./assets/case-definition-1.json\" }, { \"id\": \"case-definition-2\", \"name\": \"Case Definition 2\", \"src\": \"./assets/case-definition-2.json\" } ] Then create the corresponding Case Definition file... File: case-definition-1.json { \"id\" : \"case-definition-1\" , \"formId\" : \"case-definition-1-manifest\" , \"name\" : \"Case Definition 1\" , \"description\" : \"Description...\" , \"startFormOnOpen\" : { \"eventId\" : \"event-definition-1\" , \"eventFormId\" : \"event-form-1\" }, \"eventDefinitions\" : [ { \"id\" : \"event-definition-1\" , \"name\" : \"Event Definition 1\" , \"description\" : \"Description...\" , \"repeatable\" : false , \"required\" : true , \"eventFormDefinitions\" : [ { \"id\" : \"event-form-definition-1\" , \"formId\" : \"form-1\" , \"name\" : \"Form 1\" , \"required\" : true , \"repeatable\" : false } ] } ] }","title":"Configuring Cases"},{"location":"editor/case-module/#case-definition-templates","text":"As a Data Collector uses the Client App, they navigate a Case's hierarchy of Events and Forms. Almost every piece of information they see can be overriden to display custom variables and logic by using the Case Definition's templates. This section describes the templates available and what variables are available. Note that all templates are evaluated as Javascript Template Literals. There are many good tutorials online about how to use Javascipt Template Literals, here are a couple of Javascript Template Literals examples that we reference often for things like doing conditionals and loops.","title":"Case Definition Templates"},{"location":"editor/case-module/#debugging-case-definition-templates","text":"","title":"Debugging Case Definition Templates"},{"location":"editor/case-module/#configuring-search","text":"The case references a Form in the formId property of the Case Definition. Make sure there is a form with that corresponding Form ID listed in forms.json with additional configuration for search. File: forms.json [ { \"id\" : \"case-definition-1-manifest\" , \"type\" : \"case\" , \"title\" : \"Case Definition 1 Manifest\" , \"description\" : \"Description...\" , \"listed\" : true , \"src\" : \"./assets/case-definition-1-manifest/form.html\" , \"searchSettings\" : { \"primaryTemplate\" : \"Participant ID: ${searchDoc.variables.participant_id}\" , \"shouldIndex\" : true , \"secondaryTemplate\" : \"Enrollment Date: ${searchDoc.variables.enrollment_date}, Case ID: ${searchDoc._id}\" , \"variablesToIndex\" : [ \"participant_id\" , \"enrollment_date\" ] } } ] The variables you list in variablesToIndex will now be available for searching on with the Tablet level search. To configure the QR code search on Tablets, in your app-config.json , there is a \"barcodeSearchMapFunction\" property. This is a map function for receiving the value of the Search Scan for you to parse out and return the value that should be used for search. A data variable is passed in for you to parse, and the return value is what ends up in the search bar as a text search. Example: if ((JSON.parse(data)).participant_id) { return (JSON.parse(data)).participant_id } else { throw 'Incorrect format' }","title":"Configuring search"},{"location":"editor/case-module/#configuring-two-way-sync","text":"Because you may need to share cases across devices, configuring two-way sync may be necessary. See the Two-way Sync Documentation for more details. Note that you sync Form Responses, and it's the IDs of that you'll want to sync in the \"formId\" of the Case Definition in order to sync cases.","title":"Configuring two-way sync"},{"location":"editor/case-module/#configuring-the-schedule","text":"One of the two tabs that Data Collectors see when they log into Tangerine is a \"Schedule\" tab. This schedule will show Case Event's on days where they are have an estimated day, scheduled day, and/or occurred on day. You can set these three dates on an event using the following APIs. caseService.setEventEstimatedDay(idOfEvent, timeInUnixMilliseconds) caseService.setEventOccurredOn(idOfEvent, timeInUnixMilliseconds) caseService.setEventScheduledDay(idOfEvent, timeInUnixMilliseconds)","title":"Configuring the Schedule"},{"location":"editor/case-module/custom-case-reports/","text":"Custom Case Reports \u00b6 The Custom Case Reports features enables the developer to create custom reports or a dashboard. This feature is accessible using a tab when viewing a case. To enable this feature, add showCaseReports: true to the group's app-config.json. Demo and description of this feature's assets \u00b6 This demo is based on the case module content set ; therefore, you might want to install that in order to follow the demo. There are three files used for custom reports, which must be placed in the group directory. queries.js - has the map/reduce queries used to index the docs. Note that the sample queries.js file has a function called registrationResults with a map and a reduce query. The map function is explained above; the reduce uses Couchdb's built-in _sum keyword. The queries in this doc are installed when the app is installed. Support for updating these queries is not yet implemented. reports.js - runs the queries and fills out the content for reports.html. The reduce function is used to provide the counts in report2. The options in report2 options = {reduce: true} activate the reduce function. reports.html - provides a basic html frame for the data. Helper functions \u00b6 When writing queries or organizing the javascript logic to fetch the results, use the globally-exposed T.form.Get function to get the value of inputs; this will save you from having to wrote deeply nested code ( doc.items[0].inputs[3].value[0].value ) T.form.Get(doc, 'consent') Other helper function are available: T.user: userService T.case: caseService","title":"Custom Case Reports"},{"location":"editor/case-module/custom-case-reports/#custom-case-reports","text":"The Custom Case Reports features enables the developer to create custom reports or a dashboard. This feature is accessible using a tab when viewing a case. To enable this feature, add showCaseReports: true to the group's app-config.json.","title":"Custom Case Reports"},{"location":"editor/case-module/custom-case-reports/#demo-and-description-of-this-features-assets","text":"This demo is based on the case module content set ; therefore, you might want to install that in order to follow the demo. There are three files used for custom reports, which must be placed in the group directory. queries.js - has the map/reduce queries used to index the docs. Note that the sample queries.js file has a function called registrationResults with a map and a reduce query. The map function is explained above; the reduce uses Couchdb's built-in _sum keyword. The queries in this doc are installed when the app is installed. Support for updating these queries is not yet implemented. reports.js - runs the queries and fills out the content for reports.html. The reduce function is used to provide the counts in report2. The options in report2 options = {reduce: true} activate the reduce function. reports.html - provides a basic html frame for the data.","title":"Demo and description of this feature's assets"},{"location":"editor/case-module/custom-case-reports/#helper-functions","text":"When writing queries or organizing the javascript logic to fetch the results, use the globally-exposed T.form.Get function to get the value of inputs; this will save you from having to wrote deeply nested code ( doc.items[0].inputs[3].value[0].value ) T.form.Get(doc, 'consent') Other helper function are available: T.user: userService T.case: caseService","title":"Helper functions"},{"location":"editor/case-module/developing-custom-reports/","text":"Develop custom reports for Client \u00b6 LitElement Documentation LitElement Examples Web Components","title":"Develop custom reports for Client"},{"location":"editor/case-module/developing-custom-reports/#develop-custom-reports-for-client","text":"LitElement Documentation LitElement Examples Web Components","title":"Develop custom reports for Client"},{"location":"editor/case-module/how-to-create-a-workflow-for-changing-case-location/","text":"How to create a workflow for changing a Case's location \u00b6 Using a combination of a <tangy-location> input on a form and some logic in the same form's on-submit hook, you can empower users to reassign a Case to a new location. In the Case Module's Content Set we have a \"Change Location of Case\" Case Event Definition, a \"Change Location of Case\" Event Form, and corresponding \"Change Location of Case\" Form. We'll use that Content Set as our example. The form could be in any event, or even it's own event as it is in the Case Module content set. The important part is in the form you place the <tangy-location> for selecting a new locatoin to assign the case to. The following shows the markup of a form that uses the caseService.changeLocation() API to change the location of a Case given the value selected in the <tangy-location> input. < tangy-form title = \"Change location of case\" id = \"change-location-of-case\" on-submit = \" caseService.changeLocation(inputs.new_location_assignment.value) \" > < tangy-form-item id = \"item1\" > < tangy-location label = \"Choose a location to assign this case to.\" name = \"new_location_assignment\" required ></ tangy-location > </ tangy-form-item > </ tangy-form >","title":"How to create a workflow for changing a Case's location"},{"location":"editor/case-module/how-to-create-a-workflow-for-changing-case-location/#how-to-create-a-workflow-for-changing-a-cases-location","text":"Using a combination of a <tangy-location> input on a form and some logic in the same form's on-submit hook, you can empower users to reassign a Case to a new location. In the Case Module's Content Set we have a \"Change Location of Case\" Case Event Definition, a \"Change Location of Case\" Event Form, and corresponding \"Change Location of Case\" Form. We'll use that Content Set as our example. The form could be in any event, or even it's own event as it is in the Case Module content set. The important part is in the form you place the <tangy-location> for selecting a new locatoin to assign the case to. The following shows the markup of a form that uses the caseService.changeLocation() API to change the location of a Case given the value selected in the <tangy-location> input. < tangy-form title = \"Change location of case\" id = \"change-location-of-case\" on-submit = \" caseService.changeLocation(inputs.new_location_assignment.value) \" > < tangy-form-item id = \"item1\" > < tangy-location label = \"Choose a location to assign this case to.\" name = \"new_location_assignment\" required ></ tangy-location > </ tangy-form-item > </ tangy-form >","title":"How to create a workflow for changing a Case's location"},{"location":"editor/form-developers-cookbook/","text":"The Tangerine Form Editor's Cookbook \u00b6 Examples of various recipes for Tangerine Forms collected throughout the years. To create your own example, remix the example on glitch.com. Skip a question based on input in another question \u00b6 In the following example we ask an additional question about tangerines if the user indicates that they do like tangerines. Run example - Open Editor - View Code Skip sections based on input \u00b6 In the following example, wether or not you answer yes or no to the question, you will end up on a different item. Run example - Open Editor - View Code Valid by number of decimal points \u00b6 In the following example, we validate user input by number of decimal points. Run example - Open Editor - View Code Valid if greater or less than other input \u00b6 Run example - Open Editor - View Code Allowed date range based on today \u00b6 Run example - Open Editor - View Code Flag choice as discrepancy and/or warning and show or hide content depending \u00b6 Run example - Open Editor - View Code Indicate a mutually exclusive option in a checkboxes group such as \"None of the above\" \u00b6 In the following example when you make a selection of a fruit and then choose one of the mutually exclusive options, your prior selections will be deselected. Run example - Open Editor - View Code Capture and show local date and time \u00b6 Sometimes we want to show the user the local date and time to ensure their time settings are correct. Run example - Open Editor - View Code Show a timer in an item \u00b6 Let's say you want to show a timer of how long someone has been on a single item. This calculates the time since item open and displays number of seconds since then in a tangy-box. Run example - Open Editor - View Code Capture the time between two items \u00b6 Sometimes we want to know how much time passed between two points in a form. This example captures, the start_time variable on the first item, then end_time on the last item. Lastly it calculates the length of time. Run example - Open Editor - View Code Hard checks vs. soft checks \u00b6 A \"hard check\" using \"valid if\" will not allow you to proceed. However a \"soft check\" using \"warn if\" will allow you to proceed after confirming. Run example - Open Editor - View Code Set selected value in radio buttons \u00b6 In the following example we set the value of a <tangy-radio-buttons> . Run example - Open Editor - View Code Dynamically prevent proceeding to next section \u00b6 In the following example hide the next button given the value of some user input. Run example - Open Editor - View Code","title":"The Tangerine Form Editor's Cookbook"},{"location":"editor/form-developers-cookbook/#the-tangerine-form-editors-cookbook","text":"Examples of various recipes for Tangerine Forms collected throughout the years. To create your own example, remix the example on glitch.com.","title":"The Tangerine Form Editor's Cookbook"},{"location":"editor/form-developers-cookbook/#skip-a-question-based-on-input-in-another-question","text":"In the following example we ask an additional question about tangerines if the user indicates that they do like tangerines. Run example - Open Editor - View Code","title":"Skip a question based on input in another question"},{"location":"editor/form-developers-cookbook/#skip-sections-based-on-input","text":"In the following example, wether or not you answer yes or no to the question, you will end up on a different item. Run example - Open Editor - View Code","title":"Skip sections based on input"},{"location":"editor/form-developers-cookbook/#valid-by-number-of-decimal-points","text":"In the following example, we validate user input by number of decimal points. Run example - Open Editor - View Code","title":"Valid by number of decimal points"},{"location":"editor/form-developers-cookbook/#valid-if-greater-or-less-than-other-input","text":"Run example - Open Editor - View Code","title":"Valid if greater or less than other input"},{"location":"editor/form-developers-cookbook/#allowed-date-range-based-on-today","text":"Run example - Open Editor - View Code","title":"Allowed date range based on today"},{"location":"editor/form-developers-cookbook/#flag-choice-as-discrepancy-andor-warning-and-show-or-hide-content-depending","text":"Run example - Open Editor - View Code","title":"Flag choice as discrepancy and/or warning and show or hide content depending"},{"location":"editor/form-developers-cookbook/#indicate-a-mutually-exclusive-option-in-a-checkboxes-group-such-as-none-of-the-above","text":"In the following example when you make a selection of a fruit and then choose one of the mutually exclusive options, your prior selections will be deselected. Run example - Open Editor - View Code","title":"Indicate a mutually exclusive option in a checkboxes group such as \"None of the above\""},{"location":"editor/form-developers-cookbook/#capture-and-show-local-date-and-time","text":"Sometimes we want to show the user the local date and time to ensure their time settings are correct. Run example - Open Editor - View Code","title":"Capture and show local date and time"},{"location":"editor/form-developers-cookbook/#show-a-timer-in-an-item","text":"Let's say you want to show a timer of how long someone has been on a single item. This calculates the time since item open and displays number of seconds since then in a tangy-box. Run example - Open Editor - View Code","title":"Show a timer in an item"},{"location":"editor/form-developers-cookbook/#capture-the-time-between-two-items","text":"Sometimes we want to know how much time passed between two points in a form. This example captures, the start_time variable on the first item, then end_time on the last item. Lastly it calculates the length of time. Run example - Open Editor - View Code","title":"Capture the time between two items"},{"location":"editor/form-developers-cookbook/#hard-checks-vs-soft-checks","text":"A \"hard check\" using \"valid if\" will not allow you to proceed. However a \"soft check\" using \"warn if\" will allow you to proceed after confirming. Run example - Open Editor - View Code","title":"Hard checks vs. soft checks"},{"location":"editor/form-developers-cookbook/#set-selected-value-in-radio-buttons","text":"In the following example we set the value of a <tangy-radio-buttons> . Run example - Open Editor - View Code","title":"Set selected value in radio buttons"},{"location":"editor/form-developers-cookbook/#dynamically-prevent-proceeding-to-next-section","text":"In the following example hide the next button given the value of some user input. Run example - Open Editor - View Code","title":"Dynamically prevent proceeding to next section"},{"location":"editor/project_managment/class/","text":"Class module \u00b6 Feedback \u00b6 Feedback for each form item (subtask) can be entered using the Settings editor. Feedback is displayed if available on the Student grouping report. The following fields are available: - ${feedback.example} - ${feedback.skill} - ${feedback.assignment} The following code can be used to format feedback on the Student Grouping report: <div class='feedback-assignment'>${feedback.assignment}</div> <div class='feedback-example'>${feedback.example}.</div> Note that the use of these formatting commands are optional. Here is a sample feedback message that uses this formatting: These students are doing really well. Consider framing your feedback to these student as follows: <div class='feedback-example'>${feedback.example}.</div> Reflect on these students results: why do you think did these students were particularly successful in ${feedback.skill}. Was there a specific ${feedback.skill} strategy or activity you used? Did they already know this content? Is there another strategy or activity they could do to extend their ${feedback.skill} skills? Consider giving these students supplementary story: <div class='feedback-assignment'>${feedback.assignment}</div> to read and make 3-5 inferential questions for them to answer. You may also consider engaging these students as peer mentors to others as these other students do additional practice. Scoring \u00b6 There are 3 options for scoring in Class: - Using a TANGY-TIMED grid - Using a hidden formId+_score field to store the calculated score value when the form is submitted using the on-change javascript - Using a score calculated at report run-time. The dashboard.service populaceTransformedResult function loops through the inputs; for each item type, it calculates the value, score, and max. It also keeps a running tally of the sum of all max values (totalMax). Here are the default rules for each input type: * TANGY-INPUT: * value: value field * score: value field * max: max field * TANGY-RADIO-BUTTONS: * value: loops through the options and uses the value from the non-empty option * score: value * max: Use value of the highest option. * TANGY-CHECKBOXES: * value: loops through the options and uses the value from the non-empty option * score: value * max: Use value of the highest option. For a TANGY-TIMED input, once the value and score have been calculated for each item and populated into an answeredQuestions array, we loop through this array and calculate aggregates for the tangy-form-item. TANGY-TIMED: value: score: totalCorrect For tangy form items that use a _score field: Calculate the totalAnswers by subtracting 1 from the item.inputs.length (to account for the _score field) Use score for totalCorrect and totalAnswers for maxValueAnswer, unless the max value was assigned earlier. Finally, there is support for calculating the score at report-time by looping through answeredQuestions and summing the score and max values.","title":"Class module"},{"location":"editor/project_managment/class/#class-module","text":"","title":"Class module"},{"location":"editor/project_managment/class/#feedback","text":"Feedback for each form item (subtask) can be entered using the Settings editor. Feedback is displayed if available on the Student grouping report. The following fields are available: - ${feedback.example} - ${feedback.skill} - ${feedback.assignment} The following code can be used to format feedback on the Student Grouping report: <div class='feedback-assignment'>${feedback.assignment}</div> <div class='feedback-example'>${feedback.example}.</div> Note that the use of these formatting commands are optional. Here is a sample feedback message that uses this formatting: These students are doing really well. Consider framing your feedback to these student as follows: <div class='feedback-example'>${feedback.example}.</div> Reflect on these students results: why do you think did these students were particularly successful in ${feedback.skill}. Was there a specific ${feedback.skill} strategy or activity you used? Did they already know this content? Is there another strategy or activity they could do to extend their ${feedback.skill} skills? Consider giving these students supplementary story: <div class='feedback-assignment'>${feedback.assignment}</div> to read and make 3-5 inferential questions for them to answer. You may also consider engaging these students as peer mentors to others as these other students do additional practice.","title":"Feedback"},{"location":"editor/project_managment/class/#scoring","text":"There are 3 options for scoring in Class: - Using a TANGY-TIMED grid - Using a hidden formId+_score field to store the calculated score value when the form is submitted using the on-change javascript - Using a score calculated at report run-time. The dashboard.service populaceTransformedResult function loops through the inputs; for each item type, it calculates the value, score, and max. It also keeps a running tally of the sum of all max values (totalMax). Here are the default rules for each input type: * TANGY-INPUT: * value: value field * score: value field * max: max field * TANGY-RADIO-BUTTONS: * value: loops through the options and uses the value from the non-empty option * score: value * max: Use value of the highest option. * TANGY-CHECKBOXES: * value: loops through the options and uses the value from the non-empty option * score: value * max: Use value of the highest option. For a TANGY-TIMED input, once the value and score have been calculated for each item and populated into an answeredQuestions array, we loop through this array and calculate aggregates for the tangy-form-item. TANGY-TIMED: value: score: totalCorrect For tangy form items that use a _score field: Calculate the totalAnswers by subtracting 1 from the item.inputs.length (to account for the _score field) Use score for totalCorrect and totalAnswers for maxValueAnswer, unless the max value was assigned earlier. Finally, there is support for calculating the score at report-time by looping through answeredQuestions and summing the score and max values.","title":"Scoring"},{"location":"editor/project_managment/configuration/","text":"Configuration \u00b6 App Configuration \u00b6 app-config.json should have the following properties defined. homeUrl:string The default route to load when no route is specified. Think of this as the root url securityPolicy:string[] . This is an array of all the combinations of the security policies to be enforced in the app. NOTE: noPassword and password are mutually exclusive. Only one should be provided and not both. password noPassword associateUserProfileMode : This is the mode that determines where a user profiles comes from after a user has created an account on a device. Note, a \"User\" is tied together across devices by a single \"User Profile\". The account on the device is simply a security mechanism for using the profiles. remote : Selecting this will result in a user being promted to enter a \"code\" after they register an account. This code is the last 6 characters of their User Profile ID. Typically a Group Admin would create a User Profile doc on the server and then send this code to the person associated with the User Profile. When the user enters this code on the tablet, the tablet will reach out over the Internet and download the corresponding User Profile and any content associated with that User Profile. Because all content is downloaded for that user, it can also be used as a way to fully restore a user's data on a new or recovered tablet. However note that this data is mode is not compatible with using CouchDB sync settings on any form definitions' sync settings. local-new : This option allows users who register an Account on a tablet to create a new User Profile. This is also the default if no option is selected. local-exists : This option is useful when using devices are set up using the \"Centrally Managed Device\" setup which would result in a facility's User Profiles already being on that device. When this option is selected, a drop down of unclaimed user profiles appears when accounts are being registered.","title":"Configuration"},{"location":"editor/project_managment/configuration/#configuration","text":"","title":"Configuration"},{"location":"editor/project_managment/configuration/#app-configuration","text":"app-config.json should have the following properties defined. homeUrl:string The default route to load when no route is specified. Think of this as the root url securityPolicy:string[] . This is an array of all the combinations of the security policies to be enforced in the app. NOTE: noPassword and password are mutually exclusive. Only one should be provided and not both. password noPassword associateUserProfileMode : This is the mode that determines where a user profiles comes from after a user has created an account on a device. Note, a \"User\" is tied together across devices by a single \"User Profile\". The account on the device is simply a security mechanism for using the profiles. remote : Selecting this will result in a user being promted to enter a \"code\" after they register an account. This code is the last 6 characters of their User Profile ID. Typically a Group Admin would create a User Profile doc on the server and then send this code to the person associated with the User Profile. When the user enters this code on the tablet, the tablet will reach out over the Internet and download the corresponding User Profile and any content associated with that User Profile. Because all content is downloaded for that user, it can also be used as a way to fully restore a user's data on a new or recovered tablet. However note that this data is mode is not compatible with using CouchDB sync settings on any form definitions' sync settings. local-new : This option allows users who register an Account on a tablet to create a new User Profile. This is also the default if no option is selected. local-exists : This option is useful when using devices are set up using the \"Centrally Managed Device\" setup which would result in a facility's User Profiles already being on that device. When this option is selected, a drop down of unclaimed user profiles appears when accounts are being registered.","title":"App Configuration"},{"location":"editor/project_managment/editor-guide/","text":"Releasing updates to existing forms \u00b6 Gotchas \u00b6 If you remove an input from an item or move that input to another item, when a user resumes a form response that was created with the prior version, content for that input will appear to have dissappeared. If you add remove an item from a form, when users resume form responses created on with the prior version, it will appear they have lost data since the item has been removed.","title":"Releasing updates to existing forms"},{"location":"editor/project_managment/editor-guide/#releasing-updates-to-existing-forms","text":"","title":"Releasing updates to existing forms"},{"location":"editor/project_managment/editor-guide/#gotchas","text":"If you remove an input from an item or move that input to another item, when a user resumes a form response that was created with the prior version, content for that input will appear to have dissappeared. If you add remove an item from a form, when users resume form responses created on with the prior version, it will appear they have lost data since the item has been removed.","title":"Gotchas"},{"location":"editor/project_managment/feature-two-way-sync/","text":"Feature: Two Way Sync (experimental) \u00b6 This feature when enabled allows some or all of forms responses to be synced between devices. The form responses that are synced depend on which forms are configured for sync and limited to a grouping by the \"location\" field in that users' profile. For example: An installation has two Forms, Form A and Form B. Only Form A is configured to sync. User A who has \"facility 1\" assigned to them in their user profile creates a form response for Form A and Form B then initiates a sync to find that two form responses have been pushed up. User B has \"facility 1\" assigned to them in their user profile and initiates a sync to find they pulled down one form response for Form A that originated on User A's device. If User B modifies this form response, it will be pushed on the next sync and then later User A would pull down the change. Let's say there is a User C who is assigned to \"facility 2\" in their user profile. When they initiate a sync, they will not receive any form responses from the server because the server only has form responses from User A who is assigned to \"facility 1\". Configuration \u00b6 @TODO Merge conflicts \u00b6 When syncing, there may be cases where two tablets may both modify a form response and then try to sync. This will cause a merge conflict and will be flagged and listed as a merge conflict on the device. Currently the only way to resolve this merge conflict is manually on the server using the Futon database interface. When conflicts are resolved, their resolution will replicate to the tablets on the next sync.","title":"Feature: Two Way Sync (experimental)"},{"location":"editor/project_managment/feature-two-way-sync/#feature-two-way-sync-experimental","text":"This feature when enabled allows some or all of forms responses to be synced between devices. The form responses that are synced depend on which forms are configured for sync and limited to a grouping by the \"location\" field in that users' profile. For example: An installation has two Forms, Form A and Form B. Only Form A is configured to sync. User A who has \"facility 1\" assigned to them in their user profile creates a form response for Form A and Form B then initiates a sync to find that two form responses have been pushed up. User B has \"facility 1\" assigned to them in their user profile and initiates a sync to find they pulled down one form response for Form A that originated on User A's device. If User B modifies this form response, it will be pushed on the next sync and then later User A would pull down the change. Let's say there is a User C who is assigned to \"facility 2\" in their user profile. When they initiate a sync, they will not receive any form responses from the server because the server only has form responses from User A who is assigned to \"facility 1\".","title":"Feature: Two Way Sync (experimental)"},{"location":"editor/project_managment/feature-two-way-sync/#configuration","text":"@TODO","title":"Configuration"},{"location":"editor/project_managment/feature-two-way-sync/#merge-conflicts","text":"When syncing, there may be cases where two tablets may both modify a form response and then try to sync. This will cause a merge conflict and will be flagged and listed as a merge conflict on the device. Currently the only way to resolve this merge conflict is manually on the server using the Futon database interface. When conflicts are resolved, their resolution will replicate to the tablets on the next sync.","title":"Merge conflicts"},{"location":"editor/project_managment/project_admin/","text":"Project Managment Overview \u00b6 How do you manage a project in Tangerine? What is a group? Why do you need a group? Creating a group What is a role in Tangerine? Creating roles How to create new users and add them to a group? How do you manage users? Mobile Device Use \u00b6 What devices will Tangerine work with? How do you manage devices? How to manage Tangerine Updates? Android Installation Web Browser Installation Tangerine Installation Decision Tree Registration and Login Administering Instruments Resuming Instruments Syncing Data Location Data Management Filter location data based on the user\u2019s profile location Import a location list Location list sample file with IDs","title":"Project Managment Overview"},{"location":"editor/project_managment/project_admin/#project-managment-overview","text":"How do you manage a project in Tangerine? What is a group? Why do you need a group? Creating a group What is a role in Tangerine? Creating roles How to create new users and add them to a group? How do you manage users?","title":"Project Managment Overview"},{"location":"editor/project_managment/project_admin/#mobile-device-use","text":"What devices will Tangerine work with? How do you manage devices? How to manage Tangerine Updates? Android Installation Web Browser Installation Tangerine Installation Decision Tree Registration and Login Administering Instruments Resuming Instruments Syncing Data Location Data Management Filter location data based on the user\u2019s profile location Import a location list Location list sample file with IDs","title":"Mobile Device Use"},{"location":"editor/project_managment/case-module/case-data-model/","text":"Case Management Data Model \u00b6 Case Entities and Relationships: \u00b6 Entities: Participant, Case, CaseEvent, EventForm, FormResponse Relationships: A Case is related to many Participants. A Case is related to many CaseEvents. A CaseEvent is related to many EventForms. An EventForm is related to one FormResponse. An EventForm is related to one Participant. Then there are definition Entities that are not in the data: Entities: ParticipantDefinition, CaseDefinition, CaseEventDefinition, EventFormDefinition, FormDefinition How the Case Entities and Relationships are expressed in Tangerine \u00b6 A typical Tangerine Case will feature: - one document (type = case) that has all of the Case-related meta-data mentioned below, and - multiple documents with forms data. These forms are linked by formResponseId in the case's eventForms array. There is not a 1-to-1 mapping between Tangerine entities and data persisted to the server. Records are saved in Tangerine as a TangyFormResponse doc, identified by \"collection\": \"TangyFormResponse\" in the Couchdb document. A TangyFormResponse is a very generic container for data; it does not by default manage any of its relationships. Most of the Case-related entities are saved in a single TangyFormResponse as \"type\": \"case\" and explicitly manages these relationships inside the eventForms array: { \"_id\" : \"8744ff38-4c3e-487d-814d-ddcb916a41d5\" , \"collection\" : \"TangyFormResponse\" , \"type\" : \"case\" , \"eventForms\" : [ { \"id\" : \"c7b6ee21-793a-11ea-9144-710703689c79\" , \"complete\" : true , \"caseId\" : \"c7b23330-793a-11ea-9144-710703689c79\" , \"participantId\" : \"\" , \"caseEventId\" : \"c7b6ee20-793a-11ea-9144-710703689c79\" , \"eventFormDefinitionId\" : \"enrollment-screening-form\" , \"formResponseId\" : \"c7b6ee22-793a-11ea-9144-710703689c79\" }, { \"id\" : \"c7b6ee23-793a-11ea-9144-710703689c79\" , \"complete\" : true , \"caseId\" : \"c7b23330-793a-11ea-9144-710703689c79\" , \"participantId\" : \"8a46e841-d80c-4038-857c-7ae43c1d42cf\" , \"caseEventId\" : \"c7b6ee20-793a-11ea-9144-710703689c79\" , \"eventFormDefinitionId\" : \"mnh-sociodemographic-form\" , \"formResponseId\" : \"c7b6ee24-793a-11ea-9144-710703689c79\" } ] } Any other documents related to a case save only form data and a small amount of meta-data. How relationships are mapped in an EventForm \u00b6 Let's first look at the Case hierarchy: A Case has a collection of CaseEvents . A CaseEvent has a collection of EventForms , which manage the relationship between : - the CaseEvent (stored as _id in the CaseEvent and caseId in the CaseEvent eventForms array ) - Participant (stored in the CaseEvent's particiaptns array and also linked via participantId in the CaseEvent's eventForms's array) - CaseEvent (stored as caseEventId in the CaseEvent's events array) - TangyFormResponse (stored as formResponseId and available externally in a separate document) class EventForm { id : string ; participantId : string complete : boolean = false caseId : string ; caseEventId : string ; eventFormDefinitionId : string ; formResponseId : string ; data ?: any ; constructor () { } } The formResponseId links to a TangyFormResponse, which contains the data filled out in a form.","title":"Case Management Data Model"},{"location":"editor/project_managment/case-module/case-data-model/#case-management-data-model","text":"","title":"Case Management Data Model"},{"location":"editor/project_managment/case-module/case-data-model/#case-entities-and-relationships","text":"Entities: Participant, Case, CaseEvent, EventForm, FormResponse Relationships: A Case is related to many Participants. A Case is related to many CaseEvents. A CaseEvent is related to many EventForms. An EventForm is related to one FormResponse. An EventForm is related to one Participant. Then there are definition Entities that are not in the data: Entities: ParticipantDefinition, CaseDefinition, CaseEventDefinition, EventFormDefinition, FormDefinition","title":"Case Entities and Relationships:"},{"location":"editor/project_managment/case-module/case-data-model/#how-the-case-entities-and-relationships-are-expressed-in-tangerine","text":"A typical Tangerine Case will feature: - one document (type = case) that has all of the Case-related meta-data mentioned below, and - multiple documents with forms data. These forms are linked by formResponseId in the case's eventForms array. There is not a 1-to-1 mapping between Tangerine entities and data persisted to the server. Records are saved in Tangerine as a TangyFormResponse doc, identified by \"collection\": \"TangyFormResponse\" in the Couchdb document. A TangyFormResponse is a very generic container for data; it does not by default manage any of its relationships. Most of the Case-related entities are saved in a single TangyFormResponse as \"type\": \"case\" and explicitly manages these relationships inside the eventForms array: { \"_id\" : \"8744ff38-4c3e-487d-814d-ddcb916a41d5\" , \"collection\" : \"TangyFormResponse\" , \"type\" : \"case\" , \"eventForms\" : [ { \"id\" : \"c7b6ee21-793a-11ea-9144-710703689c79\" , \"complete\" : true , \"caseId\" : \"c7b23330-793a-11ea-9144-710703689c79\" , \"participantId\" : \"\" , \"caseEventId\" : \"c7b6ee20-793a-11ea-9144-710703689c79\" , \"eventFormDefinitionId\" : \"enrollment-screening-form\" , \"formResponseId\" : \"c7b6ee22-793a-11ea-9144-710703689c79\" }, { \"id\" : \"c7b6ee23-793a-11ea-9144-710703689c79\" , \"complete\" : true , \"caseId\" : \"c7b23330-793a-11ea-9144-710703689c79\" , \"participantId\" : \"8a46e841-d80c-4038-857c-7ae43c1d42cf\" , \"caseEventId\" : \"c7b6ee20-793a-11ea-9144-710703689c79\" , \"eventFormDefinitionId\" : \"mnh-sociodemographic-form\" , \"formResponseId\" : \"c7b6ee24-793a-11ea-9144-710703689c79\" } ] } Any other documents related to a case save only form data and a small amount of meta-data.","title":"How the Case Entities and Relationships are expressed in Tangerine"},{"location":"editor/project_managment/case-module/case-data-model/#how-relationships-are-mapped-in-an-eventform","text":"Let's first look at the Case hierarchy: A Case has a collection of CaseEvents . A CaseEvent has a collection of EventForms , which manage the relationship between : - the CaseEvent (stored as _id in the CaseEvent and caseId in the CaseEvent eventForms array ) - Participant (stored in the CaseEvent's particiaptns array and also linked via participantId in the CaseEvent's eventForms's array) - CaseEvent (stored as caseEventId in the CaseEvent's events array) - TangyFormResponse (stored as formResponseId and available externally in a separate document) class EventForm { id : string ; participantId : string complete : boolean = false caseId : string ; caseEventId : string ; eventFormDefinitionId : string ; formResponseId : string ; data ?: any ; constructor () { } } The formResponseId links to a TangyFormResponse, which contains the data filled out in a form.","title":"How relationships are mapped in an EventForm"},{"location":"editor/project_managment/case-module/case-management-group/","text":"Case Management Group \u00b6 Case Management allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. In order to create and find cases, you will need to configure the \"case-home\" as the \"homeUrl\" value in app-config.json . Configuring Cases \u00b6 Case Management allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. To configure cases, there are four files to modify. First add a reference to the new Case Definition in the case-definitions.json . Here is an example of a case-definitions.json file that references two Case Definitions. File: case-definitions.json [ { \"id\": \"case-definition-1\", \"name\": \"Case Definition 1\", \"src\": \"./assets/case-definition-1.json\" }, { \"id\": \"case-definition-2\", \"name\": \"Case Definition 2\", \"src\": \"./assets/case-definition-2.json\" } ] Then create the corresponding Case Definition file... File: case-definition-1.json { \"id\" : \"case-definition-1\" , \"formId\" : \"case-definition-1-manifest\" , \"name\" : \"Case Definition 1\" , \"description\" : \"Description...\" , \"startFormOnOpen\" : { \"eventId\" : \"event-definition-1\" , \"eventFormId\" : \"event-form-1\" }, \"eventDefinitions\" : [ { \"id\" : \"event-definition-1\" , \"name\" : \"Event Definition 1\" , \"description\" : \"Description...\" , \"repeatable\" : false , \"required\" : true , \"eventFormDefinitions\" : [ { \"id\" : \"event-form-definition-1\" , \"formId\" : \"form-1\" , \"name\" : \"Form 1\" , \"required\" : true , \"repeatable\" : false } ] } ] } Case Definition Templates \u00b6 As a Data Collector uses the Client App, they navigate a Case's hierarchy of Events and Forms. Almost every piece of information they see can be overriden to display custom variables and logic by using the Case Definition's templates. This section describes the templates available and what variables are available. Note that all templates are evaluated as Javascript Template Literals. There are many good tutorials online about how to use Javascipt Template Literals, here are a couple of Javascript Template Literals examples that we reference often for things like doing conditionals and loops. Schedule templateScheduleListItemIcon default: \"templateScheduleListItemIcon\": \"${caseEvent.status === 'CASE_EVENT_STATUS_COMPLETED' ? 'event_note' : 'event_available'}\" templateScheduleListItemPrimary default: \"templateScheduleListItemPrimary\": \"<span>${caseEventDefinition.name}</span> in Case ${caseService.case._id.substr(0,5)}\" templateScheduleListItemSecondary default: \"templateScheduleListItemSecondary\": \"<span>${caseInstance.label}</span>\" Variables available: - caseService : CaseService - caseDefinition : CaseDefinition - caseEventDefinition : CaseEventDefinition - caseInstance : Case - caseEvent : CaseEvent Debugging Case Definition Templates \u00b6 Configuring search \u00b6 The case references a Form in the formId property of the Case Definition. Make sure there is a form with that corresponding Form ID listed in forms.json with additional configuration for search. File: forms.json [ { \"id\" : \"case-definition-1-manifest\" , \"type\" : \"case\" , \"title\" : \"Case Definition 1 Manifest\" , \"description\" : \"Description...\" , \"listed\" : true , \"src\" : \"./assets/case-definition-1-manifest/form.html\" , \"searchSettings\" : { \"primaryTemplate\" : \"Participant ID: ${searchDoc.variables.participant_id}\" , \"shouldIndex\" : true , \"secondaryTemplate\" : \"Enrollment Date: ${searchDoc.variables.enrollment_date}, Case ID: ${searchDoc._id}\" , \"variablesToIndex\" : [ \"participant_id\" , \"enrollment_date\" ] } } ] Configuring two-way sync \u00b6 Because you may need to share cases across devices, configuring two-way sync may be necessary. See the Two-way Sync Documentation for more details. Note that you sync Form Responses, and it's the IDs of that you'll want to sync in the \"formId\" of the Case Definition in order to sync cases. Configuring the Schedule \u00b6 One of the two tabs that Data Collectors see when they log into Tangerine is a \"Schedule\" tab. This schedule will show Case Event's on days where they are have an estimated day, scheduled day, and/or occurred on day. You can set these three dates on an event using the following APIs. caseService.setEventEstimatedDay(idOfEvent, timeInUnixMilliseconds) caseService.setEventOccurredOn(idOfEvent, timeInUnixMilliseconds) caseService.setEventScheduledDay(idOfEvent, timeInUnixMilliseconds)","title":"Case Management Group"},{"location":"editor/project_managment/case-module/case-management-group/#case-management-group","text":"Case Management allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. In order to create and find cases, you will need to configure the \"case-home\" as the \"homeUrl\" value in app-config.json .","title":"Case Management Group"},{"location":"editor/project_managment/case-module/case-management-group/#configuring-cases","text":"Case Management allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. To configure cases, there are four files to modify. First add a reference to the new Case Definition in the case-definitions.json . Here is an example of a case-definitions.json file that references two Case Definitions. File: case-definitions.json [ { \"id\": \"case-definition-1\", \"name\": \"Case Definition 1\", \"src\": \"./assets/case-definition-1.json\" }, { \"id\": \"case-definition-2\", \"name\": \"Case Definition 2\", \"src\": \"./assets/case-definition-2.json\" } ] Then create the corresponding Case Definition file... File: case-definition-1.json { \"id\" : \"case-definition-1\" , \"formId\" : \"case-definition-1-manifest\" , \"name\" : \"Case Definition 1\" , \"description\" : \"Description...\" , \"startFormOnOpen\" : { \"eventId\" : \"event-definition-1\" , \"eventFormId\" : \"event-form-1\" }, \"eventDefinitions\" : [ { \"id\" : \"event-definition-1\" , \"name\" : \"Event Definition 1\" , \"description\" : \"Description...\" , \"repeatable\" : false , \"required\" : true , \"eventFormDefinitions\" : [ { \"id\" : \"event-form-definition-1\" , \"formId\" : \"form-1\" , \"name\" : \"Form 1\" , \"required\" : true , \"repeatable\" : false } ] } ] }","title":"Configuring Cases"},{"location":"editor/project_managment/case-module/case-management-group/#case-definition-templates","text":"As a Data Collector uses the Client App, they navigate a Case's hierarchy of Events and Forms. Almost every piece of information they see can be overriden to display custom variables and logic by using the Case Definition's templates. This section describes the templates available and what variables are available. Note that all templates are evaluated as Javascript Template Literals. There are many good tutorials online about how to use Javascipt Template Literals, here are a couple of Javascript Template Literals examples that we reference often for things like doing conditionals and loops.","title":"Case Definition Templates"},{"location":"editor/project_managment/case-module/case-management-group/#debugging-case-definition-templates","text":"","title":"Debugging Case Definition Templates"},{"location":"editor/project_managment/case-module/case-management-group/#configuring-search","text":"The case references a Form in the formId property of the Case Definition. Make sure there is a form with that corresponding Form ID listed in forms.json with additional configuration for search. File: forms.json [ { \"id\" : \"case-definition-1-manifest\" , \"type\" : \"case\" , \"title\" : \"Case Definition 1 Manifest\" , \"description\" : \"Description...\" , \"listed\" : true , \"src\" : \"./assets/case-definition-1-manifest/form.html\" , \"searchSettings\" : { \"primaryTemplate\" : \"Participant ID: ${searchDoc.variables.participant_id}\" , \"shouldIndex\" : true , \"secondaryTemplate\" : \"Enrollment Date: ${searchDoc.variables.enrollment_date}, Case ID: ${searchDoc._id}\" , \"variablesToIndex\" : [ \"participant_id\" , \"enrollment_date\" ] } } ]","title":"Configuring search"},{"location":"editor/project_managment/case-module/case-management-group/#configuring-two-way-sync","text":"Because you may need to share cases across devices, configuring two-way sync may be necessary. See the Two-way Sync Documentation for more details. Note that you sync Form Responses, and it's the IDs of that you'll want to sync in the \"formId\" of the Case Definition in order to sync cases.","title":"Configuring two-way sync"},{"location":"editor/project_managment/case-module/case-management-group/#configuring-the-schedule","text":"One of the two tabs that Data Collectors see when they log into Tangerine is a \"Schedule\" tab. This schedule will show Case Event's on days where they are have an estimated day, scheduled day, and/or occurred on day. You can set these three dates on an event using the following APIs. caseService.setEventEstimatedDay(idOfEvent, timeInUnixMilliseconds) caseService.setEventOccurredOn(idOfEvent, timeInUnixMilliseconds) caseService.setEventScheduledDay(idOfEvent, timeInUnixMilliseconds)","title":"Configuring the Schedule"},{"location":"editor/project_managment/case-module/case-module-cookbook/","text":"Case Module Cookbook \u00b6 Get data from participant related to current Event Form \u00b6 In the following example, from an on-change hook or on-open , we can look up the corresponding participant for the current form, then look the age variable that has been previously set on that participant. const currentEventId = window . location . hash . split ( '/' )[ 5 ] const currentFormId = window . location . hash . split ( '/' )[ 6 ] const participantId = caseService . case . events . find ( event => event . id === currentEventId ) . eventForms . find ( eventForm => eventForm . id === currentFormId ) . participantId const age = caseService . getParticipantData ( participantId , 'age' )","title":"Case Module Cookbook"},{"location":"editor/project_managment/case-module/case-module-cookbook/#case-module-cookbook","text":"","title":"Case Module Cookbook"},{"location":"editor/project_managment/case-module/case-module-cookbook/#get-data-from-participant-related-to-current-event-form","text":"In the following example, from an on-change hook or on-open , we can look up the corresponding participant for the current form, then look the age variable that has been previously set on that participant. const currentEventId = window . location . hash . split ( '/' )[ 5 ] const currentFormId = window . location . hash . split ( '/' )[ 6 ] const participantId = caseService . case . events . find ( event => event . id === currentEventId ) . eventForms . find ( eventForm => eventForm . id === currentFormId ) . participantId const age = caseService . getParticipantData ( participantId , 'age' )","title":"Get data from participant related to current Event Form"},{"location":"system-administrator/","text":"System Administrator Guide \u00b6","title":"System Administrator Guide"},{"location":"system-administrator/#system-administrator-guide","text":"","title":"System Administrator Guide"},{"location":"system-administrator/install-on-aws/","text":"Installing Tangerine on AWS \u00b6 Creating the AWS instance \u00b6 Login to AWS and Launch a new instance with Ubuntu 16.04 using a t2.medium server with 4 GiB memory. Volume should be larger than the 8GB default. 24GB would be useful. Security \u00b6 Make sure to assign a security group to your instance that allows you to access port 80 via a web browser and port 22 via ssh. HTTP: TCP 80 0.0.0.0/0 SSH TCP 22 0.0.0.0/0 Set up SSL \u00b6 Prerequisites: - An SSL Certificate. If you don't yet have one, we recommend using AWS's Certificate Manager (found under \"Security, Identity, and Compliance\"). Create and Configure an Elastic Load Balancer (ELB): - Go to EC2, click \"Load Balancers\" in the left column, click \"Create Load Balancer\", and then select \"Classic Load Balancer\". - Step 1: Define Load Balancer - Set a Load Balancer name to what you want. - Set \"Load Balancer Protocol\" on the left most column to \"HTTPS\". - Set \"Instance Protocol\" in the third column to \"HTTP\". - Click \"Add\". - In the new row set \"Load Balancer Protocol\" to \"HTTP\" and \"Instance Protocol\" to \"HTTP\". - Click \"Next\". - Step 2: Assign Security Groups - Select \"Create a new security group\". - Set rules for both HTTP and HTTPS. If you only do HTTPS, anyone who goes to http://yourdomain.com will get an Access Denied message. Allow them to access the site with HTTP, the software will forward them to HTTPS automatically. - Click \"Next\". - Step 3: Configure Security Settings - If you have an SSL certificate, you can upload that here. Otherwise select \"Choose an existing certificate from AWS Certificate Manager (ACM)\". - If you have not requested a certificate for your domain yet, you will need to click \"Request a new certificate from ACM\" and follow those instructions before proceeding. - Step 4: Configure Health Check - Ping Protocol: HTTP - Ping Port: 80 - Ping Path: /app/tangerine/index.html - Response Timeout: 5 seconds - Interval: 10 seconds - Unhealthy threshold: 10 - Healthy threshold: 2 - Step 5: Add EC2 Instances - Select the EC2 instance running Tangerine. - Step 6: Add Tags - No tags are required for Tangerine. - Step 7: Review - If everything looks good, go ahead and create it! - Now proceed to your Load Balancers dashboard, click on your load balancer, click on the Instances tab, and now wait for your EC2 instance to be listed as \"InService\". - Configure your domain's DNS to point to this load balancer by clicking on the load balancer's Description tab and using the \"DNS name\" given to configure your Domain's DNS. Login \u00b6 Once your server is created, login with your key: ssh -i ~/.ssh/iyour_key -l ubuntu <your EC2 instance's IP address> Now you may continue to step 2 in the installation instructions.","title":"Installing Tangerine on AWS"},{"location":"system-administrator/install-on-aws/#installing-tangerine-on-aws","text":"","title":"Installing Tangerine on AWS"},{"location":"system-administrator/install-on-aws/#creating-the-aws-instance","text":"Login to AWS and Launch a new instance with Ubuntu 16.04 using a t2.medium server with 4 GiB memory. Volume should be larger than the 8GB default. 24GB would be useful.","title":"Creating the AWS instance"},{"location":"system-administrator/install-on-aws/#security","text":"Make sure to assign a security group to your instance that allows you to access port 80 via a web browser and port 22 via ssh. HTTP: TCP 80 0.0.0.0/0 SSH TCP 22 0.0.0.0/0","title":"Security"},{"location":"system-administrator/install-on-aws/#set-up-ssl","text":"Prerequisites: - An SSL Certificate. If you don't yet have one, we recommend using AWS's Certificate Manager (found under \"Security, Identity, and Compliance\"). Create and Configure an Elastic Load Balancer (ELB): - Go to EC2, click \"Load Balancers\" in the left column, click \"Create Load Balancer\", and then select \"Classic Load Balancer\". - Step 1: Define Load Balancer - Set a Load Balancer name to what you want. - Set \"Load Balancer Protocol\" on the left most column to \"HTTPS\". - Set \"Instance Protocol\" in the third column to \"HTTP\". - Click \"Add\". - In the new row set \"Load Balancer Protocol\" to \"HTTP\" and \"Instance Protocol\" to \"HTTP\". - Click \"Next\". - Step 2: Assign Security Groups - Select \"Create a new security group\". - Set rules for both HTTP and HTTPS. If you only do HTTPS, anyone who goes to http://yourdomain.com will get an Access Denied message. Allow them to access the site with HTTP, the software will forward them to HTTPS automatically. - Click \"Next\". - Step 3: Configure Security Settings - If you have an SSL certificate, you can upload that here. Otherwise select \"Choose an existing certificate from AWS Certificate Manager (ACM)\". - If you have not requested a certificate for your domain yet, you will need to click \"Request a new certificate from ACM\" and follow those instructions before proceeding. - Step 4: Configure Health Check - Ping Protocol: HTTP - Ping Port: 80 - Ping Path: /app/tangerine/index.html - Response Timeout: 5 seconds - Interval: 10 seconds - Unhealthy threshold: 10 - Healthy threshold: 2 - Step 5: Add EC2 Instances - Select the EC2 instance running Tangerine. - Step 6: Add Tags - No tags are required for Tangerine. - Step 7: Review - If everything looks good, go ahead and create it! - Now proceed to your Load Balancers dashboard, click on your load balancer, click on the Instances tab, and now wait for your EC2 instance to be listed as \"InService\". - Configure your domain's DNS to point to this load balancer by clicking on the load balancer's Description tab and using the \"DNS name\" given to configure your Domain's DNS.","title":"Set up SSL"},{"location":"system-administrator/install-on-aws/#login","text":"Once your server is created, login with your key: ssh -i ~/.ssh/iyour_key -l ubuntu <your EC2 instance's IP address> Now you may continue to step 2 in the installation instructions.","title":"Login"},{"location":"system-administrator/integrate-group-with-github/","text":"Integrate a group's content with a repository on Github \u00b6 Step 1 \u00b6 Create a group in the Editor. Note the ID in the URL starting with group- . Step 2 \u00b6 Create a repository on Github for your group's content. Step 3 \u00b6 SSH into the server and create a \"deploy key\" the server will use to authenticate to Github with. When running ssh-keygen , do not password protect the key file. When it prompts you for a password, just hit enter. ssh <your server> sudo su ssh-keygen -t rsa -b 4096 -C \"your_server_name@domain_of_server\" cat /root/.ssh/id_rsa.pub Now add an entry in your config.sh or create this file if it doesn't exist vi ~/.ssh/config host github.com HostName github.com IdentityFile ~/.ssh/id_rsa User lachko Change the key permissions if necessary Copy the key contents that we just \"cat'ed\" to the screen. Then go to your Repository on Github and click on Settings -> Deploy keys -> Add deploy key and paste that key in the key contents, enable \"Allow write access\" and save. Step 4 \u00b6 Now we push our group's initial content to our github repository with the following commands... cd tangerine/data/client/content/groups/<group id> git init git add . git commit -m \"first commit\" git remote add origin <githut repository SSH URL> git push origin master You should now see on your Github Repository code page a list of files pushed from the server. Step 5 \u00b6 We'll now configure your server to periodically pull content changes from Github. ssh <your server> sudo su screen -R git-integration cd tangerine/data/client/content/groups/<group id> watch -n10 \"GIT_SSH_COMMAND='ssh -i /root/.ssh/id_rsa' git pull origin master && git add . && git commit -m 'auto-commit' && GIT_SSH_COMMAND='ssh -i /root/.ssh/id_rsa' git push origin master\" At this point you have created \"virtual screen session\" called \"git-integration\" that is using the watch command to run the git pull command every 10 seconds. You'll want to leave this screen session open after your terminal disconnects. To \"detach\" from a screen session but leave it running in the background, press ctrl-a ctrl-d . Now you can safely log out from your SSH session while the screen session continutes. ssh <server> sudo su # List the screen sessions to get the git-pull-worker screen session ID to join. screen -ls # Join the screen session. screen -R <screen session ID, something like 29134.git-integration>","title":"Integrate a group's content with a repository on Github"},{"location":"system-administrator/integrate-group-with-github/#integrate-a-groups-content-with-a-repository-on-github","text":"","title":"Integrate a group's content with a repository on Github"},{"location":"system-administrator/integrate-group-with-github/#step-1","text":"Create a group in the Editor. Note the ID in the URL starting with group- .","title":"Step 1"},{"location":"system-administrator/integrate-group-with-github/#step-2","text":"Create a repository on Github for your group's content.","title":"Step 2"},{"location":"system-administrator/integrate-group-with-github/#step-3","text":"SSH into the server and create a \"deploy key\" the server will use to authenticate to Github with. When running ssh-keygen , do not password protect the key file. When it prompts you for a password, just hit enter. ssh <your server> sudo su ssh-keygen -t rsa -b 4096 -C \"your_server_name@domain_of_server\" cat /root/.ssh/id_rsa.pub Now add an entry in your config.sh or create this file if it doesn't exist vi ~/.ssh/config host github.com HostName github.com IdentityFile ~/.ssh/id_rsa User lachko Change the key permissions if necessary Copy the key contents that we just \"cat'ed\" to the screen. Then go to your Repository on Github and click on Settings -> Deploy keys -> Add deploy key and paste that key in the key contents, enable \"Allow write access\" and save.","title":"Step 3"},{"location":"system-administrator/integrate-group-with-github/#step-4","text":"Now we push our group's initial content to our github repository with the following commands... cd tangerine/data/client/content/groups/<group id> git init git add . git commit -m \"first commit\" git remote add origin <githut repository SSH URL> git push origin master You should now see on your Github Repository code page a list of files pushed from the server.","title":"Step 4"},{"location":"system-administrator/integrate-group-with-github/#step-5","text":"We'll now configure your server to periodically pull content changes from Github. ssh <your server> sudo su screen -R git-integration cd tangerine/data/client/content/groups/<group id> watch -n10 \"GIT_SSH_COMMAND='ssh -i /root/.ssh/id_rsa' git pull origin master && git add . && git commit -m 'auto-commit' && GIT_SSH_COMMAND='ssh -i /root/.ssh/id_rsa' git push origin master\" At this point you have created \"virtual screen session\" called \"git-integration\" that is using the watch command to run the git pull command every 10 seconds. You'll want to leave this screen session open after your terminal disconnects. To \"detach\" from a screen session but leave it running in the background, press ctrl-a ctrl-d . Now you can safely log out from your SSH session while the screen session continutes. ssh <server> sudo su # List the screen sessions to get the git-pull-worker screen session ID to join. screen -ls # Join the screen session. screen -R <screen session ID, something like 29134.git-integration>","title":"Step 5"},{"location":"system-administrator/sync-protocol-2/","text":"Sync Protocol 2 \u00b6 Enabling Sync Protocol 2 for new Groups \u00b6 Enable Sync Protocol 2 before creating a new group by editing config.sh by adding \"sync-protocol-2\" to T_MODULES . Create a new group. Define location list levels and content in Config -> Location List . Create a new form in Author -> Forms . Go to Deploy -> Device Users and create new Device Users. Go to Deploy -> Devices and create new Devices. Go to Deploy -> Releases and release the app. \"syncProtocol\":\"2\" Enables a \"Device Setup\" process on first boot of the client application. This requires you set up a \"Device\" record on the server. When setting up a Device record on the server, it will give you a QR code to use to scan from the tablet in order to receive its device ID and token. Upgrade an existing group to Sync Protocol 2 \u00b6 If planning to use `\"syncProtocol\":\"2\" and a project already uses \"centrallyManagedUserProfile\" : true , remove \"centrallyManagedUserProfile\": true and configure the user profile's custom sync settings to push.","title":"Sync Protocol 2"},{"location":"system-administrator/sync-protocol-2/#sync-protocol-2","text":"","title":"Sync Protocol 2"},{"location":"system-administrator/sync-protocol-2/#enabling-sync-protocol-2-for-new-groups","text":"Enable Sync Protocol 2 before creating a new group by editing config.sh by adding \"sync-protocol-2\" to T_MODULES . Create a new group. Define location list levels and content in Config -> Location List . Create a new form in Author -> Forms . Go to Deploy -> Device Users and create new Device Users. Go to Deploy -> Devices and create new Devices. Go to Deploy -> Releases and release the app. \"syncProtocol\":\"2\" Enables a \"Device Setup\" process on first boot of the client application. This requires you set up a \"Device\" record on the server. When setting up a Device record on the server, it will give you a QR code to use to scan from the tablet in order to receive its device ID and token.","title":"Enabling Sync Protocol 2 for new Groups"},{"location":"system-administrator/sync-protocol-2/#upgrade-an-existing-group-to-sync-protocol-2","text":"If planning to use `\"syncProtocol\":\"2\" and a project already uses \"centrallyManagedUserProfile\" : true , remove \"centrallyManagedUserProfile\": true and configure the user profile's custom sync settings to push.","title":"Upgrade an existing group to Sync Protocol 2"},{"location":"system-administrator/sync-strategies/","text":"Sync Strategies \u00b6 Overview \u00b6 The choice of sync strategy impacts how Tangerine syncs with the server. If you configure a form to use two-way sync, it uses CouchDB replication; otherwise, it uses custom sync. How are these two types of sync different? - CouchDB replication: -- If there is conflicting data on the server, the document update fails and it creates a log of the conflict on the uploaded document -- It currently does not notify the tablet user that there was a conflict. The data on the server displays the previous data, not the new, conflict data. See below how to view the new, conflict data. -- Uses more bandwidth - Custom sync -- If there is conflicting data on the server, it overwrites the document and does not make a log of the conflict. It uses the pouchdb-upsert plugin to do the write. -- Uses less bandwidth How to tell if there are conflicts when using CouchDB replication? \u00b6 Add \"conflicts=true\" to the url if checking view curl, or in your application, add {conflicts: true} option when you get() it. It will list the conflicts: _conflicts:[ \"29-0003a0b8af090d907efecde3aa121416\", \"25-f712a217de615f44c66ddb16b1a53a19\", \"14-bad1258430d22ad41dc9ce4123283c4f\", \"5-3fcde4c45f910b7a0c541e837e4ffd3c\" ] Query the form using \"rev\" in the querystring to view the conflicted version. http://localhost:5984/group-58093841-eaeb-4e51-8675-29757d71fd35/3cec5368-7b89-43cd-9c59-bcd1584dd4ea?rev=5-3fcde4c45f910b7a0c541e837e4ffd3c See https://pouchdb.com/guides/conflicts.html for more information.","title":"Sync Strategies"},{"location":"system-administrator/sync-strategies/#sync-strategies","text":"","title":"Sync Strategies"},{"location":"system-administrator/sync-strategies/#overview","text":"The choice of sync strategy impacts how Tangerine syncs with the server. If you configure a form to use two-way sync, it uses CouchDB replication; otherwise, it uses custom sync. How are these two types of sync different? - CouchDB replication: -- If there is conflicting data on the server, the document update fails and it creates a log of the conflict on the uploaded document -- It currently does not notify the tablet user that there was a conflict. The data on the server displays the previous data, not the new, conflict data. See below how to view the new, conflict data. -- Uses more bandwidth - Custom sync -- If there is conflicting data on the server, it overwrites the document and does not make a log of the conflict. It uses the pouchdb-upsert plugin to do the write. -- Uses less bandwidth","title":"Overview"},{"location":"system-administrator/sync-strategies/#how-to-tell-if-there-are-conflicts-when-using-couchdb-replication","text":"Add \"conflicts=true\" to the url if checking view curl, or in your application, add {conflicts: true} option when you get() it. It will list the conflicts: _conflicts:[ \"29-0003a0b8af090d907efecde3aa121416\", \"25-f712a217de615f44c66ddb16b1a53a19\", \"14-bad1258430d22ad41dc9ce4123283c4f\", \"5-3fcde4c45f910b7a0c541e837e4ffd3c\" ] Query the form using \"rev\" in the querystring to view the conflicted version. http://localhost:5984/group-58093841-eaeb-4e51-8675-29757d71fd35/3cec5368-7b89-43cd-9c59-bcd1584dd4ea?rev=5-3fcde4c45f910b7a0c541e837e4ffd3c See https://pouchdb.com/guides/conflicts.html for more information.","title":"How to tell if there are conflicts when using CouchDB replication?"},{"location":"system-administrator/p2p/p2p-sync/","text":"Using P2P Sync for Offline Data Transfer \u00b6 Use the P2P sync feature to transfer data between two or more tablets without an Internet connection. Note: The tablets must be running Android 8 (Oreo) to use this function. In the following example, your tablet will be syncing data from your tablet to two other peers' tablets running Tangerine. The goal is to have the same data on all tablets. At the end of the process, data will be transferred from your tablet to the Internet. Accessing the P2P feature: \u00b6 Each peer should select Sync from the menu. Click the P2P Sync tab. Discovery \u00b6 Gather in a circle with your peers. You and your peers should click the Discovery button. It does not matter who clicks first. Endpoints \u00b6 After a short time - a minute of two, the screen will show the device name, a list of available endpoints, and information about the data transfers in the Log. In the screenshot, your device name is highlighted in green (89678). The list of available endpoints - your peers' tablet names - is highlighted in red. A log of diagnostic information is highlighted in blue. (Please note that the endpoint names are randomly generated. The names you see when using this feature will be different.) Syncing to an Endpoint \u00b6 At this point in the process, your peers don't need to push any buttons; they only need to monitor the sync process for errors. Your tablet will be called the \"master\" tablet because it is controlling the sync operations. Once the \"master\" tablet has collected all of the data from the tablets, it can be connected to the Internet and upload all of this data to the server. Ask your peers which one has the tab at the top of the endpoints list marked \"35747 - Pending\". Upon identifying that peer, ask them to pay attention to the screen. Now you may click \"35747 - Pending\" to initiate the data transfer. Notice how the endpoint button you click turns a darker shade of grey to indicate that it has been pressed. Your tablet will send its data to your peer's tablet and then your peer's tablet will send its data back to your tablet, as well as the data you just sent. It's a little redundant, but this is part of reaching \"eventual consistency\" for all of the tablets. Notice that more data is added to the Log as the connection is made between the tablets and data transfer is initiated: When the data transfer is complete, the endpoint list updates to show that you are ready to sync the next device (\"Done! Sync next device.\"). Ask your peer if they received any error messages; if not, it is safe to proceed to the next peer's tablet. Ask the peer who has the tablet marked \"29726\" to be ready. Click the endpoint marked \"29726: Pending\". When the data transfer is complete, the endpoint list updates to show that you are ready to sync the next device (\"Done! Sync next device.\"). Ask your peer if they received any error messages. If none, great! Since you're at the end of the endpoints list, you are done with this first part. Do it again! \u00b6 When you synced data from your \"master\" tablet to the second tablet, it received data from the first tablet, which was transferred to the \"master\" when it was sync'd. But the first tablet still needs to receive data from the second tablet. So, you will need to repeat this whole process, starting from the first tablet (35747) and then to the second (29726). (You actually don't need to sync again the final device sync'd in the process (29726), but it is easier to explain this process as a simple round-robin.) It may be useful to confirm that any records created on other tablets has indeed been transferred. English: French: As mentioned earlier, once the sync process is complete (and you've done it twice), you may conect the \"master\" to the Internet and transfer data to the server. Tips \u00b6 Each time you visit the P2P page, your device name will change. It is a randomly generated number. Errors are highlighted in pink. It is fine to ignore the error marked \"State set to CONNECTED but already in that state\".","title":"Using P2P Sync for Offline Data Transfer"},{"location":"system-administrator/p2p/p2p-sync/#using-p2p-sync-for-offline-data-transfer","text":"Use the P2P sync feature to transfer data between two or more tablets without an Internet connection. Note: The tablets must be running Android 8 (Oreo) to use this function. In the following example, your tablet will be syncing data from your tablet to two other peers' tablets running Tangerine. The goal is to have the same data on all tablets. At the end of the process, data will be transferred from your tablet to the Internet.","title":"Using P2P Sync for Offline Data Transfer"},{"location":"system-administrator/p2p/p2p-sync/#accessing-the-p2p-feature","text":"Each peer should select Sync from the menu. Click the P2P Sync tab.","title":"Accessing the P2P feature:"},{"location":"system-administrator/p2p/p2p-sync/#discovery","text":"Gather in a circle with your peers. You and your peers should click the Discovery button. It does not matter who clicks first.","title":"Discovery"},{"location":"system-administrator/p2p/p2p-sync/#endpoints","text":"After a short time - a minute of two, the screen will show the device name, a list of available endpoints, and information about the data transfers in the Log. In the screenshot, your device name is highlighted in green (89678). The list of available endpoints - your peers' tablet names - is highlighted in red. A log of diagnostic information is highlighted in blue. (Please note that the endpoint names are randomly generated. The names you see when using this feature will be different.)","title":"Endpoints"},{"location":"system-administrator/p2p/p2p-sync/#syncing-to-an-endpoint","text":"At this point in the process, your peers don't need to push any buttons; they only need to monitor the sync process for errors. Your tablet will be called the \"master\" tablet because it is controlling the sync operations. Once the \"master\" tablet has collected all of the data from the tablets, it can be connected to the Internet and upload all of this data to the server. Ask your peers which one has the tab at the top of the endpoints list marked \"35747 - Pending\". Upon identifying that peer, ask them to pay attention to the screen. Now you may click \"35747 - Pending\" to initiate the data transfer. Notice how the endpoint button you click turns a darker shade of grey to indicate that it has been pressed. Your tablet will send its data to your peer's tablet and then your peer's tablet will send its data back to your tablet, as well as the data you just sent. It's a little redundant, but this is part of reaching \"eventual consistency\" for all of the tablets. Notice that more data is added to the Log as the connection is made between the tablets and data transfer is initiated: When the data transfer is complete, the endpoint list updates to show that you are ready to sync the next device (\"Done! Sync next device.\"). Ask your peer if they received any error messages; if not, it is safe to proceed to the next peer's tablet. Ask the peer who has the tablet marked \"29726\" to be ready. Click the endpoint marked \"29726: Pending\". When the data transfer is complete, the endpoint list updates to show that you are ready to sync the next device (\"Done! Sync next device.\"). Ask your peer if they received any error messages. If none, great! Since you're at the end of the endpoints list, you are done with this first part.","title":"Syncing to an Endpoint"},{"location":"system-administrator/p2p/p2p-sync/#do-it-again","text":"When you synced data from your \"master\" tablet to the second tablet, it received data from the first tablet, which was transferred to the \"master\" when it was sync'd. But the first tablet still needs to receive data from the second tablet. So, you will need to repeat this whole process, starting from the first tablet (35747) and then to the second (29726). (You actually don't need to sync again the final device sync'd in the process (29726), but it is easier to explain this process as a simple round-robin.) It may be useful to confirm that any records created on other tablets has indeed been transferred. English: French: As mentioned earlier, once the sync process is complete (and you've done it twice), you may conect the \"master\" to the Internet and transfer data to the server.","title":"Do it again!"},{"location":"system-administrator/p2p/p2p-sync/#tips","text":"Each time you visit the P2P page, your device name will change. It is a randomly generated number. Errors are highlighted in pink. It is fine to ignore the error marked \"State set to CONNECTED but already in that state\".","title":"Tips"}]}